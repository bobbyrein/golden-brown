{"ast":null,"code":"var util = require('util');\nvar Submodule = exports.Submodule = function (repo, id, mode, name) {\n  var _repo = repo,\n    _id = id,\n    _mode = mode,\n    _name = name;\n  Object.defineProperty(this, \"repo\", {\n    get: function () {\n      return _repo;\n    },\n    set: function (value) {\n      _repo = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"id\", {\n    get: function () {\n      return _id;\n    },\n    set: function (value) {\n      _id = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"mode\", {\n    get: function () {\n      return _mode;\n    },\n    set: function (value) {\n      _mode = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"name\", {\n    get: function () {\n      return _name;\n    },\n    set: function (value) {\n      _name = value;\n    },\n    enumerable: true\n  });\n\n  // Return the base name\n  Object.defineProperty(this, \"basename\", {\n    get: function () {\n      if (_name) {\n        var parts = _name.split(\"/\");\n        return parts[parts.length - 1];\n      } else {\n        return null;\n      }\n    },\n    enumerable: false\n  });\n};\n\n// Create a Submodule containing just the specified attributes\n//   +repo+ is the Repo\n//   +atts+ is a Hash of instance variable data\n//\n// Returns Grit::Submodule (unbaked)\nSubmodule.create = function (repo, attributes, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  attributes = args.length ? args.shift() : {};\n  var submodule = new Submodule(repo);\n  for (var name in attributes) {\n    submodule[name] = attributes[name];\n  }\n  callback(null, submodule);\n};\n\n// The configuration information for the given +repo+\n//   +repo+ is the Repo\n//   +ref+ is the committish (defaults to 'master')\n//\n// Returns a Hash of { <path:String> => { 'url' => <url:String>, 'id' => <id:String> } }\n// Returns {} if no .gitmodules file was found\nSubmodule.config = function (repo, ref, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  ref = args.length ? args.shift() : 'master';\n\n  // Fetch code\n  repo.commit(ref, function (err, commit) {\n    if (err) return callback(err, commit);\n    // Fetch the blob\n    var blob = commit.tree.find('.gitmodules');\n    // If there is no blob return an empty object\n    if (blob == null) return callback(null, {});\n    // Parse all the lines\n    var lines = blob.data.trim().replace(/\\r\\n?/g, \"\\n\").split(\"\\n\");\n    var config = {};\n    var current = null;\n    lines.forEach(function (line) {\n      if (line.match(/^\\[submodule \"(.+)\"\\]$/)) {\n        var parts = line.match(/^\\[submodule \"(.+)\"\\]$/);\n        current = parts[1];\n        config[current] = {};\n        config[current]['id'] = commit.tree.find(current).id;\n      } else if (line.match(/^\\t(\\w+) = (.+)$/)) {\n        var parts = line.match(/^\\t(\\w+) = (.+)$/);\n        config[current][parts[1]] = parts[2];\n        if (parts[1] == 'path') {\n          config[current]['id'] = commit.tree.find(parts[2]).id;\n        }\n      } else {}\n    });\n    // Return the config\n    callback(null, config);\n  });\n};","map":{"version":3,"names":["util","require","Submodule","exports","repo","id","mode","name","_repo","_id","_mode","_name","Object","defineProperty","get","set","value","enumerable","parts","split","length","create","attributes","callback","args","Array","prototype","slice","call","arguments","pop","shift","submodule","config","ref","commit","err","blob","tree","find","lines","data","trim","replace","current","forEach","line","match"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/sub_module.js"],"sourcesContent":["var util = require('util');\n\nvar Submodule = exports.Submodule = function(repo, id, mode, name) {\n  var _repo = repo, _id = id, _mode = mode, _name = name;\n  \n  Object.defineProperty(this, \"repo\", { get: function() { return _repo; }, set: function(value) { _repo = value; }, enumerable: true});    \n  Object.defineProperty(this, \"id\", { get: function() { return _id; }, set: function(value) { _id = value; }, enumerable: true});    \n  Object.defineProperty(this, \"mode\", { get: function() { return _mode; }, set: function(value) { _mode = value; }, enumerable: true});      \n  Object.defineProperty(this, \"name\", { get: function() { return _name; }, set: function(value) { _name = value; }, enumerable: true});    \n  \n  // Return the base name\n  Object.defineProperty(this, \"basename\", { get: function() { \n      if(_name) {\n        var parts = _name.split(\"/\");\n        return parts[parts.length - 1];\n      } else {\n        return null;\n      }\n    }, enumerable: false});  \n}\n\n// Create a Submodule containing just the specified attributes\n//   +repo+ is the Repo\n//   +atts+ is a Hash of instance variable data\n//\n// Returns Grit::Submodule (unbaked)\nSubmodule.create = function(repo, attributes, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  attributes = args.length ? args.shift() : {};\n  \n  var submodule = new Submodule(repo);\n  for(var name in attributes) {\n    submodule[name] = attributes[name];\n  }\n  \n  callback(null, submodule);\n}\n\n// The configuration information for the given +repo+\n//   +repo+ is the Repo\n//   +ref+ is the committish (defaults to 'master')\n//\n// Returns a Hash of { <path:String> => { 'url' => <url:String>, 'id' => <id:String> } }\n// Returns {} if no .gitmodules file was found\nSubmodule.config = function(repo, ref, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  ref = args.length ? args.shift() : 'master';\n\n  // Fetch code\n  repo.commit(ref, function(err, commit) {\n    if(err) return callback(err, commit);\n    // Fetch the blob\n    var blob = commit.tree.find('.gitmodules');\n    // If there is no blob return an empty object\n    if(blob == null) return callback(null, {});\n    // Parse all the lines\n    var lines = blob.data.trim().replace(/\\r\\n?/g, \"\\n\").split(\"\\n\");\n    var config = {};\n    var current = null;\n    \n    lines.forEach(function(line) {\n      if(line.match(/^\\[submodule \"(.+)\"\\]$/)) {\n        var parts = line.match(/^\\[submodule \"(.+)\"\\]$/);\n        current = parts[1];\n        config[current] = {};\n        config[current]['id'] = commit.tree.find(current).id;\n      } else if(line.match(/^\\t(\\w+) = (.+)$/)) {\n        var parts = line.match(/^\\t(\\w+) = (.+)$/);\n        config[current][parts[1]] = parts[2];\n        if(parts[1] == 'path') {\n          config[current]['id'] = commit.tree.find(parts[2]).id;          \n        }\n      } else {}      \n    });\n    // Return the config\n    callback(null, config);    \n  });\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}