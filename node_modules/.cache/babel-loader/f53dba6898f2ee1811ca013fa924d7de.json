{"ast":null,"code":"var _jsxFileName = \"/Users/bobbyrein/react-course/golden-brown/src/contexts/cart.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useReducer } from 'react';\nimport { createAction } from '../utils/reducer/reducer.utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst addCartItem = (cartItems, productToAdd) => {\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? {\n      ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n  return [...cartItems, {\n    ...productToAdd,\n    quantity: 1\n  }];\n};\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  // find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n  // check if quantity is equal to 1, if it is remove that item from the cart\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  }\n\n  // return back cartitems with matching cart item with reduced quantity\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? {\n    ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\nconst clearCartItem = (cartItems, cartItemToClear) => cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\nconst CART_ACTION_TYPES = {\n  SET_IS_CART_OPEN: 'SET_IS_CART_OPEN',\n  SET_CART_ITEMS: 'SET_CART_ITEMS',\n  SET_CART_COUNT: 'SET_CART_COUNT',\n  SET_CART_TOTAL: 'SET_CART_TOTAL'\n};\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0\n};\nconst cartReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case CART_ACTION_TYPES.SET_CART_ITEMS:\n      return {\n        ...state,\n        ...payload\n      };\n    default:\n      throw new Error(`Unhandled type ${type} in cartReducer`);\n  }\n};\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  cartTotal: 0\n});\nexport const CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [{\n    cartCount,\n    cartTotal,\n    cartItems\n  }, dispatch] = useReducer(cartReducer, INITIAL_STATE);\n  const updateCartItemsReducer = cartItems => {\n    const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    const newCartTotal = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    const payload = {\n      cartItems,\n      cartCount: newCartCount,\n      cartTotal: newCartTotal\n    };\n    dispatch(createAction(CART_ACTION_TYPES.SET_CART_ITEMS, payload));\n  };\n  const addItemToCart = productToAdd => {\n    const newCartItems = addCartItem(cartItems, productToAdd);\n    updateCartItemsReducer(newCartItems);\n  };\n  const removeItemToCart = cartItemToRemove => {\n    const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n    updateCartItemsReducer(newCartItems);\n  };\n  const clearItemFromCart = cartItemToClear => {\n    const newCartItems = clearCartItem(cartItems, cartItemToClear);\n    updateCartItemsReducer(newCartItems);\n  };\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    removeItemToCart,\n    clearItemFromCart,\n    cartItems,\n    cartCount,\n    cartTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 12\n  }, this);\n};\n_s(CartProvider, \"Pi96wqJ5DC/xVGqzCIB7CytznYc=\");\n_c = CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["createContext","useState","useReducer","createAction","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","CART_ACTION_TYPES","SET_IS_CART_OPEN","SET_CART_ITEMS","SET_CART_COUNT","SET_CART_TOTAL","INITIAL_STATE","isCartOpen","cartCount","cartTotal","cartReducer","state","action","type","payload","Error","CartContext","setIsCartOpen","addItemToCart","removeItemFromCart","clearItemFromCart","CartProvider","children","dispatch","updateCartItemsReducer","newCartCount","reduce","total","newCartTotal","price","newCartItems","removeItemToCart","value"],"sources":["/Users/bobbyrein/react-course/golden-brown/src/contexts/cart.context.jsx"],"sourcesContent":["import { createContext, useState, useReducer } from 'react';\n\nimport { createAction } from '../utils/reducer/reducer.utils';\n\nconst addCartItem = (cartItems, productToAdd) => {\n    const existingCartItem = cartItems.find(\n        (cartItem) => cartItem.id === productToAdd.id\n    );\n\n    if (existingCartItem) {\n        return cartItems.map((cartItem) =>\n            cartItem.id === productToAdd.id\n                ? { ...cartItem, quantity: cartItem.quantity + 1 }\n                : cartItem\n        );\n    }\n\n    return [...cartItems, { ...productToAdd, quantity: 1 }];\n};\n\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n    // find the cart item to remove\n    const existingCartItem = cartItems.find(\n        (cartItem) => cartItem.id === cartItemToRemove.id\n    );\n\n    // check if quantity is equal to 1, if it is remove that item from the cart\n    if (existingCartItem.quantity === 1) {\n        return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\n    }\n\n    // return back cartitems with matching cart item with reduced quantity\n    return cartItems.map((cartItem) =>\n        cartItem.id === cartItemToRemove.id\n            ? { ...cartItem, quantity: cartItem.quantity - 1 }\n            : cartItem\n    );\n};\n\nconst clearCartItem = (cartItems, cartItemToClear) =>\n    cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\n\nconst CART_ACTION_TYPES = {\n    SET_IS_CART_OPEN: 'SET_IS_CART_OPEN',\n    SET_CART_ITEMS: 'SET_CART_ITEMS',\n    SET_CART_COUNT: 'SET_CART_COUNT',\n    SET_CART_TOTAL: 'SET_CART_TOTAL',\n};\n\nconst INITIAL_STATE = {\n    isCartOpen: false,\n    cartItems: [],\n    cartCount: 0,\n    cartTotal: 0,\n};\n\nconst cartReducer = (state, action) => {\n    const { type, payload } = action;\n\n    switch (type) {\n        case CART_ACTION_TYPES.SET_CART_ITEMS:\n            return {\n                ...state,\n                ...payload,\n            };\n        default:\n            throw new Error(`Unhandled type ${type} in cartReducer`);\n    }\n};\n\nexport const CartContext = createContext({\n    isCartOpen: false,\n    setIsCartOpen: () => { },\n    cartItems: [],\n    addItemToCart: () => { },\n    removeItemFromCart: () => { },\n    clearItemFromCart: () => { },\n    cartCount: 0,\n    cartTotal: 0,\n});\n\nexport const CartProvider = ({ children }) => {\n    const [isCartOpen, setIsCartOpen] = useState(false);\n\n    const [{ cartCount, cartTotal, cartItems }, dispatch] = useReducer(\n        cartReducer,\n        INITIAL_STATE\n    );\n\n    const updateCartItemsReducer = (cartItems) => {\n        const newCartCount = cartItems.reduce(\n            (total, cartItem) => total + cartItem.quantity,\n            0\n        );\n\n        const newCartTotal = cartItems.reduce(\n            (total, cartItem) => total + cartItem.quantity * cartItem.price,\n            0\n        );\n\n        const payload = {\n            cartItems,\n            cartCount: newCartCount,\n            cartTotal: newCartTotal,\n        };\n\n        dispatch(createAction(CART_ACTION_TYPES.SET_CART_ITEMS, payload));\n    };\n\n    const addItemToCart = (productToAdd) => {\n        const newCartItems = addCartItem(cartItems, productToAdd);\n        updateCartItemsReducer(newCartItems);\n    };\n\n    const removeItemToCart = (cartItemToRemove) => {\n        const newCartItems = removeCartItem(cartItems, cartItemToRemove);\n        updateCartItemsReducer(newCartItems);\n    };\n\n    const clearItemFromCart = (cartItemToClear) => {\n        const newCartItems = clearCartItem(cartItems, cartItemToClear);\n        updateCartItemsReducer(newCartItems);\n    };\n\n    const value = {\n        isCartOpen,\n        setIsCartOpen,\n        addItemToCart,\n        removeItemToCart,\n        clearItemFromCart,\n        cartItems,\n        cartCount,\n        cartTotal,\n    };\n\n    return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}