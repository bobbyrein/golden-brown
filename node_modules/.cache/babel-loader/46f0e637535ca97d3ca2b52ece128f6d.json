{"ast":null,"code":"var util = require('util'),\n  GitFileOperations = require('./git_file_operations').GitFileOperations,\n  StatusFile = require('./status_file').StatusFile;\nvar Status = exports.Status = function (repo, callback) {\n  var _repo = repo,\n    _files = [];\n  Object.defineProperty(this, \"repo\", {\n    get: function () {\n      return _repo;\n    },\n    set: function (value) {\n      _repo = value;\n    },\n    enumerable: false\n  });\n  Object.defineProperty(this, \"files\", {\n    get: function () {\n      return _files;\n    },\n    set: function (value) {\n      _files = value;\n    },\n    enumerable: true\n  });\n  construct_status(_repo, this, callback);\n};\nStatus.prototype.index = function (file) {\n  return this.files[file];\n};\n\n// Construct the status object\nvar construct_status = function (repo, status, callback) {\n  // Let's get the files list\n  ls_files(repo, function (err, repo_files) {\n    if (err) return callback(err, repo_files);\n    // Set the basic list of files\n    status.files = repo_files;\n    // Fetch all the untracked files in working directory and add them to the list of files\n    locate_untracked_files(repo.working_directory, status, function (err, untracked_files) {\n      if (err) return callback(err, untracked_files);\n\n      // Find modified files in tree\n      diff_files(repo, function (err, diff_files) {\n        if (err) return callback(err, diff_files);\n\n        // Process all the files, merging in any extra information where needed\n        Object.keys(diff_files).forEach(function (key) {\n          if (status.files[key]) {\n            for (var attrname in diff_files[key]) {\n              status.files[key][attrname] = diff_files[key][attrname];\n            }\n          } else {\n            status.files[key] = diff_files[key];\n          }\n        });\n\n        // Find added but not commited -- new files\n        diff_index(repo, 'HEAD', function (err, added_files) {\n          if (err) return callback(err, added_files);\n\n          // Process all the files, merging in any extra information where needed\n          Object.keys(added_files).forEach(function (key) {\n            if (status.files[key]) {\n              for (var attrname in added_files[key]) {\n                status.files[key][attrname] = added_files[key][attrname];\n              }\n            } else {\n              status.files[key] = added_files[key];\n            }\n          });\n\n          // Now process all the file objects and replace them with real status file objects\n          Object.keys(status.files).forEach(function (key) {\n            status.files[key] = new StatusFile(repo, status.files[key]);\n          });\n\n          // Return the populated status object\n          callback(null, status);\n        });\n      });\n    });\n  });\n};\n\n// Locate all the diff files in the repo\nvar diff_files = function (repo, callback) {\n  var hsh = {};\n  repo.git.diff_files(function (err, lines_output) {\n    var lines = lines_output.split(\"\\n\");\n    lines.forEach(function (line) {\n      var parts = line.split(\"\\t\");\n      // Unpack the line\n      var info = parts[0],\n        file = parts[1];\n      parts = info.trim().replace(/ +/g, ' ').split(\" \");\n      // Unpack the parts from the info\n      var mode_src = parts[0],\n        mode_dest = parts[1],\n        sha_src = parts[2],\n        sha_dest = parts[3],\n        type = parts[4];\n      hsh[file] = {\n        path: file,\n        mode_file: mode_src.toString().substr(1, 7),\n        mode_index: mode_dest,\n        sha_file: sha_src,\n        sha_index: sha_dest,\n        type: type\n      };\n    });\n    callback(null, hsh);\n  });\n};\n\n// Compares the index and the repository\nvar diff_index = function (repo, tree_sha, callback) {\n  var hsh = {};\n  repo.git.diff_index({}, tree_sha, function (err, lines_output) {\n    var lines = lines_output.split(\"\\n\");\n    lines.forEach(function (line) {\n      var parts = line.split(\"\\t\");\n      // Unpack the line\n      var info = parts[0],\n        file = parts[1];\n      parts = info.trim().replace(/ +/g, ' ').split(\" \");\n      // Unpack the parts from the info\n      var mode_src = parts[0],\n        mode_dest = parts[1],\n        sha_src = parts[2],\n        sha_dest = parts[3],\n        type = parts[4];\n      hsh[file] = {\n        path: file,\n        mode_repo: mode_src.toString().substr(1, 7),\n        mode_index: mode_dest,\n        sha_repo: sha_src,\n        sha_index: sha_dest,\n        type: type\n      };\n    });\n    callback(null, hsh);\n  });\n};\n\n// Get the list of all files that are tracked in the repo\nvar ls_files = function (repo, callback) {\n  var hsh = {};\n  repo.git.ls_files({\n    stage: true\n  }, function (err, lines_output) {\n    var lines = lines_output.split(\"\\n\");\n    lines.forEach(function (line) {\n      var parts = line.split(\"\\t\");\n      // Unpack the line\n      var info = parts[0],\n        file = parts[1];\n      parts = info.trim().replace(/ +/g, ' ').split(\" \");\n      // Unpack the parts from the info\n      var mode = parts[0],\n        sha = parts[1],\n        stage = parts[2];\n      hsh[file] = {\n        path: file,\n        mode_index: mode,\n        sha_index: sha,\n        stage: stage\n      };\n    });\n    callback(null, hsh);\n  });\n};\n\n// Locates all the untracked files in the repo\nvar locate_untracked_files = function (directory, status, callback) {\n  var files = status.files;\n  // Locate all files in underlying directories\n  var stream = GitFileOperations.glob_streaming(directory);\n  // Triggers on each entry in the directory\n  stream.addListener(\"data\", function (result) {\n    if (files[result.path] == null && result.stat.isFile()) {\n      var file = result.path.replace(directory + \"/\", '');\n      files[file] = {\n        path: file,\n        untracked: true\n      };\n    }\n  });\n\n  // Triggers at the end of the call\n  stream.addListener(\"end\", function (err, result) {\n    callback(null, files);\n  });\n};","map":{"version":3,"names":["util","require","GitFileOperations","StatusFile","Status","exports","repo","callback","_repo","_files","Object","defineProperty","get","set","value","enumerable","construct_status","prototype","index","file","files","status","ls_files","err","repo_files","locate_untracked_files","working_directory","untracked_files","diff_files","keys","forEach","key","attrname","diff_index","added_files","hsh","git","lines_output","lines","split","line","parts","info","trim","replace","mode_src","mode_dest","sha_src","sha_dest","type","path","mode_file","toString","substr","mode_index","sha_file","sha_index","tree_sha","mode_repo","sha_repo","stage","mode","sha","directory","stream","glob_streaming","addListener","result","stat","isFile","untracked"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/status.js"],"sourcesContent":["var util = require('util'),\n  GitFileOperations = require('./git_file_operations').GitFileOperations,\n  StatusFile = require('./status_file').StatusFile;\n\nvar Status = exports.Status = function(repo, callback) {\n  var _repo = repo, _files = [];\n  \n  Object.defineProperty(this, \"repo\", { get: function() { return _repo; }, set: function(value) { _repo = value; }, enumerable: false});\n  Object.defineProperty(this, \"files\", { get: function() { return _files; }, set: function(value) { _files = value; }, enumerable: true});\n  \n  construct_status(_repo, this, callback);\n}\n\nStatus.prototype.index = function(file) {\n  return this.files[file];\n}\n\n// Construct the status object\nvar construct_status = function(repo, status, callback) {\n  // Let's get the files list\n  ls_files(repo, function(err, repo_files) {\n    if(err) return callback(err, repo_files);\n    // Set the basic list of files\n    status.files = repo_files;\n    // Fetch all the untracked files in working directory and add them to the list of files\n    locate_untracked_files(repo.working_directory, status, function(err, untracked_files) {\n      if(err) return callback(err, untracked_files);\n      \n      // Find modified files in tree\n      diff_files(repo, function(err, diff_files) {\n        if(err) return callback(err, diff_files);\n        \n        // Process all the files, merging in any extra information where needed\n        Object.keys(diff_files).forEach(function(key) {\n          if(status.files[key]) {\n            for(var attrname in diff_files[key]) { status.files[key][attrname] = diff_files[key][attrname]; }\n          } else {\n            status.files[key] = diff_files[key];\n          }\n        })\n        \n        // Find added but not commited -- new files\n        diff_index(repo, 'HEAD', function(err, added_files) {\n          if(err) return callback(err, added_files);\n\n          // Process all the files, merging in any extra information where needed\n          Object.keys(added_files).forEach(function(key) {\n            if(status.files[key]) {\n              for(var attrname in added_files[key]) { status.files[key][attrname] = added_files[key][attrname]; }\n            } else {\n              status.files[key] = added_files[key];\n            }\n          })\n          \n          // Now process all the file objects and replace them with real status file objects\n          Object.keys(status.files).forEach(function(key) {\n            status.files[key] = new StatusFile(repo, status.files[key]);\n          })\n          \n          // Return the populated status object\n          callback(null, status);\n        });\n      });\n    })\n  })\n}\n\n// Locate all the diff files in the repo\nvar diff_files = function(repo, callback) {\n  var hsh = {};\n  \n  repo.git.diff_files(function(err, lines_output) {\n    var lines = lines_output.split(\"\\n\");\n\n    lines.forEach(function(line) {\n      var parts = line.split(\"\\t\");\n      // Unpack the line\n      var info = parts[0], file = parts[1];\n      parts = info.trim().replace(/ +/g, ' ').split(\" \");\n      // Unpack the parts from the info\n      var mode_src = parts[0], mode_dest = parts[1], sha_src = parts[2], sha_dest = parts[3], type = parts[4]\n      hsh[file] = {path:file, mode_file:mode_src.toString().substr(1, 7), mode_index:mode_dest,\n                    sha_file:sha_src, sha_index:sha_dest, type:type};      \n    });\n\n    callback(null, hsh);\n  });  \n}\n\n// Compares the index and the repository\nvar diff_index = function(repo, tree_sha, callback) {  \n  var hsh = {};\n\n  repo.git.diff_index({}, tree_sha, function(err, lines_output) {\n    var lines = lines_output.split(\"\\n\");\n\n    lines.forEach(function(line) {\n      var parts = line.split(\"\\t\");\n      // Unpack the line\n      var info = parts[0], file = parts[1];\n      parts = info.trim().replace(/ +/g, ' ').split(\" \");\n      // Unpack the parts from the info\n      var mode_src = parts[0], mode_dest = parts[1], sha_src = parts[2], sha_dest = parts[3], type = parts[4];\n      hsh[file] = {path:file, mode_repo:mode_src.toString().substr(1, 7), mode_index:mode_dest,\n                    sha_repo:sha_src, sha_index:sha_dest, type:type};      \n    });\n\n    callback(null, hsh);\n  });    \n}\n\n// Get the list of all files that are tracked in the repo\nvar ls_files = function(repo, callback) {\n  var hsh = {};\n\n  repo.git.ls_files({stage:true}, function(err, lines_output) {\n    var lines = lines_output.split(\"\\n\");\n\n    lines.forEach(function(line) {\n      var parts = line.split(\"\\t\");\n      // Unpack the line\n      var info = parts[0], file = parts[1];\n      parts = info.trim().replace(/ +/g, ' ').split(\" \");\n      // Unpack the parts from the info\n      var mode = parts[0], sha = parts[1], stage = parts[2];\n      hsh[file] = {path:file, mode_index:mode, sha_index:sha, stage:stage};      \n    });\n\n    callback(null, hsh);\n  })\n}\n\n// Locates all the untracked files in the repo\nvar locate_untracked_files = function(directory, status, callback) {\n  var files = status.files;\n  // Locate all files in underlying directories\n  var stream = GitFileOperations.glob_streaming(directory);  \n  // Triggers on each entry in the directory\n  stream.addListener(\"data\", function(result) {\n    if(files[result.path] == null && result.stat.isFile()) {\n      var file = result.path.replace(directory + \"/\", '');\n      files[file] = {path:file, untracked:true};\n    }\n  });\n  \n  // Triggers at the end of the call\n  stream.addListener(\"end\", function(err, result) {\n    callback(null, files);\n  })  \n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}