{"ast":null,"code":"var util = require('util'),\n  fs = require('fs'),\n  GitFileOperations = require('./git_file_operations').GitFileOperations,\n  exec = require('child_process').exec,\n  FileIndex = require('./file_index').FileIndex,\n  Repository = require('./repository').Repository,\n  Difference = require('../diff/diff').Difference;\nvar Git = exports.Git = function (git_directory) {\n  var _git_diretory = git_directory,\n    _git_file_index;\n  var _repository = new Repository(_git_diretory, {});\n  // Control access to internal variables\n  Object.defineProperty(this, \"git_directory\", {\n    get: function () {\n      return _git_diretory;\n    },\n    set: function (value) {\n      _git_diretory = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"git_file_index\", {\n    get: function () {\n      return _git_file_index;\n    },\n    set: function (value) {\n      _git_file_index = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"repository\", {\n    get: function () {\n      return _repository;\n    },\n    set: function (value) {\n      _repository = value;\n    },\n    enumerable: true\n  });\n};\n\n// Set up the gitbinary\nif (process.platform.toLowerCase().match(/mswin(?!ce)|mingw|bccwin|win32/)) {\n  Git.git_binary = \"git\";\n} else {\n  Git.git_binary = \"/usr/bin/env git\";\n}\n\n// Chomp text removing end carriage returns\nvar chomp = function chomp(raw_text) {\n  return raw_text ? raw_text.replace(/(\\n|\\r)+$/, '') : '';\n};\nvar read_file = function (path, callback) {\n  fs.stat(path, function (err, stat) {\n    if (err) return callback(err, null);\n    fs.readFile(path, 'ascii', callback);\n  });\n};\n\n// Retrieve references\nGit.prototype.refs = function (options, prefix, callback) {\n  var refs = [];\n  var already = {};\n  var self = this;\n\n  // Locate all files in underlying directories\n  var stream = GitFileOperations.glob_streaming(this.git_directory + \"/\" + prefix);\n  // Triggers on each entry in the directory\n  stream.addListener(\"data\", function (result) {\n    // If we have a directory check if we have a reference file\n    if (result.stat.isFile()) {\n      // Read the file content\n      try {\n        var id = chomp(fs.readFileSync(result.path, 'ascii'));\n        var name = result.path.replace(self.git_directory + \"/\" + prefix + \"/\", '');\n        if (!already[name]) {\n          refs.push(name + \" \" + id);\n          already[name] = true;\n        }\n      } catch (err) {\n        // Seems to be some instances where it's not able to tell that a directory is not a file ?\n      }\n    }\n  });\n\n  // Triggers at the end of the call\n  stream.addListener(\"end\", function (err, result) {\n    fs.stat(self.git_directory + \"/packed-refs\", function (err, stat) {\n      if (err || !stat.isFile()) return callback(null, refs.join(\"\\n\"));\n      read_file(self.git_directory + \"/packed-refs\", function (err, data) {\n        var parts = data.split(/\\n/);\n        // Scan all lines\n        for (var i = 0; i < parts.length; i++) {\n          var match = parts[i].match(/^(\\w{40}) (.*?)$/);\n          if (match) {\n            if (match[2].match(\"^\" + prefix)) {\n              var id = chomp(match[1]);\n              var name = match[2].replace(prefix + \"/\", '');\n              if (!already[name]) {\n                refs.push(name + \" \" + id);\n                already[name] = true;\n              }\n            }\n          }\n        }\n        // Return all the references\n        callback(null, refs.join(\"\\n\"));\n      });\n    });\n  });\n};\n\n// Read a specific file\nGit.prototype.fs_read = function (file, callback) {\n  GitFileOperations.fs_read(this.git_directory, file, callback);\n};\n\n// // Parse revisions\n// Git.prototype.rev_parse = function(options, string, callback) {\n//  if(string == null || string.constructor != String) return callback(\"invalid string: \" + string);\n//  var self = this;\n//\n//  // Make sure we don't have a directory up ..\n//  if(string.match(/\\.\\./)) {\n//    var shas = string.split(/\\.\\./);\n//    var sha1 = shas[0], sha2 = shas[1];\n//    // Need to rev_parse the two keys and return the data\n//    new Simplifier().execute(new ParallelFlow(\n//       function(callback) { self.rev_parse({}, sha1, callback); },\n//       function(callback) { self.rev_parse({}, sha2, callback); }\n//      ), function(sha1_results, sha2_results) {\n//      // Return the collected files\n//      return callback(null, [sha1_results[1], sha2_results[1]]);\n//    });\n//  }\n//\n//  // If we have a sha being returned nop it\n//  if(string.match(/^[0-9a-f]{40}$/)) {\n//    return callback(null, chomp(string));\n//  }\n//\n//  // Check in heads directory\n//  read_file(self.git_directory + \"/refs/heads/\" + string, function(err, data) {\n//    if(!err) return fs.readFile(self.git_directory + \"/refs/heads/\" + string, function(err, data) { callback(err, chomp(data)); });\n//    // If not in heads then check in remotes\n//    read_file(self.git_directory + \"/refs/remotes/\" + string, function(err, data) {\n//      if(!err) return fs.readFile(self.git_directory + \"/refs/remotes/\" + string, function(err, data) { callback(err, chomp(data)); });\n//      // If not in remotes check in tags\n//      read_file(self.git_directory + \"/refs/tags/\" + string, function(err, data) {\n//        if(!err) return fs.readFile(self.git_directory + \"/refs/tags/\" + string, function(err, data) { callback(err, chomp(data)); });\n//\n//        // Not pin any of the main refs, look in packed packed-refs\n//        read_file(self.git_directory + \"/packed-refs\", function(err, data) {\n//          if(err) return callback(err, data);\n//          // Split the data on new line\n//          var ref = null;\n//          var parts = data.split(/\\n/);\n//          // Locate head\n//          for(var i = 0; i < parts.length; i++) {\n//            var match_parts = parts[i].match(/^(\\w{40}) refs\\/.+?\\/(.*?)$/);\n//            if(match_parts) {\n//              ref = match_parts[1];\n//              // If we have a match fetch reference and return\n//              if(new RegExp(string + '$').test(match_parts[3])) {\n//                break;\n//              }\n//            }\n//          }\n//\n//          // If we have a reference lets terminate\n//          if(ref) return callback(null, ref);\n//\n//          // !! more partials and such !!\n//\n//\n//          // revert to calling git\n//          self.call_git('', 'rev-parse', '', options, string, function(err, result) {\n//            result = result ? chomp(result) : result;\n//            callback(err, result);\n//          })\n//        });\n//      });\n//    });\n//  });\n// }\n\nGit.prototype.transform_options = function (options) {\n  var args = [];\n  var keys = Object.keys(options);\n\n  // Process all entries\n  Object.keys(options).forEach(function (key) {\n    if (key.length == 1) {\n      if (options[key] == true && options[key].constructor == Boolean) {\n        args.push('-' + key);\n      } else if (options[key] == false && options[key].constructor == Boolean) {} else {\n        args.push('-' + key + ' \"' + options[key].toString().replace('\"', \"\\\\\\\"\") + '\"');\n      }\n    } else {\n      if (options[key] == true && options[key].constructor == Boolean) {\n        args.push(\"--\" + key.toString().replace(/_/, '-'));\n      } else if (options[key] == false && options[key].constructor == Boolean) {} else {\n        args.push('--' + key.toString().replace(/_/, '-') + '=\"' + options[key].toString().replace('\"', \"\\\\\\\"\") + '\"');\n      }\n    }\n  });\n\n  // Return formated parametes\n  return args;\n};\nGit.prototype.git = function () {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  // Unpack the variables\n  var function_name = args.length ? args.shift() : null;\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', function_name, '', options, arguments, function (err, result) {\n    callback(err, result);\n  });\n};\nvar shell_escape = function (str) {\n  return str.toString().replace('\"', \"\\\\\\\"\").replace(/\\;/g, \"\\\\;\");\n};\n\n// Call the native git binary\nGit.prototype.call_git = function (prefix, command, postfix, options, args, callback) {\n  // Do we have a timeout\n  var timeout = options['timeout'] ? timeout : 1000 * 60;\n  var call_string = '';\n  // Remove the timeout property if we have one\n  if (options['timeout']) delete options['timeout'];\n  var option_arguments = this.transform_options(options);\n  if (process.platform.toLowerCase().match(/mswin(?!ce)|mingw|bccwin/)) {} else {\n    // Map the extra parameters\n    var ext_args = args.map(function (arg) {\n      return arg == '--' || arg.substr(0, 1) == '|' ? arg : '\"' + shell_escape(arg) + '\"';\n    }).filter(function (arg) {\n      return arg == null || arg == '' ? false : true;\n    });\n    // Join the arguments\n    var final_arguments = option_arguments.concat(ext_args);\n    // Build a call\n    call_string = prefix + Git.git_binary + ' --git-dir=\"' + this.git_directory + '\" ' + command.toString().replace(/_/, '-') + ' ' + final_arguments.join(\" \") + postfix;\n  }\n  // Execute the function\n  execute_git_call(call_string, {\n    encoding: 'utf8',\n    timeout: timeout,\n    killSignal: 'SIGKILL'\n  }, callback);\n};\nvar execute_git_call = function (call_string, options, callback) {\n  // Execute the git command\n  options.maxBuffer = 1024 * 1024;\n  exec(call_string, options, function (error, stdout, stderr) {\n    if (error != null) {\n      var result = error.toString();\n      callback(result != null ? result.trim() : result, null);\n    } else {\n      var result = stdout.toString();\n      callback(null, result != null ? result.trim() : result);\n    }\n  });\n};\nvar file_index = function (git, callback) {\n  // If we have a file index object return it otherwise create a new one\n  if (!git.git_file_index) {\n    new FileIndex(git.git_directory, function (err, _file_index) {\n      git.git_file_index = _file_index;\n      callback(null, _file_index);\n    });\n  } else {\n    callback(null, git.git_file_index);\n  }\n};\n\n// Fetch a revision list\nGit.prototype.rev_list = function (options, reference, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  options = args.length ? args.shift() : {};\n  reference = args.length ? args.shift() : 'master';\n\n  // Remove skip option if it's set to 0\n  if (options['skip'] != null && parseInt(options['skip']) == 0) delete options['skip'];\n  var allowed_options = {\n    \"max_count\": 1,\n    \"since\": 1,\n    \"until\": 1,\n    \"pretty\": 1\n  };\n  var establish_keys = Object.keys(options).filter(function (key) {\n    return allowed_options[key] ? false : true;\n  });\n\n  // If we have commands we don't support call through to native git\n  if (establish_keys.length > 0) {\n    self.call_git('', 'rev_list', '', options, [reference], function (err, result) {\n      callback(err, result);\n    });\n  } else if (Object.keys(options).length == 0) {\n    // Fetch the file index (will create a file index on the first call)\n    file_index(self, function (err, _file_index) {\n      if (err) return callback(err, _file_index);\n      // Parse the revision\n      self.rev_parse({}, reference, 0, function (err, ref) {\n        if (err) return callback(err, ref);\n        // Fetch the commits from the revision passed in\n        _file_index.commits_from(ref, function (err, commits) {\n          if (err) {\n            self.call_git('', 'rev_list', '', options, [reference], function (err, result) {\n              callback(err, result);\n            });\n          } else {\n            callback(null, commits.join(\"\\n\") + \"\\n\");\n          }\n        });\n      });\n    });\n  } else {\n    self.rev_parse({}, reference, 0, function (err, ref) {\n      if (err) return callback(err, ref);\n      if (Array.isArray(ref)) {\n        self.call_git('', 'rev_list', '', options, [reference], function (err, result) {\n          callback(err, result);\n        });\n      } else {\n        try {\n          // Try to execute revision fetch\n          self.repository.rev_list(ref, options, function (err, result) {\n            callback(err, result);\n          });\n        } catch (err) {\n          callback(err, null);\n        }\n      }\n    });\n  }\n};\n\n// Chomp text removing end carriage returns\nvar chomp = function chomp(raw_text) {\n  return raw_text.replace(/(\\n|\\r)+$/, '');\n};\nGit.prototype.rev_parse = function (options, string, level, callback) {\n  if (string != null && string.constructor != String) return callback('only supports single sha reference');\n  var self = this;\n\n  // Allow leaving of level\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n  level = args.length ? args.shift() : 0;\n  if (string.match(/\\.\\./)) {\n    var parts = string.split(\"..\");\n    var sha1 = parts[0],\n      sha2 = parts[1];\n    var value = [this.rev_parse({}, sha1, level + 1, callback), this.rev_parse({}, sha2, level + 1, callback)];\n    if (level == 0) return callback(null, value);\n  }\n\n  // a sha is being passed in, chomp and return\n  if (string.match(/^[0-9a-f]{40}$/)) {\n    var value = chomp(string);\n    if (level == 0) {\n      return callback(null, value);\n    } else {\n      return value;\n    }\n  }\n\n  // Check all the references\n  var head = this.git_directory + \"/refs/heads/\" + string;\n  try {\n    if (level == 0) {\n      return callback(null, chomp(fs.readFileSync(head, 'utf8')));\n    } else {\n      return chomp(fs.readFileSync(head, 'utf8'));\n    }\n  } catch (err) {}\n  var head = this.git_directory + \"/refs/remotes/\" + string;\n  try {\n    if (level == 0) {\n      return callback(null, chomp(fs.readFileSync(head, 'utf8')));\n    } else {\n      return chomp(fs.readFileSync(head, 'utf8'));\n    }\n  } catch (err) {}\n  var head = this.git_directory + \"/refs/tags/\" + string;\n  try {\n    if (level == 0) {\n      return callback(null, chomp(fs.readFileSync(head, 'utf8')));\n    } else {\n      return chomp(fs.readFileSync(head, 'utf8'));\n    }\n  } catch (err) {}\n\n  // Check packed-refs file, too\n  var packref = this.git_directory + \"/packed-refs\";\n  try {\n    // Read the file\n    var parts = data.split(/\\n/);\n    // Locate head\n    for (var i = 0; i < parts.length; i++) {\n      var match_parts = parts[i].match(/^(\\w{40}) refs\\/.+?\\/(.*?)$/);\n      if (match_parts) {\n        ref = match_parts[1];\n        // If we have a match fetch reference and return\n        if (new RegExp(string + '$').test(match_parts[3])) {\n          if (level == 0) {\n            return callback(null, chomp(ref));\n          } else {\n            return chomp(ref);\n          }\n        }\n      }\n    }\n  } catch (err) {}\n\n  // Wait until we got the git call\n  self.call_git('', 'rev-parse', '', options, [string], function (err, result) {\n    callback(null, result ? chomp(result) : result);\n  });\n};\n\n// List tree content\nGit.prototype.ls_tree = function (treeish, paths, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  var callback = args.pop();\n  paths = args.length ? args.shift() : [];\n  paths = paths ? paths : [];\n  options = args.length ? args.shift() : {};\n  try {\n    // Reverse parse the tree sha\n    this.rev_parse({}, treeish, function (err, sha) {\n      if (err) return callback(err, sha);\n      var tree = self.repository.ls_tree(sha, flatten(paths), options['r']);\n      if (tree == '') return callback('no such sha found', null);\n      // Ls_tree\n      callback(null, tree);\n    });\n  } catch (err) {\n    callback(err, null);\n  }\n};\n\n// Cat a file\nGit.prototype.cat_file = function (type, ref, callback) {\n  if (type == \"t\") {\n    this.file_type(ref, callback);\n  } else if (type == \"s\") {\n    this.file_size(ref, callback);\n  } else if (type == \"p\") {\n    callback(null, this.repository.cat_file(ref));\n  }\n};\nGit.prototype.file_size = function (ref, callback) {\n  callback(null, this.repository.cat_file_size(ref));\n};\n\n// Make a directory\n//  dir: is the relative path to the directory to create\n//\n// Return nothing\nGit.prototype.fs_mkdir = function (dir, callback) {\n  var path = this.git_directory + \"/\" + dir;\n  GitFileOperations.fs_mkdir(path, callback);\n};\n\n// Initialize a new git repository (create physical setup)\nGit.prototype.init = function (options, callback) {\n  var self = this;\n  var arguments = Array.prototype.slice(arguments);\n  if (Object.keys(options).length == 0) {\n    Repository.init(this.git_directory, callback);\n  } else {\n    // Execute init with call git and return the object\n    this.call_git('', 'init', '', options, arguments, function (err, result) {\n      if (err) return callback(err, result);\n      callback(null, self);\n    });\n  }\n};\n\n// Clone a directory\nGit.prototype.clone = function (options, original_path, target_path, callback) {};\n\n// Generate diff from the changes between two shas\n// Git.prototype.diff = function(options, sha1, sha2, callback) {\n// }\n//\n// var simple_diff = function(repo, options, sha1, sha2, callback) {\n//\n// }\n//\n// var native_diff = function(repo, options, sha1, sha2, base, paths, callback) {\n//\n// }\n\n// Gotten from\nvar flatten = function (array) {\n  return array.reduce(function (a, b) {\n    return a.concat(b);\n  }, []);\n};\nGit.prototype.diff = function (commit1, commit2, options, callback) {\n  try {\n    var self = this;\n    var args = Array.prototype.slice.call(arguments, 2);\n    // Pop the callback\n    var callback = args.pop();\n    options = args.length ? args.shift() : {};\n\n    // Initialize patch variable\n    var patch = '',\n      commit_obj1 = null,\n      tree1 = null,\n      tree2 = null;\n    // Retrieve the first commit object\n    var commit_obj1 = self.repository.get_object_by_sha1(commit1);\n    var tree1 = commit_obj1.tree;\n    if (commit2) {\n      tree2 = self.repository.get_object_by_sha1(commit2).tree;\n    } else {\n      tree2 = self.repository.get_object_by_sha1(commit_obj1.parent[0]).tree;\n    }\n    var qdiff = self.repository.quick_diff(tree1, tree2).sort();\n    qdiff.forEach(function (diff_arr) {\n      // Set up all the variables\n      var path = diff_arr[0];\n      var status = diff_arr[1];\n      var treeSHA1 = diff_arr[2];\n      var treeSHA2 = diff_arr[3];\n      var format = 'unified';\n      var lines = 3;\n      var output = '';\n      var file_length_difference = 0;\n\n      // Fetch the files\n      var fileA = treeSHA1 ? self.repository.cat_file(treeSHA1) : '';\n      var fileB = treeSHA2 ? self.repository.cat_file(treeSHA2) : '';\n\n      // Get the sha's or set empty shas\n      var sha1 = treeSHA1 || '0000000000000000000000000000000000000000';\n      var sha2 = treeSHA2 || '0000000000000000000000000000000000000000';\n\n      // Split up data\n      var data_old = fileA.trim().split(/\\n/).map(function (e) {\n        return chomp(e);\n      });\n      var data_new = fileB.trim().split(/\\n/).map(function (e) {\n        return chomp(e);\n      });\n      // Javascript split's a file into [''] if it's an empty file\n      if (data_old.length == 1 && data_old[0] == '') data_old = [];\n      if (data_new.length == 1 && data_new[0] == '') data_new = [];\n\n      // Get diffs\n      var diffs = Difference.LCS.diff(data_old, data_new);\n      if (diffs.length > 0) {\n        // Create paths\n        var a_path = \"a/\" + path.replace(/\\.\\//g, '');\n        var b_path = \"b/\" + path.replace(/\\.\\//g, '');\n        // Let's create the header\n        var header = \"diff --git \" + a_path + \" \" + b_path;\n        if (options['full_index']) {\n          header = header + '\\n' + 'index ' + sha1 + '..' + sha2;\n          if (treeSHA2) header = header + \"' 100644\";\n        } else {\n          header = header + '\\n' + 'index ' + sha1.substr(0, 7) + '..' + sha2.substr(0, 7);\n          if (treeSHA2) header = header + ' 100644';\n        }\n        header = header + '\\n--- ' + (treeSHA1 ? a_path : '/dev/null');\n        header = header + '\\n+++ ' + (treeSHA2 ? b_path : '/dev/null');\n        header = header + '\\n';\n\n        // standard hunk\n        var old_hunk = null,\n          hunk = null;\n        // Process all the diff changes\n        diffs.forEach(function (piece) {\n          try {\n            hunk = new Difference.LCS.Hunk(data_old, data_new, piece, lines, file_length_difference);\n            file_length_difference = hunk.file_length_difference;\n            if (old_hunk) {\n              if (lines > 0 && hunk.overlaps(old_hunk)) {\n                hunk.unshift(old_hunk);\n              } else {\n                output = output + old_hunk.diff(format);\n              }\n            }\n          } catch (err) {}\n          old_hunk = hunk;\n          output = output + '\\n';\n        });\n\n        // Prepare next\n        output = output + old_hunk.diff(format);\n        output = output + '\\n';\n        patch = patch + header + output.trimLeft();\n      }\n    });\n\n    // Return the patch\n    callback(null, patch);\n  } catch (err) {\n    callback('tree was bad or lcs is not working', null);\n  }\n};\n\n// Check if a file exists\nGit.prototype.fs_exist = function (path, callback) {\n  GitFileOperations.fs_exist(this.git_directory, path, callback);\n};\n\n// Write a normal file to the filesystem\n//  file: relative path from the Git dir\n//  contents: String content to be written\n//\n// Return nothing\nGit.prototype.fs_write = function (file, content, callback) {\n  GitFileOperations.fs_write(this.git_directory, file, content, callback);\n};\n\n// Log function, returns the number of logs\nGit.prototype.log = function (commit, path, options, callback) {\n  args = ['--raw', '--no-abbrev', '--numstat'];\n  if (path) {\n    args.push('--');\n    args.push(path);\n  }\n  options.color = 'never';\n  this.call_git('', 'log', '', options, args, callback);\n};\n\n// Select the objects that exists\n//  object_ids: array of object sha's\n//\n// Returns array of ids's that exist\nGit.prototype.select_existing_objects = function (object_ids, callback) {\n  var existing_object_ids = [];\n  // Process all the object ids\n  for (var i = 0; i < object_ids.length; i++) {\n    // Check if the object_id exists in the db\n    this.repository.object_exists(object_ids[i], function (err, result) {\n      if (err) return callback(err, result);\n      if (result) existing_object_ids.push(object_ids[i]);\n    });\n  }\n  // Return all the existing objects\n  callback(null, existing_object_ids);\n};\n\n// Format the patch\nGit.prototype.format_patch = function (options, reference, callback) {\n  this.call_git('', 'format_patch', '', options, [reference], function (err, result) {\n    callback(err, result);\n  });\n};\n\n// Fetch the blame\nGit.prototype.blame = function () {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n\n  // Execute blame command\n  this.call_git('', 'blame', '', options, arguments, function (err, result) {\n    callback(err, result);\n  });\n};\nvar clean_paths = function (commits) {\n  var new_commits = {};\n  // Iterate over all the commit hash entries and clean the directory names\n  Object.keys(commits).forEach(function (file) {\n    var sha = commits[file];\n    file = file.substr(file.length - 1, 1) == '/' ? file.substr(0, file.length - 1) : file;\n    new_commits[file] = sha;\n  });\n  // Return all the cleaned commits\n  return new_commits;\n};\n\n// Fetch blame tree\nGit.prototype.blame_tree = function (commit, path, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  var callback = args.pop();\n  path = args.length ? args.shift() : null;\n\n  // Create path\n  path = path != null && path != '' ? [path].join(\"/\").toString() + '/' : path;\n  path = !path || path.constructor != String ? '' : path;\n\n  // Fetch the file_index\n  file_index(this, function (err, file_index_instance) {\n    if (err) return callback(err, file_index_instance);\n    self.rev_parse({}, commit, 0, function (err, rev_parse_output) {\n      if (err) return callback(err, rev_parse_output);\n      self.looking_for(commit, path, function (err, looking_for) {\n        if (err) return callback(err, looking_for);\n        file_index_instance.last_commits(rev_parse_output, looking_for, function (err, commits) {\n          if (err) return callback(err, commits);\n          callback(null, clean_paths(commits));\n        });\n      });\n    });\n  });\n};\n\n// Looking for\nGit.prototype.looking_for = function (commit, path, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  var callback = args.pop();\n  path = args.length ? args.shift() : null;\n  var file = null;\n\n  // Fetch the commit sha\n  self.rev_parse({}, commit, 0, function (err, rev_parse_output) {\n    if (err) return callback(err, rev_parse_output);\n\n    // Fetch the sub tree\n    self.repository.get_subtree(rev_parse_output, path, function (err, tree_sha) {\n      if (err) return callback(err, tree_sha);\n\n      // Contains the files\n      var looking_for = [];\n      // Fetch and return the object by the tree sha\n      var object = self.repository.get_object_by_sha1(tree_sha);\n      // Process all the entries for the object\n      object.entries.forEach(function (entry) {\n        file = path && !(path == '' || path == '.' || path == './') ? path + \"/\" + entry.name : entry.name;\n        // Ensure no double path characters\n        file = file.replace('//', '/');\n        // Add a slash if it's a directory\n        if (entry.type == 'directory') file = file + \"/\";\n        // Add to list of looking_for entries\n        looking_for.push(file);\n      });\n\n      // Return the entries\n      return callback(null, looking_for);\n    });\n  });\n};\n\n// Peform commit\nGit.prototype.commit = function () {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n\n  // Execute blame command\n  this.call_git('', 'commit', '', options, arguments, function (err, result) {\n    callback(err, result);\n  });\n};\n\n// Fetch config\nGit.prototype.config = function () {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'config', '', options, arguments, function (err, result) {\n    callback(err, result);\n  });\n};\n\n// Execute add command\nGit.prototype.add = function () {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'add', '', options, arguments, function (err, result) {\n    callback(err, result);\n  });\n};\n\n// Execute remove command\nGit.prototype.remove = function () {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'rm', '', options, arguments, function (err, result) {\n    callback(err, result);\n  });\n};\n\n// Execute ls-files\nGit.prototype.ls_files = function () {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'ls-files', '', options, arguments, function (err, result) {\n    callback(err, result);\n  });\n};\n\n// Execute diff-files\nGit.prototype.diff_files = function () {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'diff-files', '', options, arguments, function (err, result) {\n    callback(err, result);\n  });\n};\n\n// Execute diff-index\nGit.prototype.diff_index = function () {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'diff-index', '', options, arguments, function (err, result) {\n    callback(err, result);\n  });\n};\nGit.prototype.file_type = function (ref, callback) {\n  return callback(null, this.repository.cat_file_type(ref));\n};\nGit.prototype.put_raw_object = function (content, type, callback) {\n  return this.repository.put_raw_object(content, type, callback);\n};\nGit.prototype.commit_from_sha = function (id) {\n  var repository = new Repository(this.git_directory);\n  var object = repository.get_object_by_sha1(id);\n  if (object.type == \"commit\") {\n    return id;\n  } else if (object.type == \"tag\") {\n    return object.object;\n  } else {\n    return '';\n  }\n};\n\n// // ===================================================================================================\n// //\n// //  Decorates the Class prototype with functions wrapping git native functions (if not defined already)\n// //\n// // ===================================================================================================\n// Git.prototype.call_git('', 'help', '', {}, ['--all'], function(err, result) {\n//   var index = result.indexOf(\"-----------\");\n//   result = result.substr(index);\n//   var lines = result.trim().split(\"\\n\");\n//   // Ship the first line\n//   lines.shift();\n//   // Process all the lines\n//   while(lines.length > 0 && lines[0] != '') {\n//     var line = lines.shift().trim().replace(/ +/g, ' ');\n//     var parts = line.split(\" \");\n//\n//     parts.forEach(function(command) {\n//       var function_name = command.replace(/\\-/g, '_');\n//       // For each entry create a new function if it does not exist on the prototype\n//       if(Git.prototype[function_name] == null) {\n//         Git.prototype[function_name] = function() {\n//           // Unpack parameters as commit might be null\n//           var args = Array.prototype.slice.call(arguments, 0);\n//           callback = args.pop();\n//           var options = args.length ? args.shift() : {};\n//           var arguments = args;\n//           // Execute blame command\n//           this.call_git('', command, '', options, arguments, function(err, result) {\n//             callback(err, result);\n//           });\n//         }\n//       }\n//     });\n//\n//   }\n//\n//   // callback(null, null);\n//   pre_loading_done = true\n//   // var g = new Git(\"..../\")\n// });","map":{"version":3,"names":["util","require","fs","GitFileOperations","exec","FileIndex","Repository","Difference","Git","exports","git_directory","_git_diretory","_git_file_index","_repository","Object","defineProperty","get","set","value","enumerable","process","platform","toLowerCase","match","git_binary","chomp","raw_text","replace","read_file","path","callback","stat","err","readFile","prototype","refs","options","prefix","already","self","stream","glob_streaming","addListener","result","isFile","id","readFileSync","name","push","join","data","parts","split","i","length","fs_read","file","transform_options","args","keys","forEach","key","constructor","Boolean","toString","git","Array","slice","call","arguments","pop","function_name","shift","call_git","shell_escape","str","command","postfix","timeout","call_string","option_arguments","ext_args","map","arg","substr","filter","final_arguments","concat","execute_git_call","encoding","killSignal","maxBuffer","error","stdout","stderr","trim","file_index","git_file_index","_file_index","rev_list","reference","parseInt","allowed_options","establish_keys","rev_parse","ref","commits_from","commits","isArray","repository","string","level","String","sha1","sha2","head","packref","match_parts","RegExp","test","ls_tree","treeish","paths","sha","tree","flatten","cat_file","type","file_type","file_size","cat_file_size","fs_mkdir","dir","init","clone","original_path","target_path","array","reduce","a","b","diff","commit1","commit2","patch","commit_obj1","tree1","tree2","get_object_by_sha1","parent","qdiff","quick_diff","sort","diff_arr","status","treeSHA1","treeSHA2","format","lines","output","file_length_difference","fileA","fileB","data_old","e","data_new","diffs","LCS","a_path","b_path","header","old_hunk","hunk","piece","Hunk","overlaps","unshift","trimLeft","fs_exist","fs_write","content","log","commit","color","select_existing_objects","object_ids","existing_object_ids","object_exists","format_patch","blame","clean_paths","new_commits","blame_tree","file_index_instance","rev_parse_output","looking_for","last_commits","get_subtree","tree_sha","object","entries","entry","config","add","remove","ls_files","diff_files","diff_index","cat_file_type","put_raw_object","commit_from_sha"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/git.js"],"sourcesContent":["var util = require('util'),\n    fs = require('fs'),\n    GitFileOperations = require('./git_file_operations').GitFileOperations,\n    exec = require('child_process').exec,\n    FileIndex = require('./file_index').FileIndex,\n    Repository = require('./repository').Repository,\n    Difference = require('../diff/diff').Difference;\n\nvar Git = exports.Git = function(git_directory) {\n  var _git_diretory = git_directory, _git_file_index;\n  var _repository = new Repository(_git_diretory, {});\n  // Control access to internal variables\n  Object.defineProperty(this, \"git_directory\", { get: function() { return _git_diretory; }, set: function(value) { _git_diretory = value; }, enumerable: true});\n  Object.defineProperty(this, \"git_file_index\", { get: function() { return _git_file_index; }, set: function(value) { _git_file_index = value; }, enumerable: true});\n  Object.defineProperty(this, \"repository\", { get: function() { return _repository; }, set: function(value) { _repository = value; }, enumerable: true});\n}\n\n// Set up the gitbinary\nif(process.platform.toLowerCase().match(/mswin(?!ce)|mingw|bccwin|win32/)) {\n  Git.git_binary = \"git\";\n} else {\n  Git.git_binary = \"/usr/bin/env git\";\n}\n\n// Chomp text removing end carriage returns\nvar chomp = function chomp(raw_text) {\n  return raw_text ? raw_text.replace(/(\\n|\\r)+$/, '') : '';\n}\n\nvar read_file = function(path, callback) {\n  fs.stat(path, function(err, stat) {\n    if(err) return callback(err, null);\n    fs.readFile(path, 'ascii', callback);\n  })\n}\n\n// Retrieve references\nGit.prototype.refs = function(options, prefix, callback) {\n  var refs = [];\n  var already = {};\n  var self = this;\n\n  // Locate all files in underlying directories\n  var stream = GitFileOperations.glob_streaming(this.git_directory + \"/\" + prefix);\n  // Triggers on each entry in the directory\n  stream.addListener(\"data\", function(result) {\n    // If we have a directory check if we have a reference file\n    if(result.stat.isFile()) {\n      // Read the file content\n      try {\n        var id = chomp(fs.readFileSync(result.path, 'ascii'));\n        var name = result.path.replace(self.git_directory + \"/\" + prefix + \"/\", '');\n\n        if(!already[name]) {\n          refs.push(name + \" \" + id);\n          already[name] = true;\n        }\n      } catch(err) {\n        // Seems to be some instances where it's not able to tell that a directory is not a file ?\n      }\n    }\n  });\n\n  // Triggers at the end of the call\n  stream.addListener(\"end\", function(err, result) {\n    fs.stat(self.git_directory + \"/packed-refs\", function(err, stat) {\n      if(err || !stat.isFile()) return callback(null, refs.join(\"\\n\"));\n\n      read_file(self.git_directory + \"/packed-refs\", function(err, data) {\n        var parts = data.split(/\\n/);\n        // Scan all lines\n        for(var i = 0; i < parts.length; i++) {\n          var match = parts[i].match(/^(\\w{40}) (.*?)$/)\n          if(match) {\n            if(match[2].match(\"^\" + prefix)) {\n              var id = chomp(match[1]);\n              var name = match[2].replace(prefix + \"/\", '');\n\n              if(!already[name]) {\n                refs.push(name + \" \" + id);\n                already[name] = true;\n              }\n            }\n          }\n        }\n        // Return all the references\n        callback(null, refs.join(\"\\n\"));\n      });\n    })\n  })\n}\n\n// Read a specific file\nGit.prototype.fs_read = function(file, callback) {\n  GitFileOperations.fs_read(this.git_directory, file, callback);\n}\n\n// // Parse revisions\n// Git.prototype.rev_parse = function(options, string, callback) {\n//  if(string == null || string.constructor != String) return callback(\"invalid string: \" + string);\n//  var self = this;\n//\n//  // Make sure we don't have a directory up ..\n//  if(string.match(/\\.\\./)) {\n//    var shas = string.split(/\\.\\./);\n//    var sha1 = shas[0], sha2 = shas[1];\n//    // Need to rev_parse the two keys and return the data\n//    new Simplifier().execute(new ParallelFlow(\n//       function(callback) { self.rev_parse({}, sha1, callback); },\n//       function(callback) { self.rev_parse({}, sha2, callback); }\n//      ), function(sha1_results, sha2_results) {\n//      // Return the collected files\n//      return callback(null, [sha1_results[1], sha2_results[1]]);\n//    });\n//  }\n//\n//  // If we have a sha being returned nop it\n//  if(string.match(/^[0-9a-f]{40}$/)) {\n//    return callback(null, chomp(string));\n//  }\n//\n//  // Check in heads directory\n//  read_file(self.git_directory + \"/refs/heads/\" + string, function(err, data) {\n//    if(!err) return fs.readFile(self.git_directory + \"/refs/heads/\" + string, function(err, data) { callback(err, chomp(data)); });\n//    // If not in heads then check in remotes\n//    read_file(self.git_directory + \"/refs/remotes/\" + string, function(err, data) {\n//      if(!err) return fs.readFile(self.git_directory + \"/refs/remotes/\" + string, function(err, data) { callback(err, chomp(data)); });\n//      // If not in remotes check in tags\n//      read_file(self.git_directory + \"/refs/tags/\" + string, function(err, data) {\n//        if(!err) return fs.readFile(self.git_directory + \"/refs/tags/\" + string, function(err, data) { callback(err, chomp(data)); });\n//\n//        // Not pin any of the main refs, look in packed packed-refs\n//        read_file(self.git_directory + \"/packed-refs\", function(err, data) {\n//          if(err) return callback(err, data);\n//          // Split the data on new line\n//          var ref = null;\n//          var parts = data.split(/\\n/);\n//          // Locate head\n//          for(var i = 0; i < parts.length; i++) {\n//            var match_parts = parts[i].match(/^(\\w{40}) refs\\/.+?\\/(.*?)$/);\n//            if(match_parts) {\n//              ref = match_parts[1];\n//              // If we have a match fetch reference and return\n//              if(new RegExp(string + '$').test(match_parts[3])) {\n//                break;\n//              }\n//            }\n//          }\n//\n//          // If we have a reference lets terminate\n//          if(ref) return callback(null, ref);\n//\n//          // !! more partials and such !!\n//\n//\n//          // revert to calling git\n//          self.call_git('', 'rev-parse', '', options, string, function(err, result) {\n//            result = result ? chomp(result) : result;\n//            callback(err, result);\n//          })\n//        });\n//      });\n//    });\n//  });\n// }\n\nGit.prototype.transform_options = function(options) {\n  var args = [];\n  var keys = Object.keys(options);\n\n  // Process all entries\n  Object.keys(options).forEach(function(key) {\n    if(key.length == 1) {\n      if(options[key] == true && options[key].constructor == Boolean) { args.push('-' + key);\n      } else if(options[key] == false && options[key].constructor == Boolean) {\n      } else { args.push('-' + key + ' \"' + options[key].toString().replace('\"', \"\\\\\\\"\") + '\"'); }\n    } else {\n      if(options[key] == true && options[key].constructor == Boolean) { args.push(\"--\" + key.toString().replace(/_/, '-'));\n      } else if(options[key] == false && options[key].constructor == Boolean) {\n      } else { args.push('--' + key.toString().replace(/_/, '-') + '=\"' + options[key].toString().replace('\"', \"\\\\\\\"\") + '\"'); }\n    }\n  });\n\n  // Return formated parametes\n  return args;\n}\n\nGit.prototype.git = function() {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  // Unpack the variables\n  var function_name = args.length ? args.shift() : null;\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', function_name, '', options, arguments, function(err, result) {\n    callback(err, result);\n  });\n}\n\nvar shell_escape = function(str) {\n  return str.toString().replace('\"', \"\\\\\\\"\").replace(/\\;/g, \"\\\\;\");\n}\n\n// Call the native git binary\nGit.prototype.call_git = function(prefix, command, postfix, options, args, callback) {\n  // Do we have a timeout\n  var timeout = options['timeout'] ? timeout : 1000 * 60;\n  var call_string = '';\n  // Remove the timeout property if we have one\n  if(options['timeout']) delete options['timeout'];\n  var option_arguments = this.transform_options(options);\n\n  if(process.platform.toLowerCase().match(/mswin(?!ce)|mingw|bccwin/)) {\n  } else {\n    // Map the extra parameters\n    var ext_args = args.map(function(arg) { return (arg == '--' || arg.substr(0, 1) == '|' ? arg : ('\"' + shell_escape(arg) + '\"'))})\n                    .filter(function(arg) { return arg == null || arg == '' ? false : true});\n    // Join the arguments\n    var final_arguments = option_arguments.concat(ext_args);\n    // Build a call\n    call_string = prefix + Git.git_binary + ' --git-dir=\"'+ this.git_directory + '\" ' + command.toString().replace(/_/, '-') + ' ' + final_arguments.join(\" \") + postfix;\n  }\n  // Execute the function\n  execute_git_call(call_string, { encoding: 'utf8', timeout: timeout, killSignal: 'SIGKILL'}, callback);\n}\n\nvar execute_git_call = function(call_string, options, callback) {\n  // Execute the git command\n  options.maxBuffer = 1024 * 1024;\n  exec(call_string, options,\n    function (error, stdout, stderr) {\n      if (error != null) {\n        var result = error.toString();\n        callback(result != null ? result.trim() : result, null);\n      } else {\n        var result = stdout.toString();\n        callback(null, result != null ? result.trim() : result)\n      }\n  });\n}\n\nvar file_index = function(git, callback) {\n  // If we have a file index object return it otherwise create a new one\n  if(!git.git_file_index) {\n    new FileIndex(git.git_directory, function(err, _file_index) {\n      git.git_file_index = _file_index;\n      callback(null, _file_index);\n    });\n  } else {\n    callback(null, git.git_file_index);\n  }\n}\n\n// Fetch a revision list\nGit.prototype.rev_list = function(options, reference, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  options = args.length ? args.shift() : {};\n  reference = args.length ? args.shift() : 'master';\n\n  // Remove skip option if it's set to 0\n  if(options['skip'] != null && parseInt(options['skip']) == 0) delete options['skip'];\n  var allowed_options = {\"max_count\":1, \"since\":1, \"until\":1, \"pretty\":1};\n  var establish_keys = Object.keys(options).filter(function(key) {\n      return allowed_options[key] ? false : true;\n    });\n\n  // If we have commands we don't support call through to native git\n  if(establish_keys.length > 0) {\n    self.call_git('', 'rev_list', '', options, [reference], function(err, result) {\n      callback(err, result);\n    })\n  } else if(Object.keys(options).length == 0){\n    // Fetch the file index (will create a file index on the first call)\n    file_index(self, function(err, _file_index) {\n      if(err) return callback(err, _file_index);\n      // Parse the revision\n      self.rev_parse({}, reference, 0, function(err, ref) {\n        if(err) return callback(err, ref);\n        // Fetch the commits from the revision passed in\n        _file_index.commits_from(ref, function(err, commits) {\n          if(err) {\n            self.call_git('', 'rev_list', '', options, [reference], function(err, result) {\n              callback(err, result);\n            })\n          } else {\n            callback(null, commits.join(\"\\n\") + \"\\n\");\n          }\n        })\n      });\n    })\n  } else {\n    self.rev_parse({}, reference, 0, function(err, ref) {\n      if(err) return callback(err, ref);\n\n      if(Array.isArray(ref)) {\n        self.call_git('', 'rev_list', '', options, [reference], function(err, result) {\n          callback(err, result);\n        })\n      } else {\n        try {\n          // Try to execute revision fetch\n          self.repository.rev_list(ref, options, function(err, result) {\n            callback(err, result);\n          })\n        } catch(err) {\n          callback(err, null);\n        }\n      }\n    });\n  }\n}\n\n// Chomp text removing end carriage returns\nvar chomp = function chomp(raw_text) {\n  return raw_text.replace(/(\\n|\\r)+$/, '');\n}\n\nGit.prototype.rev_parse = function(options, string, level, callback) {\n  if(string != null && string.constructor != String) return callback('only supports single sha reference');\n  var self = this;\n\n  // Allow leaving of level\n  var args = Array.prototype.slice.call(arguments, 2);\n  var callback = args.pop();\n  level = args.length ? args.shift() : 0;\n\n  if(string.match(/\\.\\./)) {\n    var parts = string.split(\"..\");\n    var sha1 = parts[0], sha2 = parts[1];\n    var value = [this.rev_parse({}, sha1, level + 1, callback), this.rev_parse({}, sha2, level + 1, callback)];\n    if(level == 0) return callback(null, value);\n  }\n\n  // a sha is being passed in, chomp and return\n  if(string.match(/^[0-9a-f]{40}$/)) {\n    var value = chomp(string);\n    if(level == 0) {\n      return callback(null, value);\n    } else {\n      return value;\n    }\n  }\n\n  // Check all the references\n  var head = this.git_directory + \"/refs/heads/\" + string;\n  try {\n    if(level == 0) {\n      return callback(null, chomp(fs.readFileSync(head, 'utf8')));\n    } else {\n      return chomp(fs.readFileSync(head, 'utf8'));\n    }\n  } catch(err) {}\n\n  var head = this.git_directory + \"/refs/remotes/\" + string;\n  try {\n    if(level == 0) {\n      return callback(null, chomp(fs.readFileSync(head, 'utf8')));\n    } else {\n      return chomp(fs.readFileSync(head, 'utf8'));\n    }\n  } catch(err) {}\n\n  var head = this.git_directory + \"/refs/tags/\" + string;\n  try {\n    if(level == 0) {\n      return callback(null, chomp(fs.readFileSync(head, 'utf8')));\n    } else {\n      return chomp(fs.readFileSync(head, 'utf8'));\n    }\n  } catch(err) {}\n\n  // Check packed-refs file, too\n  var packref = this.git_directory + \"/packed-refs\";\n  try {\n    // Read the file\n    var parts = data.split(/\\n/);\n    // Locate head\n    for(var i = 0; i < parts.length; i++) {\n     var match_parts = parts[i].match(/^(\\w{40}) refs\\/.+?\\/(.*?)$/);\n     if(match_parts) {\n       ref = match_parts[1];\n       // If we have a match fetch reference and return\n       if(new RegExp(string + '$').test(match_parts[3])) {\n         if(level == 0) {\n           return callback(null, chomp(ref));\n         } else {\n           return chomp(ref);\n         }\n       }\n     }\n    }\n  } catch(err) {}\n\n  // Wait until we got the git call\n  self.call_git('', 'rev-parse', '', options, [string], function(err, result) {\n    callback(null, result ? chomp(result) : result);\n  })\n}\n\n// List tree content\nGit.prototype.ls_tree = function(treeish, paths, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  var callback = args.pop();\n  paths = args.length ? args.shift() : [];\n  paths = paths ? paths : [];\n  options = args.length ? args.shift() : {};\n\n  try {\n    // Reverse parse the tree sha\n    this.rev_parse({}, treeish, function(err, sha) {\n      if(err) return callback(err, sha);\n      var tree = self.repository.ls_tree(sha, flatten(paths), options['r']);\n      if(tree == '') return callback('no such sha found', null);\n      // Ls_tree\n      callback(null, tree);\n    })\n  } catch(err) {\n    callback(err, null);\n  }\n}\n\n// Cat a file\nGit.prototype.cat_file = function(type, ref, callback) {\n  if(type == \"t\") {\n    this.file_type(ref, callback);\n  } else if(type == \"s\") {\n    this.file_size(ref, callback);\n  } else if(type == \"p\") {\n    callback(null, this.repository.cat_file(ref));\n  }\n}\n\nGit.prototype.file_size = function(ref, callback) {\n  callback(null, this.repository.cat_file_size(ref));\n}\n\n// Make a directory\n//  dir: is the relative path to the directory to create\n//\n// Return nothing\nGit.prototype.fs_mkdir = function(dir, callback) {\n  var path = this.git_directory + \"/\" + dir;\n  GitFileOperations.fs_mkdir(path, callback);\n}\n\n// Initialize a new git repository (create physical setup)\nGit.prototype.init = function(options, callback) {\n  var self = this;\n  var arguments = Array.prototype.slice(arguments);\n\n  if(Object.keys(options).length == 0) {\n    Repository.init(this.git_directory, callback);\n  } else {\n    // Execute init with call git and return the object\n    this.call_git('', 'init', '', options, arguments, function(err, result) {\n      if(err) return callback(err, result);\n      callback(null, self);\n    });\n  }\n}\n\n// Clone a directory\nGit.prototype.clone = function(options, original_path, target_path, callback) {\n}\n\n// Generate diff from the changes between two shas\n// Git.prototype.diff = function(options, sha1, sha2, callback) {\n// }\n//\n// var simple_diff = function(repo, options, sha1, sha2, callback) {\n//\n// }\n//\n// var native_diff = function(repo, options, sha1, sha2, base, paths, callback) {\n//\n// }\n\n// Gotten from\nvar flatten = function(array) {\n  return array.reduce(function(a,b) {\n    return a.concat(b);\n  }, []);\n}\n\nGit.prototype.diff = function(commit1, commit2, options, callback) {\n  try {\n    var self = this;\n    var args = Array.prototype.slice.call(arguments, 2);\n    // Pop the callback\n    var callback = args.pop();\n    options = args.length ? args.shift() : {};\n\n    // Initialize patch variable\n    var patch = '', commit_obj1 = null, tree1 = null, tree2 = null;\n    // Retrieve the first commit object\n    var commit_obj1 = self.repository.get_object_by_sha1(commit1);\n    var tree1 = commit_obj1.tree;\n\n    if(commit2) {\n      tree2 = self.repository.get_object_by_sha1(commit2).tree;\n    } else {\n      tree2 = self.repository.get_object_by_sha1(commit_obj1.parent[0]).tree;\n    }\n\n    var qdiff = self.repository.quick_diff(tree1, tree2).sort();\n    qdiff.forEach(function(diff_arr) {\n      // Set up all the variables\n      var path = diff_arr[0];\n      var status = diff_arr[1];\n      var treeSHA1 = diff_arr[2];\n      var treeSHA2 = diff_arr[3];\n      var format = 'unified';\n      var lines = 3;\n      var output = '';\n      var file_length_difference = 0;\n\n      // Fetch the files\n      var fileA = treeSHA1 ? self.repository.cat_file(treeSHA1) : '';\n      var fileB = treeSHA2 ? self.repository.cat_file(treeSHA2) : '';\n\n      // Get the sha's or set empty shas\n      var sha1 = treeSHA1 || '0000000000000000000000000000000000000000';\n      var sha2 = treeSHA2 || '0000000000000000000000000000000000000000';\n\n      // Split up data\n      var data_old = fileA.trim().split(/\\n/).map(function(e) { return chomp(e); });\n      var data_new = fileB.trim().split(/\\n/).map(function(e) { return chomp(e); });\n      // Javascript split's a file into [''] if it's an empty file\n      if(data_old.length == 1 && data_old[0] == '') data_old = [];\n      if(data_new.length == 1 && data_new[0] == '') data_new = [];\n\n      // Get diffs\n      var diffs = Difference.LCS.diff(data_old, data_new);\n      if(diffs.length > 0) {\n        // Create paths\n        var a_path = \"a/\" + path.replace(/\\.\\//g, '');\n        var b_path = \"b/\" + path.replace(/\\.\\//g, '');\n        // Let's create the header\n        var header = \"diff --git \" + a_path + \" \" + b_path;\n        if(options['full_index']) {\n          header = header + '\\n' + 'index ' + sha1 + '..' + sha2;\n          if(treeSHA2) header = header + \"' 100644\";\n        } else {\n          header = header + '\\n' + 'index ' + sha1.substr(0, 7) + '..' + sha2.substr(0, 7);\n          if(treeSHA2) header = header + ' 100644';\n        }\n\n        header = header + '\\n--- ' + (treeSHA1 ? a_path : '/dev/null');\n        header = header + '\\n+++ ' + (treeSHA2 ? b_path : '/dev/null');\n        header = header + '\\n';\n\n        // standard hunk\n        var old_hunk = null, hunk = null;\n        // Process all the diff changes\n        diffs.forEach(function(piece) {\n\n          try {\n            hunk = new Difference.LCS.Hunk(data_old, data_new, piece, lines, file_length_difference);\n            file_length_difference = hunk.file_length_difference;\n\n            if(old_hunk) {\n              if(lines > 0 && hunk.overlaps(old_hunk)) {\n                hunk.unshift(old_hunk);\n              } else {\n                output = output + old_hunk.diff(format);\n              }\n            }\n          } catch(err) {}\n\n          old_hunk = hunk;\n          output = output + '\\n';\n        });\n\n        // Prepare next\n        output = output + old_hunk.diff(format);\n        output = output + '\\n';\n        patch = patch + header + output.trimLeft();\n      }\n    });\n\n    // Return the patch\n    callback(null, patch);\n  } catch(err) {\n    callback('tree was bad or lcs is not working', null);\n  }\n}\n\n// Check if a file exists\nGit.prototype.fs_exist = function(path, callback) {\n  GitFileOperations.fs_exist(this.git_directory, path, callback);\n}\n\n// Write a normal file to the filesystem\n//  file: relative path from the Git dir\n//  contents: String content to be written\n//\n// Return nothing\nGit.prototype.fs_write = function(file, content, callback) {\n  GitFileOperations.fs_write(this.git_directory, file, content, callback);\n}\n\n// Log function, returns the number of logs\nGit.prototype.log = function(commit, path, options, callback) {\n  args = ['--raw', '--no-abbrev', '--numstat'];\n  if (path) {\n    args.push('--');\n    args.push(path);\n  }\n  options.color = 'never';\n  this.call_git('', 'log', '', options, args, callback);\n}\n\n// Select the objects that exists\n//  object_ids: array of object sha's\n//\n// Returns array of ids's that exist\nGit.prototype.select_existing_objects = function(object_ids, callback) {\n  var existing_object_ids = [];\n  // Process all the object ids\n  for(var i = 0; i < object_ids.length; i++) {\n    // Check if the object_id exists in the db\n    this.repository.object_exists(object_ids[i], function(err, result)  {\n      if(err) return callback(err, result);\n      if(result) existing_object_ids.push(object_ids[i]);\n    });\n  }\n  // Return all the existing objects\n  callback(null, existing_object_ids);\n}\n\n// Format the patch\nGit.prototype.format_patch = function(options, reference, callback) {\n  this.call_git('', 'format_patch', '', options, [reference], function(err, result) {\n    callback(err, result);\n  })\n}\n\n// Fetch the blame\nGit.prototype.blame = function() {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n\n  // Execute blame command\n  this.call_git('', 'blame', '', options, arguments, function(err, result) {\n    callback(err, result);\n  });\n}\n\nvar clean_paths = function(commits) {\n  var new_commits = {};\n  // Iterate over all the commit hash entries and clean the directory names\n  Object.keys(commits).forEach(function(file) {\n    var sha = commits[file];\n    file = file.substr(file.length - 1, 1) == '/' ? file.substr(0, file.length - 1) : file;\n    new_commits[file] = sha;\n  })\n  // Return all the cleaned commits\n  return new_commits;\n}\n\n// Fetch blame tree\nGit.prototype.blame_tree = function(commit, path, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  var callback = args.pop();\n  path = args.length ? args.shift() : null;\n\n  // Create path\n  path = path != null && path != '' ? [path].join(\"/\").toString() + '/' : path;\n  path = !path || path.constructor != String ? '' : path;\n\n  // Fetch the file_index\n  file_index(this, function(err, file_index_instance) {\n    if(err) return callback(err, file_index_instance);\n\n    self.rev_parse({}, commit, 0, function(err, rev_parse_output) {\n      if(err) return callback(err, rev_parse_output);\n\n      self.looking_for(commit, path, function(err, looking_for) {\n        if(err) return callback(err, looking_for);\n\n        file_index_instance.last_commits(rev_parse_output, looking_for, function(err, commits) {\n          if(err) return callback(err, commits);\n\n          callback(null, clean_paths(commits));\n        });\n      });\n    });\n  });\n}\n\n// Looking for\nGit.prototype.looking_for = function(commit, path, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  var callback = args.pop();\n  path = args.length ? args.shift() : null;\n  var file = null;\n\n  // Fetch the commit sha\n  self.rev_parse({}, commit, 0, function(err, rev_parse_output) {\n    if(err) return callback(err, rev_parse_output);\n\n    // Fetch the sub tree\n    self.repository.get_subtree(rev_parse_output, path, function(err, tree_sha) {\n      if(err) return callback(err, tree_sha);\n\n      // Contains the files\n      var looking_for = [];\n      // Fetch and return the object by the tree sha\n      var object = self.repository.get_object_by_sha1(tree_sha);\n      // Process all the entries for the object\n      object.entries.forEach(function(entry) {\n        file = path && !(path == '' || path == '.' || path == './') ?  path + \"/\" + entry.name : entry.name;\n        // Ensure no double path characters\n        file = file.replace('//', '/');\n        // Add a slash if it's a directory\n        if(entry.type == 'directory') file = file + \"/\";\n        // Add to list of looking_for entries\n        looking_for.push(file);\n      });\n\n      // Return the entries\n      return callback(null, looking_for);\n    });\n  });\n}\n\n// Peform commit\nGit.prototype.commit = function() {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n\n  // Execute blame command\n  this.call_git('', 'commit', '', options, arguments, function(err, result) {\n    callback(err, result);\n  });\n}\n\n// Fetch config\nGit.prototype.config = function() {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'config', '', options, arguments, function(err, result) {\n    callback(err, result);\n  });\n}\n\n// Execute add command\nGit.prototype.add = function() {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'add', '', options, arguments, function(err, result) {\n    callback(err, result);\n  });\n}\n\n// Execute remove command\nGit.prototype.remove = function() {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'rm', '', options, arguments, function(err, result) {\n    callback(err, result);\n  });\n}\n\n// Execute ls-files\nGit.prototype.ls_files = function() {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'ls-files', '', options, arguments, function(err, result) {\n    callback(err, result);\n  });\n}\n\n// Execute diff-files\nGit.prototype.diff_files = function() {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'diff-files', '', options, arguments, function(err, result) {\n    callback(err, result);\n  });\n}\n\n// Execute diff-index\nGit.prototype.diff_index = function() {\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 0);\n  var callback = args.pop();\n  var options = args.length ? args.shift() : {};\n  var arguments = args;\n  // Execute blame command\n  this.call_git('', 'diff-index', '', options, arguments, function(err, result) {\n    callback(err, result);\n  });\n}\n\nGit.prototype.file_type = function(ref, callback) {\n  return callback(null, this.repository.cat_file_type(ref));\n}\n\nGit.prototype.put_raw_object = function(content, type, callback) {\n  return this.repository.put_raw_object(content, type, callback);\n}\n\nGit.prototype.commit_from_sha = function(id) {\n  var repository = new Repository(this.git_directory);\n  var object = repository.get_object_by_sha1(id);\n\n  if(object.type == \"commit\") {\n    return id;\n  } else if(object.type == \"tag\") {\n    return object.object;\n  } else {\n    return '';\n  }\n}\n\n\n// // ===================================================================================================\n// //\n// //  Decorates the Class prototype with functions wrapping git native functions (if not defined already)\n// //\n// // ===================================================================================================\n// Git.prototype.call_git('', 'help', '', {}, ['--all'], function(err, result) {\n//   var index = result.indexOf(\"-----------\");\n//   result = result.substr(index);\n//   var lines = result.trim().split(\"\\n\");\n//   // Ship the first line\n//   lines.shift();\n//   // Process all the lines\n//   while(lines.length > 0 && lines[0] != '') {\n//     var line = lines.shift().trim().replace(/ +/g, ' ');\n//     var parts = line.split(\" \");\n//\n//     parts.forEach(function(command) {\n//       var function_name = command.replace(/\\-/g, '_');\n//       // For each entry create a new function if it does not exist on the prototype\n//       if(Git.prototype[function_name] == null) {\n//         Git.prototype[function_name] = function() {\n//           // Unpack parameters as commit might be null\n//           var args = Array.prototype.slice.call(arguments, 0);\n//           callback = args.pop();\n//           var options = args.length ? args.shift() : {};\n//           var arguments = args;\n//           // Execute blame command\n//           this.call_git('', command, '', options, arguments, function(err, result) {\n//             callback(err, result);\n//           });\n//         }\n//       }\n//     });\n//\n//   }\n//\n//   // callback(null, null);\n//   pre_loading_done = true\n//   // var g = new Git(\"..../\")\n// });\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}