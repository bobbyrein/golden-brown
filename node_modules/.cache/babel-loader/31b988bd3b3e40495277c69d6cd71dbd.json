{"ast":null,"code":"var mime = require('mime'),\n  Actor = require('./actor').Actor;\nvar Blob = exports.Blob = function (repo, id, mode, name) {\n  var _repo = repo,\n    _id = id,\n    _mode = mode,\n    _name = name,\n    _content = null,\n    _data = null,\n    _size = 0;\n  Object.defineProperty(this, \"repo\", {\n    get: function () {\n      return _repo;\n    },\n    set: function (value) {\n      _repo = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"id\", {\n    get: function () {\n      return _id;\n    },\n    set: function (value) {\n      _id = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"mode\", {\n    get: function () {\n      return _mode;\n    },\n    set: function (value) {\n      _mode = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"name\", {\n    get: function () {\n      return _name;\n    },\n    set: function (value) {\n      _name = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"content\", {\n    get: function () {\n      return _content;\n    },\n    set: function (value) {\n      _content = value;\n    },\n    enumerable: true\n  });\n\n  // Data of the blob\n  Object.defineProperty(this, \"data\", {\n    get: function () {\n      _data = lazy_reader(_repo, _id, 'p', _data);\n      return _data;\n    },\n    enumerable: false\n  });\n\n  // Size of the blob\n  Object.defineProperty(this, \"size\", {\n    get: function () {\n      _size = lazy_reader(_repo, _id, 's', _size);\n      return _size;\n    },\n    enumerable: false\n  });\n\n  // Size of the blob\n  Object.defineProperty(this, \"mime_type\", {\n    get: function () {\n      return mime.lookup(_name || '', 'text/plain');\n    },\n    enumerable: false\n  });\n\n  // Return the base name\n  Object.defineProperty(this, \"basename\", {\n    get: function () {\n      if (_name) {\n        var parts = _name.split(\"/\");\n        return parts[parts.length - 1];\n      } else {\n        return null;\n      }\n    },\n    enumerable: false\n  });\n};\nvar lazy_reader = function (repo, id, type, variable) {\n  if (variable) return variable;\n  // Control the flow\n  var done = false;\n  var value = null;\n\n  // Fetch the content\n  repo.git.cat_file(type, id, function (err, content) {\n    if (err) return done = true;\n    value = content;\n    done = true;\n  });\n  while (!done) {}\n  ;\n  return value;\n};\n\n// The blame information for the given file at the given commit\n//\n// Returns array of commit and array of lines\nBlob.blame = function (repo, commit, file, callback) {\n  var Commit = require('./commit').Commit;\n  repo.git.blame({\n    'p': true\n  }, commit, '--', file, function (err, data) {\n    if (err) return callback(err, data);\n\n    // Variables stored\n    var commits = {};\n    var blames = [];\n    var info = null;\n\n    // Split up and parse the output\n    var lines = data.split(\"\\n\");\n    lines.forEach(function (line) {\n      var parts = line.split(/\\s+/);\n      if (parts.length > 0) {\n        var part = parts[0];\n\n        // Process the part\n        if (part.match(/^[0-9A-Fa-f]{40}$/)) {\n          // Parse references to SHA keys\n          if (line.match(/^([0-9A-Fa-f]{40}) (\\d+) (\\d+) (\\d+)$/)) {\n            var matches = line.match(/^([0-9A-Fa-f]{40}) (\\d+) (\\d+) (\\d+)$/);\n            var id = matches[1];\n            var origin_line = matches[2];\n            var final_line = matches[3];\n            var group_lines = matches[4];\n            // Set if of the current reference\n            info = {\n              id: id\n            };\n            blames.push([null, []]);\n          } else if (line.match(/^([0-9A-Fa-f]{40}) (\\d+) (\\d+)$/)) {\n            var matches = line.match(/^([0-9A-Fa-f]{40}) (\\d+) (\\d+)$/);\n            var id = matches[1];\n            var origin_line = matches[2];\n            var final_line = matches[3];\n            // Set if of the current reference\n            info = {\n              id: id\n            };\n          }\n        } else if (part.match(/^(author|committer)/)) {\n          if (part.match(/^(.+)-mail$/)) {\n            info[part.match(/^(.+)-mail$/)[1] + \"_email\"] = parts[parts.length - 1];\n          } else if (part.match(/^(.+)-time$/)) {\n            info[part.match(/^(.+)-time$/)[1] + \"_date\"] = new Date(parseInt(parts[parts.length - 1]) * 1000);\n          } else if (part.match(/^(author|committer)$/)) {\n            info[part.match(/^(author|committer)$/)[1]] = parts.slice(1).join(\" \");\n          }\n        } else if (part.match(/^filename/)) {\n          info['filename'] = parts[parts.length - 1];\n        } else if (part.match(/^summary/)) {\n          info['summary'] = parts.slice(1).join(\" \").replace('\\n', '');\n        } else if (part == '') {\n          var commit = commits[info[\"id\"]];\n          // Create new commit\n          if (!commit) {\n            // commit = new Commit(repo, )\n            var id = info['id'];\n            var author = Actor.from_string(info['author'] + ' ' + info['author_email']);\n            var authored_date = info['author_date'];\n            var committer = Actor.from_string(info['committer'] + ' ' + info['committer_email']);\n            var committed_date = info['committer_date'];\n            var message = info['summary'];\n            // Create a new commit\n            commit = new Commit(repo, id, null, null, author, authored_date, committer, committed_date, message);\n            commits[info['id']] = commit;\n          }\n\n          // Break up the parts\n          parts = line.match(/^\\t(.*)$/);\n          blames[blames.length - 1][0] = commit;\n          blames[blames.length - 1][1].push(parts[1]);\n          info = null;\n        }\n      }\n    });\n    // Call back with the list of blames\n    callback(null, blames);\n  });\n};","map":{"version":3,"names":["mime","require","Actor","Blob","exports","repo","id","mode","name","_repo","_id","_mode","_name","_content","_data","_size","Object","defineProperty","get","set","value","enumerable","lazy_reader","lookup","parts","split","length","type","variable","done","git","cat_file","err","content","blame","commit","file","callback","Commit","data","commits","blames","info","lines","forEach","line","part","match","matches","origin_line","final_line","group_lines","push","Date","parseInt","slice","join","replace","author","from_string","authored_date","committer","committed_date","message"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/blob.js"],"sourcesContent":["var mime = require('mime'),\n  Actor = require('./actor').Actor;  \n\nvar Blob = exports.Blob = function(repo, id, mode, name) {\n  var _repo = repo, _id = id, _mode = mode, _name = name, _content = null, _data = null, _size = 0;\n  \n  Object.defineProperty(this, \"repo\", { get: function() { return _repo; }, set: function(value) { _repo = value; }, enumerable: true});\n  Object.defineProperty(this, \"id\", { get: function() { return _id; }, set: function(value) { _id = value; }, enumerable: true});\n  Object.defineProperty(this, \"mode\", { get: function() { return _mode; }, set: function(value) { _mode = value; }, enumerable: true});\n  Object.defineProperty(this, \"name\", { get: function() { return _name; }, set: function(value) { _name = value; }, enumerable: true});\n  Object.defineProperty(this, \"content\", { get: function() { return _content; }, set: function(value) { _content = value; }, enumerable: true});\n\n  // Data of the blob\n  Object.defineProperty(this, \"data\", { get: function() { \n      _data = lazy_reader(_repo, _id, 'p', _data); \n      return _data;\n    }, enumerable: false});\n\n  // Size of the blob\n  Object.defineProperty(this, \"size\", { get: function() { \n      _size = lazy_reader(_repo, _id, 's', _size); \n      return _size;\n    }, enumerable: false});\n\n  // Size of the blob\n  Object.defineProperty(this, \"mime_type\", { get: function() {\n      return mime.lookup(_name || '', 'text/plain')\n    }, enumerable: false});\n  \n  // Return the base name\n  Object.defineProperty(this, \"basename\", { get: function() { \n      if(_name) {\n        var parts = _name.split(\"/\");\n        return parts[parts.length - 1];\n      } else {\n        return null;\n      }\n    }, enumerable: false});\n}\n\nvar lazy_reader = function(repo, id, type, variable) {\n  if(variable) return variable;\n  // Control the flow\n  var done = false;\n  var value = null;\n  \n  // Fetch the content\n  repo.git.cat_file(type, id, function(err, content) {\n    if(err) return done = true;\n    value = content;\n    done = true;\n  })\n  \n  while(!done) {};\n  return value;  \n}\n\n// The blame information for the given file at the given commit\n//\n// Returns array of commit and array of lines\nBlob.blame = function(repo, commit, file, callback) {\n  var Commit = require('./commit').Commit;\n  \n  repo.git.blame({'p':true}, commit, '--', file, function(err, data) {\n    if(err) return callback(err, data);\n    \n    // Variables stored\n    var commits = {};\n    var blames = [];\n    var info = null;\n    \n    // Split up and parse the output\n    var lines = data.split(\"\\n\");\n    lines.forEach(function(line) {\n      var parts = line.split(/\\s+/);\n      if(parts.length > 0) {\n        var part = parts[0];\n\n        // Process the part\n        if(part.match(/^[0-9A-Fa-f]{40}$/)) {\n          // Parse references to SHA keys\n          if(line.match(/^([0-9A-Fa-f]{40}) (\\d+) (\\d+) (\\d+)$/)) {\n            var matches = line.match(/^([0-9A-Fa-f]{40}) (\\d+) (\\d+) (\\d+)$/);\n            var id = matches[1];\n            var origin_line = matches[2];\n            var final_line = matches[3];\n            var group_lines = matches[4];\n            // Set if of the current reference\n            info = {id:id};\n            blames.push([null, []]);\n          } else if(line.match(/^([0-9A-Fa-f]{40}) (\\d+) (\\d+)$/)) {\n            var matches = line.match(/^([0-9A-Fa-f]{40}) (\\d+) (\\d+)$/);\n            var id = matches[1];\n            var origin_line = matches[2];\n            var final_line = matches[3];            \n            // Set if of the current reference\n            info = {id:id};\n          }          \n        } else if(part.match(/^(author|committer)/)) {\n          if(part.match(/^(.+)-mail$/)) {\n            info[part.match(/^(.+)-mail$/)[1] + \"_email\"] = parts[parts.length - 1];\n          } else if(part.match(/^(.+)-time$/)) {            \n            info[part.match(/^(.+)-time$/)[1] + \"_date\"] = new Date(parseInt(parts[parts.length - 1]) * 1000);\n          } else if(part.match(/^(author|committer)$/)) {\n            info[part.match(/^(author|committer)$/)[1]] = parts.slice(1).join(\" \");\n          }          \n        } else if(part.match(/^filename/)) {\n          info['filename'] = parts[parts.length - 1];\n        } else if(part.match(/^summary/)) {          \n          info['summary'] = parts.slice(1).join(\" \").replace('\\n', '');\n        } else if(part == '') {\n          var commit = commits[info[\"id\"]];\n          // Create new commit\n          if(!commit) {\n            // commit = new Commit(repo, )\n            var id = info['id'];\n            var author = Actor.from_string(info['author'] + ' ' + info['author_email']);\n            var authored_date = info['author_date'];\n            var committer = Actor.from_string(info['committer'] + ' ' + info['committer_email']);\n            var committed_date = info['committer_date'];\n            var message = info['summary'];            \n            // Create a new commit\n            commit = new Commit(repo, id, null, null, author, authored_date, committer, committed_date, message);\n            commits[info['id']] = commit;\n          }\n          \n          // Break up the parts\n          parts = line.match(/^\\t(.*)$/);\n          blames[blames.length - 1][0] = commit;\n          blames[blames.length - 1][1].push(parts[1]);\n          info = null;\n        }\n      }\n    });    \n    // Call back with the list of blames\n    callback(null, blames);\n  });\n}\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}