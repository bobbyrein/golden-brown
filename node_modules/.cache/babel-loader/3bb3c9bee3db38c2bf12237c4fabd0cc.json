{"ast":null,"code":"// A block is an operation removing, adding, or changing a group of items.\n// Basically, this is just a list of changes, where each change adds or\n// deletes a single item. Used by bin/ldiff.\nvar Block = exports.Block = function (chunk) {\n  this.changes = [];\n  this.insert = [];\n  this.remove = [];\n  var self = this;\n  chunk.forEach(function (item) {\n    self.changes.push(item);\n    if (item.is_deleting()) self.remove.push(item);\n    if (item.is_adding()) self.insert.push(item);\n  });\n  Object.defineProperty(this, \"diff_size\", {\n    get: function () {\n      return self.insert.length - self.remove.length;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"op\", {\n    get: function () {\n      var result = [self.remove.length == 0, self.insert.length == 0];\n      if (!result[0] && !result[1]) {\n        return \"!\";\n      } else if (!result[0] && result[1]) {\n        return \"-\";\n      } else if (result[0] && result[1]) {\n        return \"+\";\n      } else {\n        return \"^\";\n      }\n    },\n    enumerable: true\n  });\n};\nBlock.prototype.op = function () {};","map":{"version":3,"names":["Block","exports","chunk","changes","insert","remove","self","forEach","item","push","is_deleting","is_adding","Object","defineProperty","get","length","enumerable","result","prototype","op"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/diff/block.js"],"sourcesContent":["// A block is an operation removing, adding, or changing a group of items.\n// Basically, this is just a list of changes, where each change adds or\n// deletes a single item. Used by bin/ldiff.\nvar Block = exports.Block = function(chunk) {\n  this.changes = [];\n  this.insert = [];\n  this.remove = [];\n  var self = this;\n  \n  chunk.forEach(function(item) {\n    self.changes.push(item);\n    if(item.is_deleting()) self.remove.push(item);\n    if(item.is_adding()) self.insert.push(item);\n  })  \n  \n  Object.defineProperty(this, \"diff_size\", { get: function() { return self.insert.length - self.remove.length; }, enumerable: true});      \n  Object.defineProperty(this, \"op\", { get: function() { \n    var result = [self.remove.length == 0, self.insert.length == 0];\n\n    if(!result[0] && !result[1]) {\n      return \"!\";\n    } else if(!result[0] && result[1]) {\n      return \"-\";\n    } else if(result[0] && result[1]) {\n      return \"+\";\n    } else {\n      return \"^\";\n    }\n  }, enumerable: true});      \n}\n\nBlock.prototype.op = function() {\n}"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,KAAK,GAAGC,OAAO,CAACD,KAAK,GAAG,UAASE,KAAK,EAAE;EAC1C,IAAI,CAACC,OAAO,GAAG,EAAE;EACjB,IAAI,CAACC,MAAM,GAAG,EAAE;EAChB,IAAI,CAACC,MAAM,GAAG,EAAE;EAChB,IAAIC,IAAI,GAAG,IAAI;EAEfJ,KAAK,CAACK,OAAO,CAAC,UAASC,IAAI,EAAE;IAC3BF,IAAI,CAACH,OAAO,CAACM,IAAI,CAACD,IAAI,CAAC;IACvB,IAAGA,IAAI,CAACE,WAAW,EAAE,EAAEJ,IAAI,CAACD,MAAM,CAACI,IAAI,CAACD,IAAI,CAAC;IAC7C,IAAGA,IAAI,CAACG,SAAS,EAAE,EAAEL,IAAI,CAACF,MAAM,CAACK,IAAI,CAACD,IAAI,CAAC;EAC7C,CAAC,CAAC;EAEFI,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;IAAEC,GAAG,EAAE,YAAW;MAAE,OAAOR,IAAI,CAACF,MAAM,CAACW,MAAM,GAAGT,IAAI,CAACD,MAAM,CAACU,MAAM;IAAE,CAAC;IAAEC,UAAU,EAAE;EAAI,CAAC,CAAC;EAClIJ,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,IAAI,EAAE;IAAEC,GAAG,EAAE,YAAW;MAClD,IAAIG,MAAM,GAAG,CAACX,IAAI,CAACD,MAAM,CAACU,MAAM,IAAI,CAAC,EAAET,IAAI,CAACF,MAAM,CAACW,MAAM,IAAI,CAAC,CAAC;MAE/D,IAAG,CAACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAACA,MAAM,CAAC,CAAC,CAAC,EAAE;QAC3B,OAAO,GAAG;MACZ,CAAC,MAAM,IAAG,CAACA,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,EAAE;QACjC,OAAO,GAAG;MACZ,CAAC,MAAM,IAAGA,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,EAAE;QAChC,OAAO,GAAG;MACZ,CAAC,MAAM;QACL,OAAO,GAAG;MACZ;IACF,CAAC;IAAED,UAAU,EAAE;EAAI,CAAC,CAAC;AACvB,CAAC;AAEDhB,KAAK,CAACkB,SAAS,CAACC,EAAE,GAAG,YAAW,CAChC,CAAC"},"metadata":{},"sourceType":"script"}