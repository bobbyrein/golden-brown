{"ast":null,"code":"var crypto = require('crypto'),\n  util = require('util'),\n  Buffer = require('buffer').Buffer,\n  BinaryParser = require('./binary_parser').BinaryParser;\nvar RawObject = exports.RawObject = function (type, content) {\n  var _type = type,\n    _content = content;\n  Object.defineProperty(this, \"type\", {\n    get: function () {\n      return _type;\n    },\n    set: function (value) {\n      _type = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"content\", {\n    get: function () {\n      return _content;\n    },\n    set: function (value) {\n      _content = value;\n    },\n    enumerable: true\n  });\n};\nRawObject.prototype.sha1 = function (encoding) {\n  type = type ? type : 'binary';\n  // Create the basis for the digest\n  var digest_content = this.type + \" \" + this.content.length + BinaryParser.fromByte(0) + this.content;\n  // Use node crypto library to create sha1 hash\n  var hash = crypto.createHash(\"sha1\");\n  hash.update(digest_content);\n  // Return the hash digest\n  return hash.digest('binary');\n};\nRawObject.prototype.sha1_hex = function () {\n  this.sha1('hex');\n};","map":{"version":3,"names":["crypto","require","util","Buffer","BinaryParser","RawObject","exports","type","content","_type","_content","Object","defineProperty","get","set","value","enumerable","prototype","sha1","encoding","digest_content","length","fromByte","hash","createHash","update","digest","sha1_hex"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/raw_object.js"],"sourcesContent":["var crypto = require('crypto'),\n  util = require('util'),\n  Buffer = require('buffer').Buffer,\n  BinaryParser = require('./binary_parser').BinaryParser;\n\nvar RawObject = exports.RawObject = function(type, content) {\n  var _type = type, _content = content;\n  \n  Object.defineProperty(this, \"type\", { get: function() { return _type; }, set: function(value) { _type = value; }, enumerable: true});    \n  Object.defineProperty(this, \"content\", { get: function() { return _content; }, set: function(value) { _content = value; }, enumerable: true});      \n}\n\nRawObject.prototype.sha1 = function(encoding) {\n  type = type ? type : 'binary';  \n  // Create the basis for the digest\n  var digest_content = this.type + \" \" + this.content.length + BinaryParser.fromByte(0) + this.content;\n  // Use node crypto library to create sha1 hash\n  var hash = crypto.createHash(\"sha1\");\n  hash.update(digest_content);\n  // Return the hash digest\n  return hash.digest('binary');\n}\n\nRawObject.prototype.sha1_hex = function() {\n  this.sha1('hex');\n}"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;EAC5BC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;EACtBE,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC,CAACE,MAAM;EACjCC,YAAY,GAAGH,OAAO,CAAC,iBAAiB,CAAC,CAACG,YAAY;AAExD,IAAIC,SAAS,GAAGC,OAAO,CAACD,SAAS,GAAG,UAASE,IAAI,EAAEC,OAAO,EAAE;EAC1D,IAAIC,KAAK,GAAGF,IAAI;IAAEG,QAAQ,GAAGF,OAAO;EAEpCG,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;IAAEC,GAAG,EAAE,YAAW;MAAE,OAAOJ,KAAK;IAAE,CAAC;IAAEK,GAAG,EAAE,UAASC,KAAK,EAAE;MAAEN,KAAK,GAAGM,KAAK;IAAE,CAAC;IAAEC,UAAU,EAAE;EAAI,CAAC,CAAC;EACpIL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;IAAEC,GAAG,EAAE,YAAW;MAAE,OAAOH,QAAQ;IAAE,CAAC;IAAEI,GAAG,EAAE,UAASC,KAAK,EAAE;MAAEL,QAAQ,GAAGK,KAAK;IAAE,CAAC;IAAEC,UAAU,EAAE;EAAI,CAAC,CAAC;AAC/I,CAAC;AAEDX,SAAS,CAACY,SAAS,CAACC,IAAI,GAAG,UAASC,QAAQ,EAAE;EAC5CZ,IAAI,GAAGA,IAAI,GAAGA,IAAI,GAAG,QAAQ;EAC7B;EACA,IAAIa,cAAc,GAAG,IAAI,CAACb,IAAI,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,CAACa,MAAM,GAAGjB,YAAY,CAACkB,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAACd,OAAO;EACpG;EACA,IAAIe,IAAI,GAAGvB,MAAM,CAACwB,UAAU,CAAC,MAAM,CAAC;EACpCD,IAAI,CAACE,MAAM,CAACL,cAAc,CAAC;EAC3B;EACA,OAAOG,IAAI,CAACG,MAAM,CAAC,QAAQ,CAAC;AAC9B,CAAC;AAEDrB,SAAS,CAACY,SAAS,CAACU,QAAQ,GAAG,YAAW;EACxC,IAAI,CAACT,IAAI,CAAC,KAAK,CAAC;AAClB,CAAC"},"metadata":{},"sourceType":"script"}