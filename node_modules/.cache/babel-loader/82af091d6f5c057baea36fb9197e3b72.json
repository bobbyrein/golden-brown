{"ast":null,"code":"var Blob = require('./blob').Blob;\nvar Diff = exports.Diff = function (repo, a_path, b_path, a_blob, b_blob, a_mode, b_mode, new_file, deleted_file, diff) {\n  var _repo = repo,\n    _a_path = a_path,\n    _b_path = b_path;\n  var _a_mode = a_mode,\n    _b_mode = b_mode,\n    _diff = diff;\n  // Create blob objects\n  var _a_blob = !a_blob || a_blob.match(/^0{40}$/) ? null : new Blob(repo, a_blob);\n  var _b_blob = !b_blob || b_blob.match(/^0{40}$/) ? null : new Blob(repo, b_blob);\n  // Chec if we have a new_file/deleted_file\n  var _new_file = new_file || _a_blob == null;\n  var _deleted_file = deleted_file || _b_blob == null;\n  Object.defineProperty(this, \"repo\", {\n    get: function () {\n      return _repo;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"a_path\", {\n    get: function () {\n      return _a_path;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"b_path\", {\n    get: function () {\n      return _b_path;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"a_mode\", {\n    get: function () {\n      return _a_mode;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"b_mode\", {\n    get: function () {\n      return _b_mode;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"diff\", {\n    get: function () {\n      return _diff;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"a_blob\", {\n    get: function () {\n      return _a_blob;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"b_blob\", {\n    get: function () {\n      return _b_blob;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"new_file\", {\n    get: function () {\n      return _new_file;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"deleted_file\", {\n    get: function () {\n      return _deleted_file;\n    },\n    enumerable: true\n  });\n};\n\n// Create a list of diffs from a diff text\nDiff.list_from_string = function (repo, text, callback) {\n  // Ensure we don't have white space at the end\n  text = text.trim();\n  // Split the text into lines\n  var lines = text.split(\"\\n\");\n  var diffs = [];\n  var a_path,\n    b_path,\n    a_mode,\n    b_mode,\n    new_file = false,\n    deleted_file = false;\n  var a_blob, b_blob;\n  while (text.length > 0 && lines.length > 0) {\n    // Extract a line\n    var parts = lines.shift().match(/^diff --git a\\/(.+?) b\\/(.+)$/);\n    // Unpack parts\n    var a_path = parts[1];\n    var b_path = parts[2];\n    if (lines[0].match(/^old mode/)) {\n      a_mode = lines.shift().match(/^old mode (\\d+)/)[1];\n      b_mode = lines.shift().match(/^new mode (\\d+)/)[1];\n    }\n    if (lines.length == 0 || lines[0].match(/^diff --git/)) {\n      diffs.push(new Diff(repo, a_path, b_path, null, null, a_mode, b_mode, false, false, null));\n    } else {\n      if (lines[0].match(/^new file/)) {\n        b_mode = lines.shift().match(/^new file mode (.+)$/)[1];\n        a_mode = null;\n        new_file = true;\n      } else if (lines[0].match(/^deleted file/)) {\n        a_mode = lines.shift().match(/^deleted file mode (.+)$/)[1];\n        b_mode = null;\n        deleted_file = true;\n      }\n      // Unpack index reference\n      parts = lines.shift().match(/^index ([0-9A-Fa-f]+)\\.\\.([0-9A-Fa-f]+) ?(.+)?$/);\n      a_blob = parts[1];\n      b_blob = parts[2];\n      b_mode = parts[3];\n\n      // Contains all the diff lines\n      var diff_lines = [];\n      // Fetch all the diff lines\n      while (lines.length > 0 && !lines[0].match(/^diff/)) {\n        diff_lines.push(lines.shift());\n      }\n\n      // Join the difflines\n      var diff = diff_lines.join(\"\\n\");\n      // Add the diff to the list\n      diffs.push(new Diff(repo, a_path, b_path, a_blob, b_blob, a_mode, b_mode, new_file, deleted_file, diff));\n    }\n  }\n\n  // Return the list of diffs\n  callback(null, diffs);\n};","map":{"version":3,"names":["Blob","require","Diff","exports","repo","a_path","b_path","a_blob","b_blob","a_mode","b_mode","new_file","deleted_file","diff","_repo","_a_path","_b_path","_a_mode","_b_mode","_diff","_a_blob","match","_b_blob","_new_file","_deleted_file","Object","defineProperty","get","enumerable","list_from_string","text","callback","trim","lines","split","diffs","length","parts","shift","push","diff_lines","join"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/diff.js"],"sourcesContent":["var Blob = require('./blob').Blob;\n\nvar Diff = exports.Diff = function(repo, a_path, b_path, a_blob, b_blob, a_mode, b_mode, new_file, deleted_file, diff) {\n  var _repo = repo, _a_path = a_path, _b_path = b_path\n  var _a_mode = a_mode, _b_mode = b_mode, _diff = diff;\n  // Create blob objects\n  var _a_blob = !a_blob || a_blob.match(/^0{40}$/) ? null : new Blob(repo, a_blob);\n  var _b_blob = !b_blob || b_blob.match(/^0{40}$/) ? null : new Blob(repo, b_blob);\n  // Chec if we have a new_file/deleted_file\n  var _new_file = new_file || _a_blob == null;\n  var _deleted_file = deleted_file || _b_blob == null;\n\n  Object.defineProperty(this, \"repo\", { get: function() { return _repo; }, enumerable: true});\n  Object.defineProperty(this, \"a_path\", { get: function() { return _a_path; }, enumerable: true});\n  Object.defineProperty(this, \"b_path\", { get: function() { return _b_path; }, enumerable: true});\n  Object.defineProperty(this, \"a_mode\", { get: function() { return _a_mode; }, enumerable: true});\n  Object.defineProperty(this, \"b_mode\", { get: function() { return _b_mode; }, enumerable: true});\n  Object.defineProperty(this, \"diff\", { get: function() { return _diff; }, enumerable: true});\n  Object.defineProperty(this, \"a_blob\", { get: function() { return _a_blob; }, enumerable: true});\n  Object.defineProperty(this, \"b_blob\", { get: function() { return _b_blob; }, enumerable: true});\n  Object.defineProperty(this, \"new_file\", { get: function() { return _new_file; }, enumerable: true});\n  Object.defineProperty(this, \"deleted_file\", { get: function() { return _deleted_file; }, enumerable: true});\n}\n\n// Create a list of diffs from a diff text\nDiff.list_from_string = function(repo, text, callback) {\n  // Ensure we don't have white space at the end\n  text = text.trim();\n  // Split the text into lines\n  var lines = text.split(\"\\n\");\n  var diffs = [];\n  var a_path, b_path, a_mode, b_mode, new_file = false, deleted_file = false;\n  var a_blob, b_blob;\n\n  while(text.length > 0 && lines.length > 0) {\n    // Extract a line\n    var parts = lines.shift().match(/^diff --git a\\/(.+?) b\\/(.+)$/);\n    // Unpack parts\n    var a_path = parts[1];\n    var b_path = parts[2];\n\n    if(lines[0].match(/^old mode/)) {\n      a_mode = lines.shift().match(/^old mode (\\d+)/)[1]\n      b_mode = lines.shift().match(/^new mode (\\d+)/)[1]\n    }\n\n    if(lines.length == 0 || lines[0].match(/^diff --git/)) {\n      diffs.push(new Diff(repo, a_path, b_path, null, null, a_mode, b_mode, false, false, null));\n    } else {\n      if(lines[0].match(/^new file/)) {\n        b_mode = lines.shift().match(/^new file mode (.+)$/)[1];\n        a_mode = null;\n        new_file = true;\n      } else if(lines[0].match(/^deleted file/)) {\n        a_mode = lines.shift().match(/^deleted file mode (.+)$/)[1];\n        b_mode = null;\n        deleted_file = true;\n      }\n      // Unpack index reference\n      parts = lines.shift().match(/^index ([0-9A-Fa-f]+)\\.\\.([0-9A-Fa-f]+) ?(.+)?$/);\n      a_blob = parts[1];\n      b_blob = parts[2];\n      b_mode = parts[3];\n\n      // Contains all the diff lines\n      var diff_lines = [];\n      // Fetch all the diff lines\n      while(lines.length > 0 && !lines[0].match(/^diff/)) {\n        diff_lines.push(lines.shift());\n      }\n\n      // Join the difflines\n      var diff = diff_lines.join(\"\\n\");\n      // Add the diff to the list\n      diffs.push(new Diff(repo, a_path, b_path, a_blob, b_blob, a_mode, b_mode, new_file, deleted_file, diff));\n    }\n  }\n\n  // Return the list of diffs\n  callback(null, diffs);\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}