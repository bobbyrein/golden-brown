{"ast":null,"code":"var util = require('util'),\n  Tree = require('./tree').Tree,\n  Config = require('./config').Config;\nvar GitIndex = exports.GitIndex = function (repo) {\n  var _repo = repo,\n    _tree = {},\n    _current_tree = null;\n  Object.defineProperty(this, \"tree\", {\n    get: function () {\n      return _tree;\n    },\n    set: function (value) {\n      _tree = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"current_tree\", {\n    get: function () {\n      return _current_tree;\n    },\n    set: function (value) {\n      _current_tree = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"repo\", {\n    get: function () {\n      return _repo;\n    },\n    set: function (value) {\n      _repo = value;\n    },\n    enumerable: true\n  });\n};\n\n// Sets the current tree\n//  +tree+ the branch/tag/sha... to use - a string\n// \n// Returns index (self)\nGitIndex.prototype.read_tree = function (tree, callback) {\n  var self = this;\n  // Load the tree\n  this.repo.tree(tree, function (err, loaded_tree) {\n    if (err) return callback(err, loaded_tree);\n    self.current_tree = loaded_tree;\n    callback(null, loaded_tree);\n  });\n};\n\n// Add a file to the index\n//   +path+ is the path (including filename)\n//   +data+ is the binary contents of the file\n//\n// Returns nothing\nGitIndex.prototype.add = function (file_path, data) {\n  var path = file_path.split('/');\n  var filename = path.pop();\n  var current = this.tree;\n  path.forEach(function (dir) {\n    current[dir] = current[dir] || {};\n    var node = current[dir];\n    current = node;\n  });\n  current[filename] = data;\n};\n\n// Commit the contents of the index\n//   +message+ is the commit message [nil]\n//   +parents+ is one or more commits to attach this commit to to form a new head [nil]\n//   +actor+ is the details of the user making the commit [nil]\n//   +last_tree+ is a tree to compare with - to avoid making empty commits [nil]\n//   +head+ is the branch to write this head to [master]\n//\n// Returns a String of the SHA1 of the commit\nGitIndex.prototype.commit = function (message, parents, actor, last_tree, head, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  // Set variables to default values\n  parents = args.length ? args.shift() : null;\n  actor = args.length ? args.shift() : null;\n  last_tree = args.length ? args.shift() : null;\n  head = args.length ? args.shift() : 'master';\n  this.write_tree(this.tree, this.current_tree, function (err, tree_sha1) {\n    if (tree_sha1 == last_tree) return callback(null, false); // Don't write identical commits\n    var contents = [];\n    // Add tree to contents\n    contents.push(['tree', tree_sha1].join(' '));\n    // Add all parents if they exist\n    if (parents) {\n      parents.forEach(function (p) {\n        if (p) contents.push(['parent', p].join(' '));\n      });\n    }\n\n    // Define name and email\n    var name = null,\n      email = null;\n    if (actor) {\n      name = actor.name;\n      email = actor.email;\n    } else {\n      config = new Config(self.repo);\n      name = config['user.name'];\n      email = config['user.email'];\n    }\n    var author_string = \"\" + name + \" <\" + email + \"> \" + parseInt(new Date().getTime() / 1000) + \" -0700\"; // TODO must fix\n    contents.push(['author', author_string].join(' '));\n    contents.push(['committer', author_string].join(' '));\n    contents.push('');\n    contents.push(message);\n    // Write commit and update reference tree\n    self.repo.git.put_raw_object(contents.join(\"\\n\"), 'commit', function (commit_sha1) {\n      self.repo.update_ref(head, commit_sha1, callback);\n    });\n  });\n};\nvar to_bin = function (sha1o) {\n  var sha1 = '';\n  for (var i = 0; i < sha1o.length; i = i + 2) {\n    sha1 = sha1 + String.fromCharCode(parseInt(sha1o.substr(i, 2), 16));\n  }\n  return sha1;\n};\n\n// Recursively write a tree to the index\n//   +tree+ is the tree\n//\n// Returns the SHA1 String of the tree\nGitIndex.prototype.write_tree = function (tree, now_tree, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  // Set variables to default values\n  now_tree = args.length ? args.shift() : null;\n\n  // Holds the tree content\n  var tree_contents = {};\n\n  // Fill in the original tree\n  if (now_tree) {\n    now_tree.contents.forEach(function (obj) {\n      var sha = to_bin(obj.id);\n      var k = obj.name;\n      if (obj instanceof Tree) k = k + '/';\n      tree_contents[k] = \"\" + obj.mode.toString() + \" \" + obj.name + \"\\0\" + sha;\n    });\n  }\n\n  // overwrite with the new tree contents\n  Object.keys(tree).forEach(function (key) {\n    var value = tree[key];\n    if (value.constructor == String) {\n      var sha = self.write_blob(value);\n      sha = to_bin(sha);\n      tree_contents[key] = \"\" + '100644' + \" \" + key + '\\0' + sha;\n    } else if (Object.prototype.toString.call(value) === '[object Object]') {\n      var ctree = now_tree ? now_tree.find(key) : null;\n      // Write the next level\n      self.write_tree(value, ctree, function (err, sha) {\n        var sha = to_bin(sha);\n        tree_contents[key + '/'] = \"\" + '040000' + \" \" + key + '\\0' + sha;\n      });\n    }\n  });\n  var tr = Object.keys(tree_contents).sort().map(function (key) {\n    return tree_contents[key];\n  }).join('');\n\n  // Return the object sha\n  this.repo.git.put_raw_object(tr, 'tree', function (sha1) {\n    callback(null, sha1);\n  });\n};\n\n// Write the blob to the index\n//   +data+ is the data to write\n//\n// Returns the SHA1 String of the blob\nGitIndex.prototype.write_blob = function (data) {\n  return this.repo.git.put_raw_object(data, 'blob');\n};","map":{"version":3,"names":["util","require","Tree","Config","GitIndex","exports","repo","_repo","_tree","_current_tree","Object","defineProperty","get","set","value","enumerable","prototype","read_tree","tree","callback","self","err","loaded_tree","current_tree","add","file_path","data","path","split","filename","pop","current","forEach","dir","node","commit","message","parents","actor","last_tree","head","args","Array","slice","call","arguments","length","shift","write_tree","tree_sha1","contents","push","join","p","name","email","config","author_string","parseInt","Date","getTime","git","put_raw_object","commit_sha1","update_ref","to_bin","sha1o","sha1","i","String","fromCharCode","substr","now_tree","tree_contents","obj","sha","id","k","mode","toString","keys","key","constructor","write_blob","ctree","find","tr","sort","map"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/git_index.js"],"sourcesContent":["var util = require('util'),\n  Tree = require('./tree').Tree,\n  Config = require('./config').Config;\n\nvar GitIndex = exports.GitIndex = function(repo) {  \n  var _repo = repo, _tree = {}, _current_tree = null;\n  \n  Object.defineProperty(this, \"tree\", { get: function() { return _tree; }, set: function(value) { _tree = value; }, enumerable: true});    \n  Object.defineProperty(this, \"current_tree\", { get: function() { return _current_tree; }, set: function(value) { _current_tree = value; }, enumerable: true});    \n  Object.defineProperty(this, \"repo\", { get: function() { return _repo; }, set: function(value) { _repo = value; }, enumerable: true});  \n}\n\n// Sets the current tree\n//  +tree+ the branch/tag/sha... to use - a string\n// \n// Returns index (self)\nGitIndex.prototype.read_tree = function(tree, callback) {\n  var self = this;\n  // Load the tree\n  this.repo.tree(tree, function(err, loaded_tree) {\n    if(err) return callback(err, loaded_tree);\n    self.current_tree = loaded_tree;\n    callback(null, loaded_tree);\n  })\n}\n\n// Add a file to the index\n//   +path+ is the path (including filename)\n//   +data+ is the binary contents of the file\n//\n// Returns nothing\nGitIndex.prototype.add = function(file_path, data) {\n  var path = file_path.split('/');\n  var filename = path.pop();  \n  var current = this.tree;\n  \n  path.forEach(function(dir) {\n    current[dir] = current[dir] || {};\n    var node = current[dir];\n    current = node;\n  });\n    \n  current[filename] = data;\n}\n\n// Commit the contents of the index\n//   +message+ is the commit message [nil]\n//   +parents+ is one or more commits to attach this commit to to form a new head [nil]\n//   +actor+ is the details of the user making the commit [nil]\n//   +last_tree+ is a tree to compare with - to avoid making empty commits [nil]\n//   +head+ is the branch to write this head to [master]\n//\n// Returns a String of the SHA1 of the commit\nGitIndex.prototype.commit = function(message, parents, actor, last_tree, head, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  // Set variables to default values\n  parents = args.length ? args.shift() : null;  \n  actor = args.length ? args.shift() : null;  \n  last_tree = args.length ? args.shift() : null;  \n  head = args.length ? args.shift() : 'master'; \n  \n  this.write_tree(this.tree, this.current_tree, function(err, tree_sha1) {\n    if(tree_sha1 == last_tree) return callback(null, false);  // Don't write identical commits\n    var contents = [];\n    // Add tree to contents\n    contents.push(['tree', tree_sha1].join(' '));\n    // Add all parents if they exist\n    if(parents) {\n      parents.forEach(function(p) {\n        if(p) contents.push(['parent', p].join(' '));\n      });\n    }\n    \n    // Define name and email\n    var name = null, email = null;\n    \n    if(actor) {\n      name = actor.name;\n      email = actor.email;\n    } else {\n      config = new Config(self.repo);\n      name = config['user.name'];\n      email = config['user.email'];      \n    }\n    \n    var author_string = \"\" + name + \" <\" + email + \"> \" + parseInt(new Date().getTime()/1000) + \" -0700\";  // TODO must fix\n    contents.push(['author', author_string].join(' '));\n    contents.push(['committer', author_string].join(' '));\n    contents.push('');\n    contents.push(message);\n    // Write commit and update reference tree\n    self.repo.git.put_raw_object(contents.join(\"\\n\"), 'commit', function (commit_sha1) {\n      self.repo.update_ref(head, commit_sha1, callback);\n    });\n  });\n}\n\nvar to_bin = function(sha1o) {\n  var sha1 = '';\n  for(var i = 0; i < sha1o.length; i = i + 2) {\n    sha1 = sha1 + String.fromCharCode(parseInt(sha1o.substr(i, 2), 16));\n  }  \n  return sha1;\n}\n\n// Recursively write a tree to the index\n//   +tree+ is the tree\n//\n// Returns the SHA1 String of the tree\nGitIndex.prototype.write_tree = function(tree, now_tree, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  // Set variables to default values\n  now_tree = args.length ? args.shift() : null;  \n  \n  // Holds the tree content\n  var tree_contents = {};\n  \n  // Fill in the original tree\n  if(now_tree) {\n    now_tree.contents.forEach(function(obj) {\n      var sha = to_bin(obj.id);\n      var k = obj.name;\n      \n      if(obj instanceof Tree) k = k + '/';\n      tree_contents[k] = \"\" + obj.mode.toString() + \" \" + obj.name + \"\\0\" + sha;\n    });\n  }\n  \n  // overwrite with the new tree contents\n  Object.keys(tree).forEach(function(key) {\n    var value = tree[key];\n    \n    if(value.constructor == String) {\n      var sha = self.write_blob(value);      \n      sha = to_bin(sha);\n      tree_contents[key] = \"\" + '100644' + \" \" + key + '\\0' + sha;\n    } else if(Object.prototype.toString.call(value) === '[object Object]') {      \n      var ctree = now_tree ? (now_tree.find(key)) : null;\n      // Write the next level\n      self.write_tree(value, ctree, function(err, sha) {\n        var sha = to_bin(sha);\n        tree_contents[key + '/'] = \"\" + '040000' + \" \" + key + '\\0' + sha;        \n      });      \n    }\n  })\n  \n  var tr = Object.keys(tree_contents).sort().map(function(key) {\n    return tree_contents[key];\n  }).join('');\n  \n  // Return the object sha\n  this.repo.git.put_raw_object(tr, 'tree', function (sha1) {\n    callback(null, sha1);\n  })\n}\n\n// Write the blob to the index\n//   +data+ is the data to write\n//\n// Returns the SHA1 String of the blob\nGitIndex.prototype.write_blob = function(data) {  \n  return this.repo.git.put_raw_object(data, 'blob');\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;EACxBC,IAAI,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAACC,IAAI;EAC7BC,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC,CAACE,MAAM;AAErC,IAAIC,QAAQ,GAAGC,OAAO,CAACD,QAAQ,GAAG,UAASE,IAAI,EAAE;EAC/C,IAAIC,KAAK,GAAGD,IAAI;IAAEE,KAAK,GAAG,CAAC,CAAC;IAAEC,aAAa,GAAG,IAAI;EAElDC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;IAAEC,GAAG,EAAE,YAAW;MAAE,OAAOJ,KAAK;IAAE,CAAC;IAAEK,GAAG,EAAE,UAASC,KAAK,EAAE;MAAEN,KAAK,GAAGM,KAAK;IAAE,CAAC;IAAEC,UAAU,EAAE;EAAI,CAAC,CAAC;EACpIL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;IAAEC,GAAG,EAAE,YAAW;MAAE,OAAOH,aAAa;IAAE,CAAC;IAAEI,GAAG,EAAE,UAASC,KAAK,EAAE;MAAEL,aAAa,GAAGK,KAAK;IAAE,CAAC;IAAEC,UAAU,EAAE;EAAI,CAAC,CAAC;EAC5JL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;IAAEC,GAAG,EAAE,YAAW;MAAE,OAAOL,KAAK;IAAE,CAAC;IAAEM,GAAG,EAAE,UAASC,KAAK,EAAE;MAAEP,KAAK,GAAGO,KAAK;IAAE,CAAC;IAAEC,UAAU,EAAE;EAAI,CAAC,CAAC;AACtI,CAAC;;AAED;AACA;AACA;AACA;AACAX,QAAQ,CAACY,SAAS,CAACC,SAAS,GAAG,UAASC,IAAI,EAAEC,QAAQ,EAAE;EACtD,IAAIC,IAAI,GAAG,IAAI;EACf;EACA,IAAI,CAACd,IAAI,CAACY,IAAI,CAACA,IAAI,EAAE,UAASG,GAAG,EAAEC,WAAW,EAAE;IAC9C,IAAGD,GAAG,EAAE,OAAOF,QAAQ,CAACE,GAAG,EAAEC,WAAW,CAAC;IACzCF,IAAI,CAACG,YAAY,GAAGD,WAAW;IAC/BH,QAAQ,CAAC,IAAI,EAAEG,WAAW,CAAC;EAC7B,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAlB,QAAQ,CAACY,SAAS,CAACQ,GAAG,GAAG,UAASC,SAAS,EAAEC,IAAI,EAAE;EACjD,IAAIC,IAAI,GAAGF,SAAS,CAACG,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAIC,QAAQ,GAAGF,IAAI,CAACG,GAAG,EAAE;EACzB,IAAIC,OAAO,GAAG,IAAI,CAACb,IAAI;EAEvBS,IAAI,CAACK,OAAO,CAAC,UAASC,GAAG,EAAE;IACzBF,OAAO,CAACE,GAAG,CAAC,GAAGF,OAAO,CAACE,GAAG,CAAC,IAAI,CAAC,CAAC;IACjC,IAAIC,IAAI,GAAGH,OAAO,CAACE,GAAG,CAAC;IACvBF,OAAO,GAAGG,IAAI;EAChB,CAAC,CAAC;EAEFH,OAAO,CAACF,QAAQ,CAAC,GAAGH,IAAI;AAC1B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtB,QAAQ,CAACY,SAAS,CAACmB,MAAM,GAAG,UAASC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,SAAS,EAAEC,IAAI,EAAErB,QAAQ,EAAE;EACvF,IAAIC,IAAI,GAAG,IAAI;EACf,IAAIqB,IAAI,GAAGC,KAAK,CAAC1B,SAAS,CAAC2B,KAAK,CAACC,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;EACnD1B,QAAQ,GAAGsB,IAAI,CAACX,GAAG,EAAE;EACrB;EACAO,OAAO,GAAGI,IAAI,CAACK,MAAM,GAAGL,IAAI,CAACM,KAAK,EAAE,GAAG,IAAI;EAC3CT,KAAK,GAAGG,IAAI,CAACK,MAAM,GAAGL,IAAI,CAACM,KAAK,EAAE,GAAG,IAAI;EACzCR,SAAS,GAAGE,IAAI,CAACK,MAAM,GAAGL,IAAI,CAACM,KAAK,EAAE,GAAG,IAAI;EAC7CP,IAAI,GAAGC,IAAI,CAACK,MAAM,GAAGL,IAAI,CAACM,KAAK,EAAE,GAAG,QAAQ;EAE5C,IAAI,CAACC,UAAU,CAAC,IAAI,CAAC9B,IAAI,EAAE,IAAI,CAACK,YAAY,EAAE,UAASF,GAAG,EAAE4B,SAAS,EAAE;IACrE,IAAGA,SAAS,IAAIV,SAAS,EAAE,OAAOpB,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAE;IAC1D,IAAI+B,QAAQ,GAAG,EAAE;IACjB;IACAA,QAAQ,CAACC,IAAI,CAAC,CAAC,MAAM,EAAEF,SAAS,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC,CAAC;IAC5C;IACA,IAAGf,OAAO,EAAE;MACVA,OAAO,CAACL,OAAO,CAAC,UAASqB,CAAC,EAAE;QAC1B,IAAGA,CAAC,EAAEH,QAAQ,CAACC,IAAI,CAAC,CAAC,QAAQ,EAAEE,CAAC,CAAC,CAACD,IAAI,CAAC,GAAG,CAAC,CAAC;MAC9C,CAAC,CAAC;IACJ;;IAEA;IACA,IAAIE,IAAI,GAAG,IAAI;MAAEC,KAAK,GAAG,IAAI;IAE7B,IAAGjB,KAAK,EAAE;MACRgB,IAAI,GAAGhB,KAAK,CAACgB,IAAI;MACjBC,KAAK,GAAGjB,KAAK,CAACiB,KAAK;IACrB,CAAC,MAAM;MACLC,MAAM,GAAG,IAAIrD,MAAM,CAACiB,IAAI,CAACd,IAAI,CAAC;MAC9BgD,IAAI,GAAGE,MAAM,CAAC,WAAW,CAAC;MAC1BD,KAAK,GAAGC,MAAM,CAAC,YAAY,CAAC;IAC9B;IAEA,IAAIC,aAAa,GAAG,EAAE,GAAGH,IAAI,GAAG,IAAI,GAAGC,KAAK,GAAG,IAAI,GAAGG,QAAQ,CAAC,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,GAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAE;IACvGV,QAAQ,CAACC,IAAI,CAAC,CAAC,QAAQ,EAAEM,aAAa,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC,CAAC;IAClDF,QAAQ,CAACC,IAAI,CAAC,CAAC,WAAW,EAAEM,aAAa,CAAC,CAACL,IAAI,CAAC,GAAG,CAAC,CAAC;IACrDF,QAAQ,CAACC,IAAI,CAAC,EAAE,CAAC;IACjBD,QAAQ,CAACC,IAAI,CAACf,OAAO,CAAC;IACtB;IACAhB,IAAI,CAACd,IAAI,CAACuD,GAAG,CAACC,cAAc,CAACZ,QAAQ,CAACE,IAAI,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,UAAUW,WAAW,EAAE;MACjF3C,IAAI,CAACd,IAAI,CAAC0D,UAAU,CAACxB,IAAI,EAAEuB,WAAW,EAAE5C,QAAQ,CAAC;IACnD,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC;AAED,IAAI8C,MAAM,GAAG,UAASC,KAAK,EAAE;EAC3B,IAAIC,IAAI,GAAG,EAAE;EACb,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACpB,MAAM,EAAEsB,CAAC,GAAGA,CAAC,GAAG,CAAC,EAAE;IAC1CD,IAAI,GAAGA,IAAI,GAAGE,MAAM,CAACC,YAAY,CAACZ,QAAQ,CAACQ,KAAK,CAACK,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;EACrE;EACA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA/D,QAAQ,CAACY,SAAS,CAACgC,UAAU,GAAG,UAAS9B,IAAI,EAAEsD,QAAQ,EAAErD,QAAQ,EAAE;EACjE,IAAIC,IAAI,GAAG,IAAI;EACf,IAAIqB,IAAI,GAAGC,KAAK,CAAC1B,SAAS,CAAC2B,KAAK,CAACC,IAAI,CAACC,SAAS,EAAE,CAAC,CAAC;EACnD1B,QAAQ,GAAGsB,IAAI,CAACX,GAAG,EAAE;EACrB;EACA0C,QAAQ,GAAG/B,IAAI,CAACK,MAAM,GAAGL,IAAI,CAACM,KAAK,EAAE,GAAG,IAAI;;EAE5C;EACA,IAAI0B,aAAa,GAAG,CAAC,CAAC;;EAEtB;EACA,IAAGD,QAAQ,EAAE;IACXA,QAAQ,CAACtB,QAAQ,CAAClB,OAAO,CAAC,UAAS0C,GAAG,EAAE;MACtC,IAAIC,GAAG,GAAGV,MAAM,CAACS,GAAG,CAACE,EAAE,CAAC;MACxB,IAAIC,CAAC,GAAGH,GAAG,CAACpB,IAAI;MAEhB,IAAGoB,GAAG,YAAYxE,IAAI,EAAE2E,CAAC,GAAGA,CAAC,GAAG,GAAG;MACnCJ,aAAa,CAACI,CAAC,CAAC,GAAG,EAAE,GAAGH,GAAG,CAACI,IAAI,CAACC,QAAQ,EAAE,GAAG,GAAG,GAAGL,GAAG,CAACpB,IAAI,GAAG,IAAI,GAAGqB,GAAG;IAC3E,CAAC,CAAC;EACJ;;EAEA;EACAjE,MAAM,CAACsE,IAAI,CAAC9D,IAAI,CAAC,CAACc,OAAO,CAAC,UAASiD,GAAG,EAAE;IACtC,IAAInE,KAAK,GAAGI,IAAI,CAAC+D,GAAG,CAAC;IAErB,IAAGnE,KAAK,CAACoE,WAAW,IAAIb,MAAM,EAAE;MAC9B,IAAIM,GAAG,GAAGvD,IAAI,CAAC+D,UAAU,CAACrE,KAAK,CAAC;MAChC6D,GAAG,GAAGV,MAAM,CAACU,GAAG,CAAC;MACjBF,aAAa,CAACQ,GAAG,CAAC,GAAG,EAAE,GAAG,QAAQ,GAAG,GAAG,GAAGA,GAAG,GAAG,IAAI,GAAGN,GAAG;IAC7D,CAAC,MAAM,IAAGjE,MAAM,CAACM,SAAS,CAAC+D,QAAQ,CAACnC,IAAI,CAAC9B,KAAK,CAAC,KAAK,iBAAiB,EAAE;MACrE,IAAIsE,KAAK,GAAGZ,QAAQ,GAAIA,QAAQ,CAACa,IAAI,CAACJ,GAAG,CAAC,GAAI,IAAI;MAClD;MACA7D,IAAI,CAAC4B,UAAU,CAAClC,KAAK,EAAEsE,KAAK,EAAE,UAAS/D,GAAG,EAAEsD,GAAG,EAAE;QAC/C,IAAIA,GAAG,GAAGV,MAAM,CAACU,GAAG,CAAC;QACrBF,aAAa,CAACQ,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,QAAQ,GAAG,GAAG,GAAGA,GAAG,GAAG,IAAI,GAAGN,GAAG;MACnE,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;EAEF,IAAIW,EAAE,GAAG5E,MAAM,CAACsE,IAAI,CAACP,aAAa,CAAC,CAACc,IAAI,EAAE,CAACC,GAAG,CAAC,UAASP,GAAG,EAAE;IAC3D,OAAOR,aAAa,CAACQ,GAAG,CAAC;EAC3B,CAAC,CAAC,CAAC7B,IAAI,CAAC,EAAE,CAAC;;EAEX;EACA,IAAI,CAAC9C,IAAI,CAACuD,GAAG,CAACC,cAAc,CAACwB,EAAE,EAAE,MAAM,EAAE,UAAUnB,IAAI,EAAE;IACvDhD,QAAQ,CAAC,IAAI,EAAEgD,IAAI,CAAC;EACtB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA/D,QAAQ,CAACY,SAAS,CAACmE,UAAU,GAAG,UAASzD,IAAI,EAAE;EAC7C,OAAO,IAAI,CAACpB,IAAI,CAACuD,GAAG,CAACC,cAAc,CAACpC,IAAI,EAAE,MAAM,CAAC;AACnD,CAAC"},"metadata":{},"sourceType":"script"}