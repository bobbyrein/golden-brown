{"ast":null,"code":"var util = require('util'),\n  GitObject = require('./git_object').GitObject,\n  fs = require('fs'),\n  LooseStorage = require('./loose_storage').LooseStorage,\n  PackStorage = require('./pack_storage').PackStorage,\n  BinaryParser = require('./binary_parser').BinaryParser;\nRepository = exports.Repository = function (git_directory, options) {\n  var _git_directory = git_directory;\n  var _options = options ? options : {};\n  var _packs = [];\n  var _loose = null;\n  var _already_searched = {};\n  var self = this;\n  Object.defineProperty(this, \"git_directory\", {\n    get: function () {\n      return _git_directory;\n    },\n    set: function (value) {\n      _git_directory = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"options\", {\n    get: function () {\n      return _options;\n    },\n    set: function (value) {\n      _options = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"already_searched\", {\n    get: function () {\n      return _already_searched;\n    },\n    set: function (value) {\n      _already_searched = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"packs\", {\n    get: function () {\n      return _packs;\n    },\n    set: function (value) {\n      _packs = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"loose\", {\n    get: function () {\n      return _loose;\n    },\n    set: function (value) {\n      _loose = value;\n    },\n    enumerable: true\n  });\n};\n\n// Chomp text removing end carriage returns\nvar chomp = function chomp(raw_text) {\n  return raw_text.replace(/(\\n|\\r)+$/, '');\n};\nvar truncate_array = function (array, sha) {};\n\n// takes the following options:\n//  :since - Time object specifying that you don't want commits BEFORE this\n//  :until - Time object specifying that you don't want commit AFTER this\n//  :first_parent - tells log to only walk first parent\n//  :path_limiter - string or array of strings to limit path\n//  :max_count - number to limit the output\nRepository.prototype.log = function (sha, options, callback) {\n  this.already_searched = {};\n  return walk_log(this, sha, options);\n};\nvar close = function (repo) {\n  if (repo.packs) {\n    repo.packs.forEach(function (pack) {\n      pack.close();\n    });\n  }\n};\nvar git_path = function (repo, path) {\n  return repo.git_directory + \"/\" + path;\n};\nvar initloose = function (repo) {\n  repo.loaded = [];\n  repo.loose = [];\n  load_loose(repo, git_path(repo, 'objects'));\n  load_alternate_loose(repo, git_path(repo, 'objects'));\n  return repo.loose;\n};\nvar load_loose = function (repo, path) {\n  repo.loaded.push(path);\n  try {\n    fs.statSync(path);\n    repo.loose.push(new LooseStorage(path));\n  } catch (err) {\n    return;\n  }\n};\nvar load_alternate_loose = function (repo, path) {\n  // load alternate loose too\n  var alt = path + '/info/alternates';\n  try {\n    fs.statSync(alt);\n    // Read and process all entries in the directory\n    var lines = fs.readFileSync(alt, 'utf8').split('\\n');\n    lines.length > 0 && lines[lines.length - 1] == '' ? lines.pop() : null;\n    // Iterate over alternate loose storage locations\n    lines.forEach(function (line) {\n      // Only load the path once\n      if (repo.loaded.indexOf(chomp(line)) == -1) {\n        if (line.substr(0, 2) == \"..\") {\n          line = fs.realpathSync(repo.git_directory + \"/\" + line);\n        }\n        load_loose(repo, chomp(line));\n        load_alternate_loose(repo, chomp(line));\n      }\n    });\n  } catch (err) {}\n};\nvar initpacks = function (repo) {\n  close(repo);\n  repo.loaded_packs = [];\n  repo.packs = [];\n  load_packs(repo, git_path(repo, \"objects/pack\"));\n  load_alternate_packs(repo, git_path(repo, \"objects\"));\n  return repo.packs;\n};\nvar load_packs = function (repo, path) {\n  repo.loaded_packs.push(path);\n  try {\n    fs.statSync(path);\n    // Read and process all entries in the directory\n    fs.readdirSync(path).forEach(function (entry) {\n      // If we have a pack file create a new storage object\n      if (entry.match(/\\.pack$/i)) {\n        var pack = new PackStorage(path + \"/\" + entry);\n        // If we have specified the map for the pack then load the entire object map\n        if (repo.options[\"map_packfile\"]) {\n          pack.cache_objects();\n        }\n        // Add pack to list of packs in the repo\n        repo.packs.push(pack);\n      }\n    });\n  } catch (err) {}\n};\nvar load_alternate_packs = function (repo, path) {\n  var alt = path + \"/info/alternates\";\n  try {\n    fs.statSync(alt);\n    // Read and process all entries in the directory\n    var lines = fs.readFileSync(alt, 'utf8').split('\\n');\n    lines.length > 0 && lines[lines.length - 1] == '' ? lines.pop() : null;\n    lines.forEach(function (line) {\n      if (line.substr(0, 2) == \"..\") {\n        line = fs.realpathSync(repo.git_directory + \"/\" + line);\n      }\n\n      // Get pack file name\n      var full_pack = chomp(line) + \"/pack\";\n      if (repo.loaded_packs.indexOf(full_pack) == -1) {\n        load_packs(repo, full_pack);\n        load_alternate_packs(repo, chomp(line));\n      }\n    });\n  } catch (err) {}\n};\nvar get_raw_object_by_sha1 = function (repo, sha1o) {\n  if (!sha1o || sha1o == \"\" || sha1o.constructor != String) throw \"no such sha found\";\n  var sha1 = '';\n  for (var i = 0; i < sha1o.length; i = i + 2) {\n    sha1 = sha1 + String.fromCharCode(parseInt(sha1o.substr(i, 2), 16));\n  }\n  // Init packs if we have none set yet\n  if (!repo.packs) initpacks(repo);\n  // Try packs\n  var packs = repo.packs;\n  for (var i = 0; i < packs.length; i++) {\n    var o = packs[i].find(sha1);\n    if (o != null) return o;\n  }\n  if (!repo.loose) initloose(repo);\n  // Try loose storage\n  var looses = repo.loose;\n  for (var i = 0; i < looses.length; i++) {\n    var o = looses[i].find(sha1);\n    if (o) return o;\n  }\n\n  // try packs again maybe the object got packed in the meantime\n  initpacks(repo);\n  // Try packs\n  var packs = repo.packs;\n  for (var i = 0; i < packs.length; i++) {\n    var o = packs[i].find(sha1);\n    if (o != null) return o;\n  }\n\n  // No results throw an error that no sha pack object was found\n  throw \"no such sha found\";\n};\nRepository.prototype.get_object_by_sha1 = function (sha1) {\n  var r = get_raw_object_by_sha1(this, sha1);\n  if (!r) return null;\n  return GitObject.from_raw(r, this);\n};\n\n// returns true if the files in the path_limiter were changed or no path limiter\n// used by the log() function when passed with a path_limiter\nRepository.prototype.files_changed = function (tree_sha1, tree_sha2, path_limiter) {\n  if (path_limiter == null) return true;\n  // We got a path limiter, let's perform the diff to check for changes\n  var mod = this.quick_diff(tree_sha1, tree_sha2);\n  var files = mod.map(function (c) {\n    return c[0];\n  });\n  path_limiter = Array.isArray(path_limiter) ? path_limiter : path_limiter != null ? [path_limiter] : [];\n  for (var i = 0; i < path_limiter.length; i++) {\n    if (files.indexOf(path_limiter[i]) != -1) return true;\n  }\n  return false;\n};\n\n// Returns the raw file contents of this sha\nRepository.prototype.cat_file = function (sha) {\n  return this.get_object_by_sha1(sha).raw_content;\n};\n\n// Returns the file size (as an int) of this sha\nRepository.prototype.cat_file_size = function (sha) {\n  return get_raw_object_by_sha1(this, sha).content.length;\n};\n\n// Returns the file type as string of this sha\nRepository.prototype.cat_file_type = function (sha) {\n  return get_raw_object_by_sha1(this, sha).type;\n};\n\n// returns the raw (cat-file) output for a tree\n// if given a commit sha, it will print the tree of that commit\n// if given a path limiter array, it will limit the output to those\n// if asked for recursive trees, will traverse trees\nRepository.prototype.ls_tree = function (sha, paths, recursive) {\n  var self = this;\n  paths = paths ? paths : [];\n  recursive = recursive ? recursive : false;\n  try {\n    if (paths.length > 0) {\n      // pathing\n      var part = [];\n      paths.forEach(function (path) {\n        part = part.concat(self.ls_tree_path(sha, path));\n      });\n      // Return the parts\n      return part.join(\"\\n\");\n    } else {\n      return this.get_raw_tree(sha, recursive);\n    }\n  } catch (err) {\n    return '';\n  }\n};\nRepository.prototype.get_raw_tree = function (sha, recursive) {\n  var self = this;\n  recursive = recursive ? recursive : false;\n  var tree = null;\n  var o = get_raw_object_by_sha1(this, sha);\n  if (o.type == 'commit') {\n    tree = this.get_object_by_sha1(sha).tree;\n  } else if (o.type == 'tag') {\n    var commit_sha = this.get_object_by_sha1(sha).object;\n    tree = this.get_object_by_sha1(commit_sha).tree;\n  } else if (o.type == 'tree') {\n    tree = sha;\n  } else {\n    return null;\n  }\n\n  // If recursive execute next level of trees otherwise return the raw file\n  return recursive ? this.get_raw_trees(tree) : this.cat_file(tree);\n};\n\n// Grabs tree contents recursively,\n//  e.g. `git ls-tree -r sha`\nRepository.prototype.get_raw_trees = function (sha, path) {\n  var self = this;\n  path = path ? path : '';\n  var out = '';\n  this.cat_file(sha).split('\\n').forEach(function (line) {\n    var parts = line.split(/\\s/);\n    var mode = parts[0],\n      type = parts[1],\n      sha = parts[2],\n      name = parts[3];\n    if (type == 'tree') {\n      var full_name = path.length == 0 ? name : path + '/' + name;\n      out = out + self.get_raw_trees(sha, full_name);\n    } else if (path.length == 0) {\n      out = out + line + '\\n';\n    } else {\n      out = out + line.replace(new RegExp(name, 'g'), path + '/' + name) + '\\n';\n    }\n  });\n  // Return the out\n  return out;\n};\n\n// return array of tree entries\n// TODO : refactor this to remove the fugly\nRepository.prototype.ls_tree_path = function (sha, path, append) {\n  var self = this;\n  var tree = this.get_raw_tree(sha);\n  if (path.match(/\\//)) {\n    var paths = path.split('/');\n    paths.length > 0 && paths[paths.length - 1] == '' ? paths.pop() : null;\n    var last = path.substr(path.length - 1, 1);\n    if (last == '/' && paths.length == 1) {\n      var append = append ? append + \"/\" + paths[0] : paths[0];\n      var dir_name = tree.split('\\n').filter(function (p) {\n        return p.split('\\t')[1] == paths[0];\n      })[0];\n      if (dir_name == null) throw \"no such path\";\n      var next_sha = dir_name.split(/ |\\t/)[2];\n      var tree = self.get_raw_tree(next_sha);\n      tree = tree.split('\\n');\n      if (append) {\n        var mod_tree = [];\n        tree.forEach(function (ent) {\n          var parts = ent.split('\\t');\n          var info = parts[0],\n            fpath = parts[1];\n          mod_tree.push([info, append + \"/\" + fpath].join('\\t'));\n        });\n        return mod_tree;\n      } else {\n        return tree;\n      }\n    } else {\n      if (tree == null) throw \"no such path\";\n      var next_path = paths.shift();\n      var dir_name = tree.split('\\n').filter(function (p) {\n        return p.split('\\t')[1] == next_path;\n      })[0];\n      if (dir_name == null) throw \"no such path\";\n      var next_sha = dir_name.split(/ |\\t/)[2];\n      next_path = append ? append + \"/\" + next_path : next_path;\n      if (last == '/') {\n        return self.ls_tree_path(next_sha, paths.join('/') + '/', next_path);\n      } else {\n        return self.ls_tree_path(next_sha, paths.join('/'), next_path);\n      }\n    }\n  } else {\n    if (tree == null) throw \"no such path\";\n    var tree = tree.split('\\n');\n    tree = tree.filter(function (p) {\n      return p.split('\\t')[1] == path;\n    });\n    if (append) {\n      var mod_tree = [];\n      tree.forEach(function (ent) {\n        var parts = ent.split('\\t');\n        var info = parts[0],\n          fpath = parts[1];\n        mod_tree.push([info, append + '/' + fpath].join('\\t'));\n      });\n      return mod_tree;\n    } else {\n      return tree;\n    }\n  }\n};\n\n// takes 2 tree shas and recursively walks them to find out what\n// files or directories have been modified in them and returns on\n// array of changes\n//  [ [full_path, 'added', tree1_hash, nil],\n//   [full_path, 'removed', nil, tree2_hash],\n//   [full_path, 'modified', tree1_hash, tree2_hash]\n//  ]\nRepository.prototype.quick_diff = function (tree1, tree2, path, recurse) {\n  var self = this;\n  path = path ? path : '.';\n  recurse = recurse ? recurse : true;\n  // Handle empty trees\n  var changed = [];\n  if (tree1 == tree2) return changed;\n  var t1 = tree1 ? this.list_tree(tree1) : null;\n  var t2 = tree2 ? this.list_tree(tree2) : null;\n\n  // Check that we have tree 1 blob differences\n  if (t1) {\n    Object.keys(t1['blob']).forEach(function (file) {\n      var hsh = t1['blob'][file];\n      // Fetch the same file in tree 2\n      var t2_file = t2 ? t2['blob'][file] : null;\n      var full = path + \"/\" + file;\n      if (!t2_file) {\n        changed.push([full, 'added', hsh['sha'], null]); // not in parent\n      } else if (hsh['sha'] != t2_file['sha']) {\n        changed.push([full, 'modified', hsh['sha'], t2_file['sha']]); // file changed\n      }\n    });\n  }\n\n  // Check tree 2 blobs\n  if (t2) {\n    Object.keys(t2['blob']).forEach(function (file) {\n      var hsh = t2 ? t2['blob'][file] : null;\n      if (t1 == null || t1['blob'][file] == null) {\n        changed.push([path + \"/\" + file, 'removed', null, hsh['sha']]);\n      }\n    });\n  }\n\n  // Check for all the tree objects\n  if (t1) {\n    Object.keys(t1['tree']).forEach(function (dir) {\n      var hsh = t1['tree'][dir];\n      var t2_tree = t2 ? t2['tree'][dir] : null;\n      var full = path + \"/\" + dir;\n      if (!t2_tree) {\n        if (recurse) {\n          changed = changed.concat(self.quick_diff(hsh['sha'], null, full, true));\n        } else {\n          changed.push([full, 'added', hsh[('sha', null)]]);\n        }\n      } else if (hsh['sha'] != t2_tree['sha']) {\n        if (recurse) {\n          changed = changed.concat(self.quick_diff(hsh['sha'], t2_tree['sha'], full, true));\n        } else {\n          changed.push([full, 'modified', hsh['sha'], t2_tree['sha']]);\n        }\n      }\n    });\n  }\n  if (t2) {\n    Object.keys(t2['tree']).forEach(function (dir) {\n      var hsh = t2['tree'][dir];\n      var t1_tree = t1 ? t1['tree'][dir] : null;\n      if (!t1_tree) {\n        if (recurse) {\n          changed = changed.concat(self.quick_diff(null, hsh['sha'], full, true));\n        } else {\n          changed.push([full, 'removed', null, hsh['sha']]);\n        }\n      }\n    });\n  }\n  // Return all the changed files\n  return changed;\n};\n\n// returna 2-d hash of the tree\n// ['blob']['FILENAME'] = {:mode => '100644', :sha => SHA}\n// ['tree']['DIRNAME'] = {:mode => '040000', :sha => SHA}\nRepository.prototype.list_tree = function (sha) {\n  var data = {\n    blob: {},\n    tree: {},\n    link: {},\n    commit: {}\n  };\n  var object = this.get_object_by_sha1(sha);\n  object.entries.forEach(function (entry) {\n    data[entry.format_type][entry.name] = {\n      mode: entry.format_type,\n      sha: entry.sha1\n    };\n  });\n  return data;\n};\nvar walk_log = function (repo, sha, options, total_size) {\n  if (total_size == null) total_size = 0;\n  if (repo.already_searched[sha]) return [];\n  // Add the sha to the list of allready searched for sha's\n  repo.already_searched[sha] = true;\n  // Empty array\n  var array = [];\n  var o = null,\n    commit_sha = null,\n    c = null,\n    output = null;\n  if (sha) {\n    // Get the raw object\n    o = get_raw_object_by_sha1(repo, sha);\n\n    // Create a git object from the raw object\n    if (o.type == \"tag\") {\n      commit_sha = repo.get_object_by_sha1(sha).object;\n      c = repo.get_object_by_sha1(commit_sha);\n    } else {\n      c = GitObject.from_raw(o, repo);\n    }\n\n    // If it is not a commit\n    if (c.type != \"commit\") return [];\n\n    // Add sha\n    var add_sha = true;\n    // Check if the commit should be in the results\n    if (options[\"since\"] && options[\"since\"] && options[\"since\"].constructor == Date && options[\"since\"] > c.committer.date) {\n      add_sha = false;\n    }\n    if (options[\"until\"] && options[\"until\"] && options[\"until\"].constructor == Date && options[\"until\"] < c.committer.date) {\n      add_sha = false;\n    }\n\n    // Follow all parents unless --first-parent is specified\n    var subarray = [];\n    if (c.parent.length == 0 && options[\"path_limiter\"]) {\n      add_sha = false;\n    }\n    if (options[\"max_count\"] == null || array.length + total_size < options[\"max_count\"]) {\n      if (options[\"path_limiter\"] == null) {\n        output = c.raw_log(sha);\n        array.push([sha, output, c.committer.date]);\n      }\n      if (options[\"max_count\"] != null && array.length + total_size >= options[\"max_count\"]) {\n        return array;\n      }\n      for (var i = 0; i < c.parent.length; i++) {\n        var psha = c.parent[i];\n        var tree = repo.get_object_by_sha1(psha).tree;\n        if (psha && !repo.files_changed(c.tree, tree, options[\"path_limiter\"])) {\n          add_sha = false;\n        }\n\n        // Walk the next level of the tree\n        var results = walk_log(repo, psha, options, array.length + total_size);\n        subarray = subarray.concat(results);\n        if (options[\"first_parent\"]) break;\n      }\n      if (options[\"path_limiter\"] != null && add_sha) {\n        output = c.raw_log(sha);\n        array.push([sha, output, c.comitter.date]);\n      }\n      if (add_sha) {\n        array = array.concat(subarray);\n      }\n    }\n  }\n  // Return all the commits\n  return array;\n};\nvar convert = function (d) {\n  return d.constructor === Date ? d : d.constructor === Array ? new Date(d[0], d[1], d[2]) : d.constructor === Number ? new Date(d) : d.constructor === String ? new Date(d) : typeof d === \"object\" ? new Date(d.year, d.month, d.date) : NaN;\n};\nvar compare = function (a, b) {\n  return isFinite(a = convert(a).valueOf()) && isFinite(b = convert(b).valueOf()) ? (a > b) - (a < b) : NaN;\n};\nRepository.prototype.rev_list = function (sha, options, callback) {\n  try {\n    var end_sha = null;\n    if (Array.isArray(sha)) {\n      end_sha = sha[0], sha = sha[1];\n    }\n\n    // Walk the log\n    var log = this.log(sha, options);\n    // Sort the log\n    log = log.sort(function (a, b) {\n      return compare(a[2], b[2]);\n    }).reverse();\n\n    // Truncate array\n    if (end_sha) {\n      log = truncate_arr(log, end_sha);\n    }\n\n    // Shorten the list if it's longer than max_count\n    if (options['max_count']) {\n      var opt_len = parseInt(options['max_count']);\n      // If the length is less than the total log\n      if (opt_len < log.length) {\n        log = log.slice(0, opt_len);\n      }\n    }\n\n    // Pretty print the result if option is specified\n    if (options['pretty'] == 'raw') {\n      log = log.map(function (log_entry) {\n        return log_entry[1];\n      }).join(\"\");\n    } else {\n      log = log.map(function (log_entry) {\n        return log_entry[0];\n      }).join(\"\\n\");\n    }\n\n    // Return the log\n    callback(null, log);\n  } catch (err) {\n    callback(err, null);\n  }\n};\n\n// Cut off the array at a specific point\nvar truncate_arr = function (arr, end_sha) {\n  var new_arr = [];\n  for (var i = 0; i < arr.length; i++) {\n    var a = arr[i];\n    if (a[0] == sha) {\n      return new_arr;\n    }\n    new_arr.push(a);\n  }\n  return new_arr;\n};\n\n// Returns true/false if that sha exists in the db\nRepository.prototype.object_exists = function (sha1, callback) {\n  var self = this;\n  var sha_hex = '';\n  for (var i = 0; i < sha1.length; i = i + 2) {\n    sha_hex = sha_hex + String.fromCharCode(parseInt(sha1.substr(i, 2), 16));\n  }\n\n  // Search in the packs\n  self.in_packs(sha_hex, function (err, result) {\n    if (err) return callback(err, result);\n    if (result) return callback(null, result);\n\n    // Search in loose\n    self.in_loose(sha_hex, function (err, result) {\n      if (err) return callback(err, result);\n      if (result) return callback(null, result);\n\n      // Search again in the packs after an init in case it appeared in the meantime\n      initpacks(self);\n      // Search in the packs\n      self.in_packs(sha_hex, function (err, result) {\n        if (err) return callback(err, result);\n        callback(null, result);\n      });\n    });\n  });\n};\n\n// Returns true if the hex-packed sha is in the packfile\nRepository.prototype.in_packs = function (sha_hex, callback) {\n  // Try packs\n  var packs = this.packs;\n  for (var i = 0; i < packs.length; i++) {\n    var o = packs[i].find(sha_hex);\n    if (o != null) return callback(null, true);\n  }\n  callback(null, false);\n};\n\n// Returns true if the hex-packed sha is in the loose objects\nRepository.prototype.in_loose = function (sha_hex, callback) {\n  if (!this.loose) initloose(this);\n  // Try loose storage\n  var looses = this.loose;\n  for (var i = 0; i < looses.length; i++) {\n    var o = looses[i].find(sha_hex);\n    if (o) return callback(null, true);\n  }\n  callback(null, false);\n};\n\n// Get a subtree\nRepository.prototype.get_subtree = function (commit_sha, path, callback) {\n  var self = this;\n  // Fetch tree sha\n  var tree_sha = this.get_object_by_sha1(commit_sha).tree;\n  // Ensure we have a valid path\n  if (path && !(path == '' || path == '.' || path == './')) {\n    var paths = path.split('/');\n    for (var i = 0; i < paths.length; i++) {\n      // Get the path element\n      path = paths[i];\n      // Ignore empty paths\n      if (paths[i] != '') {\n        var tree = this.get_object_by_sha1(tree_sha);\n        var entry = tree.entries.filter(function (e) {\n          return e.name == path;\n        }).shift();\n        if (entry) {\n          tree_sha = entry.sha1;\n        } else {\n          return callback('no subtree located for ' + commit_sha, null);\n        }\n      }\n    }\n  }\n  // Return the tree_sha\n  callback(null, tree_sha);\n};\nRepository.init = function (dir, bare, callback) {\n  try {\n    var args = Array.prototype.slice.call(arguments, 0);\n    callback = args.pop();\n    dir = args.length ? args.shift() : true;\n    bare = args.length ? args.shift() : true;\n\n    // Create the directory if it does not exist\n    try {\n      fs.statSync(dir);\n    } catch (err) {\n      fs.mkdirSync(dir, 16877);\n    }\n    // Check if we are allready initialized\n    try {\n      fs.statSync(dir + \"/objects\");\n      return callback(null, false);\n    } catch (err) {}\n    ;\n    // The directory does not exist so let's create it\n    create_initial_config(dir, bare);\n    // Create all the directories\n    fs.mkdirSync(dir + \"/refs\", 16877);\n    fs.mkdirSync(dir + \"/refs/heads\", 16877);\n    fs.mkdirSync(dir + \"/refs/tags\", 16877);\n    fs.mkdirSync(dir + \"/refs/info\", 16877);\n    fs.mkdirSync(dir + \"/refs/pack\", 16877);\n    fs.mkdirSync(dir + \"/branches\", 16877);\n    // Add basic files\n    add_file(dir, 'description', 'Unnamed repository; edit this file to name it for gitweb.');\n    add_file(dir, 'HEAD', 'ref: refs/heads/master\\n');\n    // Create hooks directory\n    fs.mkdirSync(dir + \"/hooks\", 16877);\n    // Add empty shell scripts\n    add_file(dir + \"/hooks\", 'applypatch-msg', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'post-commit', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'post-receive', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'post-update', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'pre-applypatch', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'pre-commit', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'pre-rebase', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'update', '# add shell script and make executable to enable');\n    // Create info directory\n    fs.mkdirSync(dir + \"/info\", 16877);\n    add_file(dir, 'info/exclude', \"# *.[oa]\\n# *~\");\n    callback(null, self);\n  } catch (err) {\n    callback(err, null);\n  }\n};\nvar create_initial_config = function (dir, bare) {\n  var bare_status = bare ? 'true' : 'false';\n  var config = \"[core]\\n\\trepositoryformatversion = 0\\n\\tfilemode = true\\n\\tbare = \" + bare_status + \"\\n\\tlogallrefupdates = true\";\n  add_file(dir, 'config', config);\n};\nvar add_file = function (dir, name, content) {\n  fs.writeFileSync(dir + \"/\" + name, content);\n};\n\n// writes a raw object into the git repo\nRepository.prototype.put_raw_object = function (content, type, callback) {\n  return this.loose[0].put_raw_object(content, type, callback);\n};","map":{"version":3,"names":["util","require","GitObject","fs","LooseStorage","PackStorage","BinaryParser","Repository","exports","git_directory","options","_git_directory","_options","_packs","_loose","_already_searched","self","Object","defineProperty","get","set","value","enumerable","chomp","raw_text","replace","truncate_array","array","sha","prototype","log","callback","already_searched","walk_log","close","repo","packs","forEach","pack","git_path","path","initloose","loaded","loose","load_loose","load_alternate_loose","push","statSync","err","alt","lines","readFileSync","split","length","pop","line","indexOf","substr","realpathSync","initpacks","loaded_packs","load_packs","load_alternate_packs","readdirSync","entry","match","cache_objects","full_pack","get_raw_object_by_sha1","sha1o","constructor","String","sha1","i","fromCharCode","parseInt","o","find","looses","get_object_by_sha1","r","from_raw","files_changed","tree_sha1","tree_sha2","path_limiter","mod","quick_diff","files","map","c","Array","isArray","cat_file","raw_content","cat_file_size","content","cat_file_type","type","ls_tree","paths","recursive","part","concat","ls_tree_path","join","get_raw_tree","tree","commit_sha","object","get_raw_trees","out","parts","mode","name","full_name","RegExp","append","last","dir_name","filter","p","next_sha","mod_tree","ent","info","fpath","next_path","shift","tree1","tree2","recurse","changed","t1","list_tree","t2","keys","file","hsh","t2_file","full","dir","t2_tree","t1_tree","data","blob","link","commit","entries","format_type","total_size","output","add_sha","Date","committer","date","subarray","parent","raw_log","psha","results","comitter","convert","d","Number","year","month","NaN","compare","a","b","isFinite","valueOf","rev_list","end_sha","sort","reverse","truncate_arr","opt_len","slice","log_entry","arr","new_arr","object_exists","sha_hex","in_packs","result","in_loose","get_subtree","tree_sha","e","init","bare","args","call","arguments","mkdirSync","create_initial_config","add_file","bare_status","config","writeFileSync","put_raw_object"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/repository.js"],"sourcesContent":["var util = require('util'),\n  GitObject = require('./git_object').GitObject,\n  fs = require('fs'),\n  LooseStorage = require('./loose_storage').LooseStorage,\n  PackStorage = require('./pack_storage').PackStorage,\n  BinaryParser = require('./binary_parser').BinaryParser;\n\nRepository = exports.Repository = function(git_directory, options) {  \n  var _git_directory = git_directory;\n  var _options = options ? options : {};\n  var _packs = [];\n  var _loose = null;\n  var _already_searched = {};\n  var self = this;\n  \n  Object.defineProperty(this, \"git_directory\", { get: function() { return _git_directory; }, set: function(value) { _git_directory = value; }, enumerable: true});    \n  Object.defineProperty(this, \"options\", { get: function() { return _options; }, set: function(value) { _options = value; }, enumerable: true});    \n  Object.defineProperty(this, \"already_searched\", { get: function() { return _already_searched; }, set: function(value) { _already_searched = value; }, enumerable: true});      \n  Object.defineProperty(this, \"packs\", { get: function() { return _packs; }, set: function(value) { _packs = value; }, enumerable: true});      \n  Object.defineProperty(this, \"loose\", { get: function() { return _loose; }, set: function(value) { _loose = value; }, enumerable: true});      \n}\n\n// Chomp text removing end carriage returns\nvar chomp = function chomp(raw_text) {\n  return raw_text.replace(/(\\n|\\r)+$/, '');\n}\n\nvar truncate_array = function(array, sha) {\n  \n}\n\n// takes the following options:\n//  :since - Time object specifying that you don't want commits BEFORE this\n//  :until - Time object specifying that you don't want commit AFTER this\n//  :first_parent - tells log to only walk first parent\n//  :path_limiter - string or array of strings to limit path\n//  :max_count - number to limit the output\nRepository.prototype.log = function(sha, options, callback) {\n  this.already_searched = {}\n  return walk_log(this, sha, options);\n}\n\nvar close = function(repo) {\n  if(repo.packs) {\n    repo.packs.forEach(function(pack) { \n      pack.close(); \n    });\n  }\n}\n\nvar git_path = function(repo, path) { return repo.git_directory + \"/\" + path; }\n\nvar initloose = function(repo) {\n  repo.loaded = [];\n  repo.loose = [];\n  load_loose(repo, git_path(repo, 'objects'));\n  load_alternate_loose(repo, git_path(repo, 'objects'));\n  return repo.loose;\n}\n\nvar load_loose = function(repo, path) {\n  repo.loaded.push(path);\n  try {\n    fs.statSync(path);\n    repo.loose.push(new LooseStorage(path));    \n  } catch (err) {\n    return;    \n  }\n}\n\nvar load_alternate_loose = function(repo, path) {\n  // load alternate loose too\n  var alt = path + '/info/alternates';\n  try {\n    fs.statSync(alt);\n    // Read and process all entries in the directory\n    var lines = fs.readFileSync(alt, 'utf8').split('\\n');\n    lines.length > 0 && lines[lines.length - 1] == '' ? lines.pop() : null;\n    // Iterate over alternate loose storage locations\n    lines.forEach(function(line) {      \n      // Only load the path once\n      if(repo.loaded.indexOf(chomp(line)) == -1) {        \n        if(line.substr(0, 2) == \"..\") {\n          line = fs.realpathSync(repo.git_directory + \"/\" + line);\n        }     \n\n        load_loose(repo, chomp(line));\n        load_alternate_loose(repo, chomp(line));        \n      }\n    });    \n  } catch(err) {}\n}\n\nvar initpacks = function(repo) {\n  close(repo);\n  repo.loaded_packs = [];\n  repo.packs = [];\n  load_packs(repo, git_path(repo, \"objects/pack\"));\n  load_alternate_packs(repo, git_path(repo, \"objects\"));\n  return repo.packs;\n}\n\nvar load_packs = function(repo, path) {\n  repo.loaded_packs.push(path);\n  try {\n    fs.statSync(path);\n    // Read and process all entries in the directory\n    fs.readdirSync(path).forEach(function(entry) {\n      // If we have a pack file create a new storage object\n      if(entry.match(/\\.pack$/i)) {\n        var pack = new PackStorage(path + \"/\" + entry);\n        // If we have specified the map for the pack then load the entire object map\n        if(repo.options[\"map_packfile\"]) {\n          pack.cache_objects();\n        }\n        // Add pack to list of packs in the repo\n        repo.packs.push(pack)\n      }\n    });\n  } catch (err) {    \n  }\n}\n\nvar load_alternate_packs = function(repo, path) {\n  var alt = path + \"/info/alternates\";\n  \n  try {\n    fs.statSync(alt);\n    // Read and process all entries in the directory\n    var lines = fs.readFileSync(alt, 'utf8').split('\\n');\n    lines.length > 0 && lines[lines.length - 1] == '' ? lines.pop() : null;\n\n    lines.forEach(function(line) {\n      if(line.substr(0, 2) == \"..\") {\n        line = fs.realpathSync(repo.git_directory + \"/\" + line);\n      }\n      \n      // Get pack file name\n      var full_pack = chomp(line) + \"/pack\";\n      if(repo.loaded_packs.indexOf(full_pack) == -1) {\n        load_packs(repo, full_pack);\n        load_alternate_packs(repo, chomp(line));\n      }\n    })\n  } catch(err) {    \n  }\n}\n\nvar get_raw_object_by_sha1 = function(repo, sha1o) {\n  if(!sha1o || sha1o == \"\" || sha1o.constructor != String) throw \"no such sha found\";\n  \n  var sha1 = '';\n  for(var i = 0; i < sha1o.length; i = i + 2) {\n    sha1 = sha1 + String.fromCharCode(parseInt(sha1o.substr(i, 2), 16));\n  }\n  // Init packs if we have none set yet\n  if(!repo.packs) initpacks(repo);\n  // Try packs\n  var packs = repo.packs;\n  for(var i = 0; i < packs.length; i++) {\n    var o = packs[i].find(sha1);    \n    if(o != null) return o;\n  }\n\n  if(!repo.loose) initloose(repo);\n  // Try loose storage\n  var looses = repo.loose;  \n  for(var i = 0; i < looses.length; i++) {\n    var o  = looses[i].find(sha1);\n    if(o) return o;\n  }\n\n  // try packs again maybe the object got packed in the meantime\n  initpacks(repo);\n  // Try packs\n  var packs = repo.packs;  \n  for(var i = 0; i < packs.length; i++) {\n    var o = packs[i].find(sha1);\n    if(o != null) return o;\n  }\n  \n  // No results throw an error that no sha pack object was found\n  throw \"no such sha found\";\n}\n\nRepository.prototype.get_object_by_sha1 = function(sha1) {\n  var r = get_raw_object_by_sha1(this, sha1);\n  if(!r) return null;\n  return GitObject.from_raw(r, this);\n}\n\n// returns true if the files in the path_limiter were changed or no path limiter\n// used by the log() function when passed with a path_limiter\nRepository.prototype.files_changed = function(tree_sha1, tree_sha2, path_limiter) {\n  if(path_limiter == null) return true;\n  // We got a path limiter, let's perform the diff to check for changes\n  var mod = this.quick_diff(tree_sha1, tree_sha2);\n  var files = mod.map(function(c) { return c[0]; });\n  path_limiter = Array.isArray(path_limiter) ? path_limiter : path_limiter != null ? [path_limiter] : [];\n  \n  for(var i = 0; i < path_limiter.length; i++) {\n    if(files.indexOf(path_limiter[i]) != -1) return true;\n  }\n  return false;\n}\n\n// Returns the raw file contents of this sha\nRepository.prototype.cat_file = function(sha) {\n  return this.get_object_by_sha1(sha).raw_content;\n}\n\n// Returns the file size (as an int) of this sha\nRepository.prototype.cat_file_size = function(sha) {\n  return get_raw_object_by_sha1(this, sha).content.length;\n}\n\n// Returns the file type as string of this sha\nRepository.prototype.cat_file_type = function(sha) {\n  return get_raw_object_by_sha1(this, sha).type;  \n}\n\n// returns the raw (cat-file) output for a tree\n// if given a commit sha, it will print the tree of that commit\n// if given a path limiter array, it will limit the output to those\n// if asked for recursive trees, will traverse trees\nRepository.prototype.ls_tree = function(sha, paths, recursive) {\n  var self = this;\n  paths = paths ? paths : [];\n  recursive = recursive ? recursive : false;\n\n  try {\n    if(paths.length > 0) {\n      // pathing\n      var part = [];\n      paths.forEach(function(path) {\n        part = part.concat(self.ls_tree_path(sha, path));\n      })\n      // Return the parts\n      return part.join(\"\\n\");\n    } else {\n      return this.get_raw_tree(sha, recursive);\n    }    \n  } catch (err) {\n    return '';\n  }\n}\n\nRepository.prototype.get_raw_tree = function(sha, recursive) {\n  var self = this;\n  recursive = recursive ? recursive : false;\n  var tree = null;\n  \n  var o = get_raw_object_by_sha1(this, sha);\n  if(o.type == 'commit') {\n    tree = this.get_object_by_sha1(sha).tree;\n  } else if(o.type == 'tag') {\n    var commit_sha = this.get_object_by_sha1(sha).object;\n    tree = this.get_object_by_sha1(commit_sha).tree;\n  } else if(o.type == 'tree') {\n    tree = sha;\n  } else {\n    return null;\n  }\n  \n  // If recursive execute next level of trees otherwise return the raw file\n  return recursive ? this.get_raw_trees(tree) : this.cat_file(tree);\n}\n\n// Grabs tree contents recursively,\n//  e.g. `git ls-tree -r sha`\nRepository.prototype.get_raw_trees = function(sha, path) {\n  var self = this;\n  path = path ? path : '';\n  var out = '';\n  \n  this.cat_file(sha).split('\\n').forEach(function(line) {\n    var parts = line.split(/\\s/);\n    var mode = parts[0], type = parts[1], sha = parts[2], name = parts[3];    \n    \n    if(type == 'tree') {\n      var full_name = path.length == 0 ? name : (path + '/' + name);\n      out = out + self.get_raw_trees(sha, full_name);\n    } else if(path.length == 0) {\n      out = out + line + '\\n';\n    } else {\n      out = out + line.replace(new RegExp(name, 'g'), (path + '/' + name)) + '\\n';\n    }\n  });  \n  // Return the out\n  return out;\n}\n\n// return array of tree entries\n// TODO : refactor this to remove the fugly\nRepository.prototype.ls_tree_path = function(sha, path, append) {\n  var self = this;\n  var tree = this.get_raw_tree(sha);\n  \n  if(path.match(/\\//)) {\n    var paths = path.split('/');\n    paths.length > 0 && paths[paths.length - 1] == '' ? paths.pop() : null;\n    var last = path.substr(path.length - 1, 1);\n\n    if((last == '/') && (paths.length == 1)) {\n      var append = append ? (append + \"/\" + paths[0]) : paths[0];\n      var dir_name = tree.split('\\n').filter(function(p) { return p.split('\\t')[1] == paths[0]; })[0];\n      \n      if(dir_name == null) throw \"no such path\";\n      var next_sha = dir_name.split(/ |\\t/)[2];\n      var tree = self.get_raw_tree(next_sha);\n      \n      tree = tree.split('\\n');\n      \n      if(append) {\n        var mod_tree = [];\n        tree.forEach(function(ent) {\n          var parts = ent.split('\\t');\n          var info = parts[0], fpath = parts[1];\n          mod_tree.push([info, (append + \"/\" + fpath)].join('\\t'));\n        });\n        return mod_tree;\n      } else {\n        return tree;\n      }\n    } else {\n      if(tree == null) throw \"no such path\";\n      var next_path = paths.shift();\n      var dir_name = tree.split('\\n').filter(function(p) { return p.split('\\t')[1] == next_path; })[0];\n      if(dir_name == null) throw \"no such path\";\n      var next_sha = dir_name.split(/ |\\t/)[2];\n      next_path = append ? (append + \"/\" + next_path) : next_path;\n      \n      if(last == '/') {\n        return self.ls_tree_path(next_sha, (paths.join('/') + '/'), next_path);\n      } else {\n        return self.ls_tree_path(next_sha, paths.join('/'), next_path);\n      }      \n    }    \n  } else {\n    if(tree == null) throw \"no such path\";\n    var tree = tree.split('\\n');\n    tree = tree.filter(function(p) { return p.split('\\t')[1] == path; });\n    \n    if(append) {\n      var mod_tree = [];\n      tree.forEach(function(ent) {\n        var parts = ent.split('\\t');\n        var info = parts[0], fpath = parts[1];\n        mod_tree.push([info, (append + '/' + fpath)].join('\\t'));\n      });\n      return mod_tree;\n    } else {\n      return tree;\n    }\n  }\n}\n\n// takes 2 tree shas and recursively walks them to find out what\n// files or directories have been modified in them and returns on\n// array of changes\n//  [ [full_path, 'added', tree1_hash, nil],\n//   [full_path, 'removed', nil, tree2_hash],\n//   [full_path, 'modified', tree1_hash, tree2_hash]\n//  ]\nRepository.prototype.quick_diff = function(tree1, tree2, path, recurse) {\n  var self = this;\n  path = path ? path : '.';\n  recurse = recurse ? recurse : true;\n  // Handle empty trees\n  var changed = [];  \n  if(tree1 == tree2) return changed;\n  \n  var t1 = tree1 ? this.list_tree(tree1) : null;\n  var t2 = tree2 ? this.list_tree(tree2) : null;\n  \n  // Check that we have tree 1 blob differences\n  if(t1) {\n    Object.keys(t1['blob']).forEach(function(file) {\n      var hsh = t1['blob'][file];\n      // Fetch the same file in tree 2\n      var t2_file = t2 ? t2['blob'][file] : null;\n      var full = path + \"/\" + file;\n      if(!t2_file) {\n        changed.push([full, 'added', hsh['sha'], null]);  // not in parent\n      } else if(hsh['sha'] != t2_file['sha']) {\n        changed.push([full, 'modified', hsh['sha'], t2_file['sha']]); // file changed\n      }\n    });\n  }\n    \n  \n  // Check tree 2 blobs\n  if(t2) {\n    Object.keys(t2['blob']).forEach(function(file) {\n      var hsh = t2 ? t2['blob'][file] : null;\n      if(t1 == null || t1['blob'][file] == null) {\n        changed.push([path + \"/\" + file, 'removed', null, hsh['sha']]);\n      }\n    });\n  }\n  \n  // Check for all the tree objects\n  if(t1) {\n    Object.keys(t1['tree']).forEach(function(dir) {\n      var hsh = t1['tree'][dir];\n      var t2_tree = t2 ? t2['tree'][dir] : null;\n      var full = path + \"/\" + dir;      \n      \n      if(!t2_tree) {\n        if(recurse) {\n          changed = changed.concat(self.quick_diff(hsh['sha'], null, full, true));\n        } else {\n          changed.push([full, 'added', hsh['sha', null]]);\n        }\n      } else if(hsh['sha'] != t2_tree['sha']) {\n        if(recurse) {\n          changed = changed.concat(self.quick_diff(hsh['sha'], t2_tree['sha'], full, true));\n        } else {\n          changed.push([full, 'modified', hsh['sha'], t2_tree['sha']]);\n        }\n      }\n    });    \n  }\n  \n  if(t2) {\n    Object.keys(t2['tree']).forEach(function(dir) {\n      var hsh = t2['tree'][dir];\n      var t1_tree = t1 ? t1['tree'][dir] : null;\n      \n      if(!t1_tree) {\n        if(recurse) {\n          changed = changed.concat(self.quick_diff(null, hsh['sha'], full, true));\n        } else {\n          changed.push([full, 'removed', null, hsh['sha']]);\n        }\n      }\n    });    \n  }\n  // Return all the changed files\n  return changed;\n}\n\n// returna 2-d hash of the tree\n// ['blob']['FILENAME'] = {:mode => '100644', :sha => SHA}\n// ['tree']['DIRNAME'] = {:mode => '040000', :sha => SHA}\nRepository.prototype.list_tree = function(sha) {\n  var data = {blob:{}, tree:{}, link:{}, commit:{}};\n  var object = this.get_object_by_sha1(sha);\n  object.entries.forEach(function(entry) {\n    data[entry.format_type][entry.name] = {mode:entry.format_type, sha:entry.sha1};\n  });\n  \n  return data;\n}\n\nvar walk_log = function(repo, sha, options, total_size) {\n  if(total_size == null) total_size = 0;  \n  if(repo.already_searched[sha]) return [];\n  // Add the sha to the list of allready searched for sha's\n  repo.already_searched[sha] = true;\n  // Empty array\n  var array = [];\n  var o = null, commit_sha = null, c = null, output = null;\n\n  if(sha) {\n    // Get the raw object\n    o = get_raw_object_by_sha1(repo, sha);\n\n    // Create a git object from the raw object\n    if(o.type == \"tag\") {\n      commit_sha = repo.get_object_by_sha1(sha).object;\n      c = repo.get_object_by_sha1(commit_sha);\n    } else {      \n      c = GitObject.from_raw(o, repo);\n    }\n    \n    // If it is not a commit\n    if(c.type != \"commit\") return [];  \n\n    // Add sha\n    var add_sha = true;    \n    // Check if the commit should be in the results\n    if(options[\"since\"] && (options[\"since\"] && options[\"since\"].constructor == Date) && (options[\"since\"] > c.committer.date)) {\n      add_sha = false;\n    }    \n    if(options[\"until\"] && (options[\"until\"] && options[\"until\"].constructor == Date) && (options[\"until\"] < c.committer.date)) {\n      add_sha = false;\n    }\n                \n    // Follow all parents unless --first-parent is specified\n    var subarray = [];\n    \n    if(c.parent.length == 0 && options[\"path_limiter\"]) {\n      add_sha = false;\n    }\n    \n    if(options[\"max_count\"] == null || ((array.length + total_size) < options[\"max_count\"])) {      \n      if(options[\"path_limiter\"] == null) {\n        output = c.raw_log(sha);\n        array.push([sha, output, c.committer.date]);\n      }\n\n      if(options[\"max_count\"] != null && (array.length + total_size) >= options[\"max_count\"]) {\n        return array;\n      }\n      \n      for(var i = 0; i < c.parent.length; i++) {\n        var psha = c.parent[i];\n        var tree = repo.get_object_by_sha1(psha).tree;\n        \n        if(psha && !repo.files_changed(c.tree, tree, options[\"path_limiter\"])) {\n          add_sha = false;\n        }\n        \n        // Walk the next level of the tree\n        var results = walk_log(repo, psha, options, (array.length + total_size));\n        subarray = subarray.concat(results); \n        if(options[\"first_parent\"]) break;\n      }\n      \n      if(options[\"path_limiter\"] != null && add_sha) {\n        output = c.raw_log(sha);\n        array.push([sha, output, c.comitter.date]);        \n      }\n      \n      if(add_sha) {\n        array = array.concat(subarray);\n      }\n    }\n  }\n  // Return all the commits\n  return array;\n}\n\nvar convert = function(d) {\n  return (\n    d.constructor === Date ? d :\n    d.constructor === Array ? new Date(d[0],d[1],d[2]) :\n    d.constructor === Number ? new Date(d) :\n    d.constructor === String ? new Date(d) :\n    typeof d === \"object\" ? new Date(d.year,d.month,d.date) :\n    NaN\n  );\n}\n\nvar compare = function(a,b) {\n  return (\n    isFinite(a=convert(a).valueOf()) &&\n    isFinite(b=convert(b).valueOf()) ?\n    (a>b)-(a<b) :\n    NaN\n  );\n}\n\nRepository.prototype.rev_list = function(sha, options, callback) {\n  try {\n    var end_sha = null;\n\n    if(Array.isArray(sha)) {\n      end_sha = sha[0], sha = sha[1];\n    }\n\n    // Walk the log\n    var log = this.log(sha, options);    \n    // Sort the log\n    log = log.sort(function(a, b) {\n      return compare(a[2], b[2])\n    }).reverse();\n    \n    // Truncate array\n    if(end_sha) {\n      log = truncate_arr(log, end_sha);\n    }\n\n    // Shorten the list if it's longer than max_count\n    if(options['max_count']) {      \n      var opt_len = parseInt(options['max_count']);\n      // If the length is less than the total log\n      if(opt_len < log.length) {\n        log = log.slice(0, opt_len);\n      }\n    }\n    \n    // Pretty print the result if option is specified\n    if(options['pretty'] == 'raw') {      \n      log = log.map(function(log_entry) { return log_entry[1]; }).join(\"\");\n    } else {\n      log = log.map(function(log_entry) { return log_entry[0]; }).join(\"\\n\");\n    }\n\n    // Return the log\n    callback(null, log);    \n  } catch (err) {\n    callback(err, null);\n  }\n}\n\n// Cut off the array at a specific point\nvar truncate_arr = function(arr, end_sha) {\n  var new_arr = [];\n  \n  for(var i = 0; i < arr.length; i++) {\n    var a = arr[i];\n    if(a[0] == sha) {\n      return new_arr;\n    }\n    new_arr.push(a);\n  }\n  return new_arr;\n}\n\n// Returns true/false if that sha exists in the db\nRepository.prototype.object_exists = function(sha1, callback) {\n  var self = this;\n  var sha_hex = '';\n  for(var i = 0; i < sha1.length; i = i + 2) {\n    sha_hex = sha_hex + String.fromCharCode(parseInt(sha1.substr(i, 2), 16));\n  }\n  \n  // Search in the packs\n  self.in_packs(sha_hex, function(err, result) {\n    if(err) return callback(err, result);\n    if(result) return callback(null, result);\n    \n    // Search in loose\n    self.in_loose(sha_hex, function(err, result) {\n      if(err) return callback(err, result);\n      if(result) return callback(null, result);\n      \n      // Search again in the packs after an init in case it appeared in the meantime\n      initpacks(self);\n      // Search in the packs\n      self.in_packs(sha_hex, function(err, result) {\n        if(err) return callback(err, result);\n        callback(null, result);\n      });\n    });\n  })\n}\n\n// Returns true if the hex-packed sha is in the packfile\nRepository.prototype.in_packs = function(sha_hex, callback) {\n  // Try packs\n  var packs = this.packs;\n  for(var i = 0; i < packs.length; i++) {\n    var o = packs[i].find(sha_hex);    \n    if(o != null) return callback(null, true);\n  }  \n  callback(null, false);\n}\n\n// Returns true if the hex-packed sha is in the loose objects\nRepository.prototype.in_loose = function(sha_hex, callback) {\n  if(!this.loose) initloose(this);  \n  // Try loose storage\n  var looses = this.loose;\n  for(var i = 0; i < looses.length; i++) {\n    var o  = looses[i].find(sha_hex);\n    if(o) return callback(null, true);\n  }\n  callback(null, false);  \n}\n\n// Get a subtree\nRepository.prototype.get_subtree = function(commit_sha, path, callback) {\n  var self = this;\n  // Fetch tree sha\n  var tree_sha = this.get_object_by_sha1(commit_sha).tree;\n  // Ensure we have a valid path\n  if(path && !(path == '' || path == '.' || path == './')) {\n    var paths = path.split('/');\n    \n    for(var i = 0; i < paths.length; i++) {\n      // Get the path element\n      path = paths[i];\n      // Ignore empty paths\n      if(paths[i] != '') {\n        var tree = this.get_object_by_sha1(tree_sha);\n        var entry = tree.entries.filter(function(e) { return e.name == path; }).shift();\n        \n        if(entry) {\n          tree_sha = entry.sha1;\n        } else {\n          return callback('no subtree located for ' + commit_sha, null);\n        }        \n      }\n    }\n  }\n  // Return the tree_sha\n  callback(null, tree_sha);\n}\n\nRepository.init = function(dir, bare, callback) {\n  try {    \n    var args = Array.prototype.slice.call(arguments, 0);\n    callback = args.pop();\n    dir = args.length ? args.shift() : true;\n    bare = args.length ? args.shift() : true;\n\n    // Create the directory if it does not exist\n    try { fs.statSync(dir); } catch(err) { fs.mkdirSync(dir, 16877); }\n    // Check if we are allready initialized\n    try { fs.statSync(dir + \"/objects\"); return callback(null, false) } catch(err) {};\n    // The directory does not exist so let's create it\n    create_initial_config(dir, bare);\n    // Create all the directories\n    fs.mkdirSync(dir + \"/refs\", 16877);\n    fs.mkdirSync(dir + \"/refs/heads\", 16877);\n    fs.mkdirSync(dir + \"/refs/tags\", 16877);\n    fs.mkdirSync(dir + \"/refs/info\", 16877);\n    fs.mkdirSync(dir + \"/refs/pack\", 16877);\n    fs.mkdirSync(dir + \"/branches\", 16877);\n    // Add basic files\n    add_file(dir, 'description', 'Unnamed repository; edit this file to name it for gitweb.');\n    add_file(dir, 'HEAD', 'ref: refs/heads/master\\n');\n    // Create hooks directory\n    fs.mkdirSync(dir + \"/hooks\", 16877);\n    // Add empty shell scripts\n    add_file(dir + \"/hooks\", 'applypatch-msg', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'post-commit', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'post-receive', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'post-update', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'pre-applypatch', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'pre-commit', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'pre-rebase', '# add shell script and make executable to enable');\n    add_file(dir + \"/hooks\", 'update', '# add shell script and make executable to enable');\n    // Create info directory\n    fs.mkdirSync(dir + \"/info\", 16877);\n    add_file(dir, 'info/exclude', \"# *.[oa]\\n# *~\");\n    callback(null, self);\n  } catch(err) {\n    callback(err, null);\n  }\n}\n\nvar create_initial_config = function(dir, bare) {\n  var bare_status = bare ? 'true' : 'false';\n  var config = \"[core]\\n\\trepositoryformatversion = 0\\n\\tfilemode = true\\n\\tbare = \" + bare_status + \"\\n\\tlogallrefupdates = true\";\n  add_file(dir, 'config', config);\n}\n\nvar add_file = function(dir, name, content) {\n  fs.writeFileSync(dir + \"/\" + name, content);\n}\n\n// writes a raw object into the git repo\nRepository.prototype.put_raw_object = function(content, type, callback) {\n  return this.loose[0].put_raw_object(content, type, callback);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}