{"ast":null,"code":"var CommitStats = exports.CommitStats = function (repo, id, files) {\n  var _repo = repo,\n    _id = id,\n    _files = files,\n    _additions = 0,\n    _deletions = 0,\n    _total = 0;\n\n  // Build the stats based on the files\n  _additions = files.reduce(function (previousValue, currentValue, index, array) {\n    return previousValue + currentValue[1];\n  }, 0);\n  _deletions = files.reduce(function (previousValue, currentValue, index, array) {\n    return previousValue + currentValue[2];\n  }, 0);\n  _total = files.reduce(function (previousValue, currentValue, index, array) {\n    return previousValue + currentValue[3];\n  }, 0);\n\n  // Internal properties\n  Object.defineProperty(this, \"repo\", {\n    get: function () {\n      return _repo;\n    },\n    set: function (value) {\n      _repo = value;\n    },\n    enumerable: false\n  });\n  Object.defineProperty(this, \"id\", {\n    get: function () {\n      return _id;\n    },\n    set: function (value) {\n      _id = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"files\", {\n    get: function () {\n      return _files;\n    },\n    set: function (value) {\n      _files = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"additions\", {\n    get: function () {\n      return _additions;\n    },\n    set: function (value) {\n      _additions = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"deletions\", {\n    get: function () {\n      return _deletions;\n    },\n    set: function (value) {\n      _deletions = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"total\", {\n    get: function () {\n      return _total;\n    },\n    set: function (value) {\n      _total = value;\n    },\n    enumerable: true\n  });\n};\n\n// Find all commit stats matching the given criteria\n//  repo: the repo\n//  ref: the ref from which to begin (SHA1 or name) or nil for all\n//  options: hash of optional arguments to git\n//    max_count: maximum number of commits to fetch\n//    skip: number of commits to skip\n//\n// Returns assoc array (all values are lazy loading)\nCommitStats.find_all = function (repo, reference, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  var self = this;\n  // Unpack variables\n  options = args.length ? args.shift() : {};\n  // Set up options\n  options['numstat'] = true;\n\n  // Check if we have a reference\n  if (reference) {\n    // Execute log function\n    repo.git.log(options, reference, function (err, output) {\n      if (err) return callback(err, output);\n      callback(null, CommitStats.list_from_string(repo, output));\n    });\n  } else {\n    // Add all options\n    options['all'] = true;\n    // Execute log function\n    repo.git.log(options, function (err, output) {\n      if (err) return callback(err, output);\n      callback(null, CommitStats.list_from_string(repo, output));\n    });\n  }\n};\n\n// Parse out commit information into an array of baked Commit objects\n//  repo: the repo\n//  text: the text output from the git command (raw format)\n//\n// Returns assoc array of baked commits\nCommitStats.list_from_string = function (repo, text) {\n  var lines = text.trim().split('\\n');\n  var commits = {};\n  while (lines.length > 0) {\n    // Fetch the commit id\n    var id = lines.shift().replace(/\\ +/g, ' ').split(\" \").pop();\n    // Remove some rows\n    lines.shift();\n    lines.shift();\n    lines.shift();\n\n    // Process message lines\n    var message_lines = [];\n    // Process out the messages\n    while (lines.length > 0 && lines[0].match(/^ {4}/) || lines[0] == '') {\n      var string = lines.shift().substr(4);\n      message_lines.push(string);\n    }\n\n    // Skip all empty lines\n    while (lines.length > 0 && lines[0] != null && lines[0] == '') lines.shift();\n    var files = [];\n    // Process all the files\n    while (lines.length > 0 && lines[0].match(/^([-\\d]+)\\s+([-\\d]+)\\s+(.+)/)) {\n      var parts = lines.shift().replace(/\\ +/g, ' ').split(\" \");\n      var additions = parseInt(parts[0]);\n      var deletions = parseInt(parts[1]);\n      var filename = parts[2];\n      var total = additions + deletions;\n      files.push([filename, additions, deletions, total]);\n    }\n\n    // Skip all empty lines\n    while (lines.length > 0 && lines[0] != null && lines[0] == '') lines.shift();\n    // Add the commit to the list\n    commits[id] = new CommitStats(repo, id, files);\n  }\n\n  // Return the commits\n  return commits;\n};","map":{"version":3,"names":["CommitStats","exports","repo","id","files","_repo","_id","_files","_additions","_deletions","_total","reduce","previousValue","currentValue","index","array","Object","defineProperty","get","set","value","enumerable","find_all","reference","options","callback","args","Array","prototype","slice","call","arguments","pop","self","length","shift","git","log","err","output","list_from_string","text","lines","trim","split","commits","replace","message_lines","match","string","substr","push","parts","additions","parseInt","deletions","filename","total"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/commit_stats.js"],"sourcesContent":["var CommitStats = exports.CommitStats = function(repo, id, files) {\n  var _repo = repo, _id = id, _files = files, _additions = 0, _deletions = 0, _total = 0;\n  \n  // Build the stats based on the files\n  _additions = files.reduce(function(previousValue, currentValue, index, array) { return previousValue + currentValue[1]; }, 0);\n  _deletions = files.reduce(function(previousValue, currentValue, index, array) { return previousValue + currentValue[2]; }, 0);\n  _total = files.reduce(function(previousValue, currentValue, index, array) { return previousValue + currentValue[3]; }, 0);\n  \n  // Internal properties\n  Object.defineProperty(this, \"repo\", { get: function() { return _repo; }, set: function(value) { _repo = value; }, enumerable: false});    \n  Object.defineProperty(this, \"id\", { get: function() { return _id; }, set: function(value) { _id = value; }, enumerable: true});    \n  Object.defineProperty(this, \"files\", { get: function() { return _files; }, set: function(value) { _files = value; }, enumerable: true});    \n  Object.defineProperty(this, \"additions\", { get: function() { return _additions; }, set: function(value) { _additions = value; }, enumerable: true});    \n  Object.defineProperty(this, \"deletions\", { get: function() { return _deletions; }, set: function(value) { _deletions = value; }, enumerable: true});    \n  Object.defineProperty(this, \"total\", { get: function() { return _total; }, set: function(value) { _total = value; }, enumerable: true});      \n}\n\n// Find all commit stats matching the given criteria\n//  repo: the repo\n//  ref: the ref from which to begin (SHA1 or name) or nil for all\n//  options: hash of optional arguments to git\n//    max_count: maximum number of commits to fetch\n//    skip: number of commits to skip\n//\n// Returns assoc array (all values are lazy loading)\nCommitStats.find_all = function(repo, reference, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();  \n  var self = this;\n  // Unpack variables\n  options = args.length ? args.shift() : {};\n  // Set up options\n  options['numstat'] = true;\n\n  // Check if we have a reference\n  if(reference) {\n    // Execute log function\n    repo.git.log(options, reference, function(err, output) {\n      if(err) return callback(err, output);\n      callback(null, CommitStats.list_from_string(repo, output));\n    });\n  } else {\n    // Add all options\n    options['all'] = true;\n    // Execute log function\n    repo.git.log(options, function(err, output) {\n      if(err) return callback(err, output);\n      callback(null, CommitStats.list_from_string(repo, output));      \n    });\n  }  \n}\n\n// Parse out commit information into an array of baked Commit objects\n//  repo: the repo\n//  text: the text output from the git command (raw format)\n//\n// Returns assoc array of baked commits\nCommitStats.list_from_string = function(repo, text) {\n  var lines = text.trim().split('\\n');\n  var commits = {};\n  \n  while(lines.length > 0) {\n    // Fetch the commit id\n    var id = lines.shift().replace(/\\ +/g, ' ').split(\" \").pop();\n    // Remove some rows\n    lines.shift();\n    lines.shift();\n    lines.shift();\n    \n    // Process message lines\n    var message_lines = [];\n    // Process out the messages\n    while(lines.length > 0 && lines[0].match(/^ {4}/) || lines[0] == '') {\n      var string = lines.shift().substr(4);\n      message_lines.push(string);\n    }\n    \n    // Skip all empty lines\n    while(lines.length > 0 && lines[0] != null && lines[0] == '') lines.shift();\n    \n    var files = [];\n    // Process all the files\n    while(lines.length > 0 && lines[0].match(/^([-\\d]+)\\s+([-\\d]+)\\s+(.+)/)) {\n      var parts = lines.shift().replace(/\\ +/g, ' ').split(\" \");\n      var additions = parseInt(parts[0]);\n      var deletions = parseInt(parts[1]);\n      var filename = parts[2];\n      var total = additions + deletions;\n      files.push([filename, additions, deletions, total]);\n    }\n\n    // Skip all empty lines\n    while(lines.length > 0 && lines[0] != null && lines[0] == '') lines.shift();\n    // Add the commit to the list\n    commits[id] = new CommitStats(repo, id, files);\n  }\n  \n  // Return the commits\n  return commits;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}