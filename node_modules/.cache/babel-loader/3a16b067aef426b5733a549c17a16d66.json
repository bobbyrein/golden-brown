{"ast":null,"code":"var util = require('util'),\n  UserInfo = require('../user_info').UserInfo;\nvar GitTag = exports.GitTag = function (object, type, tag, tagger, message, repository) {\n  var _object = object,\n    _type = type,\n    _tag = tag,\n    _tagger = tagger,\n    _message = message,\n    _repository = repository;\n  Object.defineProperty(this, \"repository\", {\n    get: function () {\n      return _repository;\n    },\n    set: function (value) {\n      _repository = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"object\", {\n    get: function () {\n      return _object;\n    },\n    set: function (value) {\n      _object = value;\n    },\n    enumerable: true\n  });\n  // Object.defineProperty(this, \"type\", { get: function() { return _type; }, set: function(value) { _type = value; }, enumerable: true});    \n  Object.defineProperty(this, \"tag\", {\n    get: function () {\n      return _tag;\n    },\n    set: function (value) {\n      _tag = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"tagger\", {\n    get: function () {\n      return _tagger;\n    },\n    set: function (value) {\n      _tagger = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"message\", {\n    get: function () {\n      return _message;\n    },\n    set: function (value) {\n      _message = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"type\", {\n    get: function () {\n      return \"tag\";\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"raw_content\", {\n    get: function () {\n      return \"object \" + _object + \"\\ntype \" + _type + \"\\ntag \" + _tag + \"\\ntagger \" + _tagger + \" \" + _message + \"\\n\\n\";\n    },\n    enumerable: false\n  });\n};\nGitTag.from_raw = function (raw_object, repository) {\n  var parts = raw_object.content.split(\"\\n\\n\");\n  var headers = parts.shift();\n  var message = parts.join(/\\n\\n/);\n\n  // Further split the headers\n  headers = headers.split(/\\n/).map(function (header) {\n    var parts = header.split(/ /);\n    return [parts.shift(), parts.join(\" \")];\n  });\n\n  // Initialize base variables\n  var object = '',\n    type = '',\n    tag = '',\n    tagger = '';\n  headers.forEach(function (header) {\n    var key = header[0];\n    var value = header[1];\n    if (key == 'object') {\n      object = value;\n    } else if (key == 'type') {\n      if (['blob', 'tree', 'commit', 'tag'].indexOf(value) == -1) {\n        throw \"invalid type in tag\";\n      }\n      // Set the type\n      type = value;\n    } else if (key == 'tag') {\n      tag = value;\n    } else if (key == 'tagger') {\n      tagger = new UserInfo(value);\n    } else {\n      util.puts(\"unknown header '\" + key);\n    }\n  });\n\n  // If we have an illegal tag object\n  if (object == null || type == null || tag == null || tagger == null) {\n    throw \"incomplete raw tag object\";\n  }\n  // Return the tag\n  return new GitTag(object, type, tag, tagger, message, repository);\n};","map":{"version":3,"names":["util","require","UserInfo","GitTag","exports","object","type","tag","tagger","message","repository","_object","_type","_tag","_tagger","_message","_repository","Object","defineProperty","get","set","value","enumerable","from_raw","raw_object","parts","content","split","headers","shift","join","map","header","forEach","key","indexOf","puts"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/internal/git_tag.js"],"sourcesContent":["var util = require('util'),\n  UserInfo = require('../user_info').UserInfo;\n\nvar GitTag = exports.GitTag = function(object, type, tag, tagger, message, repository) {\n  var _object = object, _type = type, _tag = tag, _tagger = tagger, _message = message, _repository = repository;\n  \n  Object.defineProperty(this, \"repository\", { get: function() { return _repository; }, set: function(value) { _repository = value; }, enumerable: true});    \n  Object.defineProperty(this, \"object\", { get: function() { return _object; }, set: function(value) { _object = value; }, enumerable: true});    \n  // Object.defineProperty(this, \"type\", { get: function() { return _type; }, set: function(value) { _type = value; }, enumerable: true});    \n  Object.defineProperty(this, \"tag\", { get: function() { return _tag; }, set: function(value) { _tag = value; }, enumerable: true});    \n  Object.defineProperty(this, \"tagger\", { get: function() { return _tagger; }, set: function(value) { _tagger = value; }, enumerable: true});    \n  Object.defineProperty(this, \"message\", { get: function() { return _message; }, set: function(value) { _message = value; }, enumerable: true});    \n  Object.defineProperty(this, \"type\", { get: function() { return \"tag\"; }, enumerable: true});\n  \n  Object.defineProperty(this, \"raw_content\", { get: function() { \n      return \"object \" + _object + \"\\ntype \" + _type + \"\\ntag \" + _tag + \"\\ntagger \" + _tagger + \" \" + _message + \"\\n\\n\";\n    }, enumerable: false});\n}\n\nGitTag.from_raw = function(raw_object, repository) {\n  var parts = raw_object.content.split(\"\\n\\n\");\n  var headers = parts.shift();\n  var message = parts.join(/\\n\\n/);\n  \n  // Further split the headers\n  headers = headers.split(/\\n/).map(function(header) { \n    var parts = header.split(/ /);\n    return [parts.shift(), parts.join(\" \")];\n  })\n\n  // Initialize base variables\n  var object = '', type = '', tag = '', tagger = '';\n  \n  headers.forEach(function(header) {\n    var key = header[0];\n    var value = header[1];\n    \n    if(key == 'object') {\n      object = value;\n    } else if (key == 'type') {\n      if(['blob', 'tree', 'commit', 'tag'].indexOf(value) == -1) {\n        throw \"invalid type in tag\";\n      }\n      // Set the type\n      type = value;\n    } else if(key == 'tag') {\n      tag = value;\n    } else if(key == 'tagger') {\n      tagger = new UserInfo(value);\n    } else {\n      util.puts(\"unknown header '\" + key);\n    }\n  });\n  \n  // If we have an illegal tag object\n  if(object == null || type == null || tag == null || tagger == null) {\n    throw \"incomplete raw tag object\";\n  }\n  // Return the tag\n  return new GitTag(object, type, tag, tagger, message, repository);\n}\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}