{"ast":null,"code":"var Head = require('./head').Head,\n  Git = require('./git').Git,\n  Commit = require('./commit').Commit,\n  fs = require('fs'),\n  util = require('util'),\n  Tree = require('./tree').Tree,\n  Blob = require('./blob').Blob,\n  Head = require('./head').Head,\n  Tag = require('./tag').Tag,\n  Remote = require('./remote').Remote,\n  Blame = require('./blame').Blame,\n  CommitStats = require('./commit_stats').CommitStats,\n  Config = require('./config').Config,\n  Status = require('./status').Status,\n  GitIndex = require('./git_index').GitIndex;\nvar Repo = exports.Repo = function (path, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  var _path = path;\n  var _options = options;\n  var _working_directory = _path;\n  var _bare = true;\n  var _git = null;\n  var _config_object = null;\n  // Create git object\n  var self = this;\n  // Control access to internal variables\n  Object.defineProperty(this, \"path\", {\n    get: function () {\n      return _path;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"options\", {\n    get: function () {\n      return _options;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"git\", {\n    get: function () {\n      return _git;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"config_object\", {\n    get: function () {\n      return _config_object;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"bare\", {\n    get: function () {\n      return _bare;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"working_directory\", {\n    get: function () {\n      return _working_directory;\n    },\n    enumerable: true\n  });\n  try {\n    var epath = fs.realpathSync(path);\n    // Todo checks on paths\n    fs.stat(epath + \"/.git\", function (err, stat) {\n      if (!err) {\n        _working_directory = epath;\n        _path = epath + \"/.git\";\n        _bare = false;\n        _git = new Git(_path);\n        // Return the repo\n        callback(null, self);\n      } else {\n        // Check if it's a bare or already is pointing to the .git directory\n        fs.stat(epath, function (err, stat) {\n          if (!err && stat.isDirectory() && (epath.match(/\\.git$/) || options.is_bare)) {\n            _path = epath;\n            _bare = true;\n            _git = new Git(_path);\n            // Return the repo\n            callback(null, self);\n          } else if (!err && stat.isDirectory()) {\n            callback(\"invalid git repository\", null);\n          } else {\n            callback(\"no such path\", null);\n          }\n        });\n      }\n    });\n  } catch (err) {\n    callback(\"no such path\", null);\n  }\n};\n\n// Fetch the current head\nRepo.prototype.head = function (callback) {\n  Head.current(this, callback);\n};\n\n// Fetch the repo heads\nRepo.prototype.heads = function (callback) {\n  Head.find_all(this, callback);\n};\n\n// Returns the tag objects that are available in this repo\nRepo.prototype.tags = function (callback) {\n  Tag.find_all(this, callback);\n};\n\n// Fetch a set of commits\nRepo.prototype.commits = function (start, max_count, skip, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  start = args.length ? args.shift() : 'master';\n  max_count = args.length ? args.shift() : 10;\n  skip = args.length ? args.shift() : 0;\n  var options = {\n    max_count: max_count,\n    skip: skip\n  };\n  // Locate all commits with the specified options\n  Commit.find_all(this, start, options, callback);\n};\n\n// Fetch a specific commit\nRepo.prototype.commit = function (id, callback) {\n  var options = {\n    max_count: 1\n  };\n  // Locate commits and return the first one\n  Commit.find_all(this, id, options, function (err, commits) {\n    if (err) return callback(err, commits);\n    callback(null, commits[0]);\n  });\n};\n\n// Fetch the commit count based on a start reference\nRepo.prototype.commit_count = function (start, callback) {\n  start = start ? start : 'master';\n  Commit.count(this, start, callback);\n};\n\n// Fetch a repository tree\nRepo.prototype.tree = function (treeish, paths, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  // Set variables to default values\n  treeish = args.length ? args.shift() : 'master';\n  paths = args.length ? args.shift() : [];\n  // Construct the tree\n  Tree.construct(this, treeish, paths, callback);\n};\n\n// Create a blob object\nRepo.prototype.blob = function (id, callback) {\n  callback(null, new Blob(this, id));\n};\n\n// Initialize a bare git repository at the given path\n//  path: full path to the repo (traditionally ends with /<name>.git)\n//  options: is any additional options to the git init command\n//\n// Examples\n//  Repo.init_bare('/var/git/myrepo.git')\n//\n// Return repo (newly created repo)\nRepo.init_bare = function (path, git_options, repo_options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  // Set variables to default values\n  git_options = args.length ? args.shift() : {};\n  repo_options = repo_options ? repo_options : {};\n  // Set up bare option\n  git_options['bare'] = true;\n  repo_options['is_bare'] = true;\n  // Create a git object\n  var git = new Git(path);\n  // Create the directory\n  git.fs_mkdir('', function (err, result) {\n    if (err) return callback(err, result);\n    git.init(git_options, function (err, git) {\n      if (err) return callback(err, git);\n      new Repo(path, repo_options, callback);\n    });\n  });\n};\n\n// Fork a bare git repository from this repo\n//  path: is the full path of the new repo (traditionally ends with /<name>.git)\n//  options: is additional options to the git clone command (:bare and :shared are true by default)\n//\n// Return repo (newly created forked repo)\nRepo.prototype.fork_bare = function (path, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  var self = this;\n  // Set variables to default values\n  options = args.length ? args.shift() : {};\n  options['bare'] = true;\n  options['shared'] = true;\n  // Create a git object\n  var git = new Git(path);\n  git.fs_mkdir('', function (err, result) {\n    if (err) return callback(err, result);\n    self.git.clone(options, self.path, path, function (err, result) {\n      if (err) return callback(err, result);\n      new Repo(path, {\n        is_bare: true\n      }, callback);\n    });\n  });\n};\n\n// The diff from commit a to commit b, optionally restricted to the fiven file(s)\n//  a: the base commit\n//  b: the end commit\n//  paths: optional list of file paths on which to restrict the diff\nRepo.prototype.diff = function (a, b, paths, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 0); // XXX doesnt seem correct but it works for me\n  callback = args.pop();\n  b = args.length ? args.shift() : null;\n  paths = args.length ? args.shift() : [];\n  Commit.diff(this, a, b, paths, callback);\n};\n\n// The commit diff for the given commit\n//  commit: the commit name/id\n//\n// Returns array of diff objects\nRepo.prototype.commit_diff = function (commit, callback) {\n  Commit.diff(this, commit, callback);\n};\n\n// The list of alternates for this repo\n//\n// Returns array of string (pathnames of alternates)\nRepo.prototype.alternates = function (callback) {\n  var alternates_path = \"objects/info/alternates\";\n  var self = this;\n  this.git.fs_exist(alternates_path, function (err, result) {\n    if (err) return callback(err, result);\n    if (!result) return callback(null, []);\n    self.git.fs_read(alternates_path, function (err, data) {\n      if (err) return callback(err, data);\n      callback(null, data.trim().split(\"\\n\"));\n    });\n  });\n};\n\n// Sets the alternates\n//  alts: array of string paths representing the alternates\n//\n// Returns nothing\nRepo.prototype.set_alternates = function (alts, callback) {\n  var self = this;\n  var fail_msg = null;\n  // check all the entries\n  for (var i = 0; i < alts.length; i++) {\n    // Is sync underneath (to avoid to many files open)\n    this.git.fs_exist(alts[i], function (err, result) {\n      if (err) fail_msg = err;\n      if (!result) fail_msg = \"could not set alternates. alternate path \" + alts[i] + \" must exist\";\n    });\n  }\n\n  // If we have a fail message return\n  if (fail_msg) {\n    return callback(fail_msg, null);\n  }\n  // Otherwise let's set the alternate\n  if (alts.length == 0) {\n    this.git.fs_write('objects/info/alternates', '', callback);\n  } else {\n    this.git.fs_write('objects/info/alternates', alts.join(\"\\n\"), callback);\n  }\n};\n\n// The commit log for a treeish\n//\n// Returns array of commits\nRepo.prototype.log = function (commit, path, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  var self = this;\n  // Unpack variables\n  commit = args.length ? args.shift() : 'master';\n  path = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n  // Merge in extra parameters\n  options['pretty'] = \"raw\";\n  // var arg = path ? [commit, '--', path] : [commit];\n  // Extract the commits\n  this.git.log(commit, path, options, function (err, commits) {\n    if (err) return callback(err, commits);\n    callback(null, Commit.list_from_string(self, commits));\n  });\n};\n\n// Returns a list of commits that is in other_repo but not in self\n//\n// Returns array of commits\nRepo.prototype.commit_deltas_from = function (other_repo, reference, other_reference, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  var self = this;\n  // Unpack variables\n  reference = args.length ? args.shift() : 'master';\n  other_reference = args.length ? args.shift() : 'master';\n  // Let's fetch revlist\n  self.git.rev_list({}, reference, function (err, rev_text) {\n    if (err) return callback(err, rev_text);\n    var repo_refs = rev_text.trim().split(\"\\n\");\n    other_repo.git.rev_list({}, other_reference, function (err, other_rev_text) {\n      if (err) return callback(err, other_rev_text);\n      var other_repo_refs = other_rev_text.trim().split(\"\\n\");\n\n      // Subtract the references from other references\n      // create map for the array to avoid binary searches\n      var repo_ref_map = {};\n      repo_refs.forEach(function (line) {\n        repo_ref_map[line] = 1;\n      });\n\n      // Subtract one array from the other\n      var intersection = other_repo_refs.filter(function (line) {\n        return !repo_ref_map[line];\n      });\n      // Returned commits\n      var commits = [];\n      // Process all the intersected values\n      for (var i = 0; i < intersection.length; i++) {\n        var ref = intersection[i];\n        Commit.find_all(other_repo, ref, {\n          max_count: 1\n        }, function (err, ref_commits) {\n          commits.push(ref_commits[0]);\n        });\n      }\n\n      // Return the commits\n      callback(null, commits);\n    });\n  });\n};\n\n// An array of ref objects representing the refs in this repo\n//\n// Returns array of references (baked)\nRepo.prototype.refs = function (callback) {\n  var self = this;\n  // Let's fetch all the references for the head\n  Head.find_all(self, function (err, head_refs) {\n    if (err) return callback(err, head_refs);\n    // Fetch all the references for the tags\n    Tag.find_all(self, function (err, tag_refs) {\n      if (err) return callback(err, tag_refs);\n      // Fetch all the remote references\n      Remote.find_all(self, function (err, remote_refs) {\n        if (err) return callback(err, remote_refs);\n        // Return the complete list of references\n        callback(null, head_refs.concat(tag_refs, remote_refs));\n      });\n    });\n  });\n};\n\n// Chomp text removing end carriage returns\nvar chomp = function chomp(raw_text) {\n  return raw_text.replace(/(\\n|\\r)+$/, '');\n};\n\n// The project's description, Taken directly from /description file in the repo\n//\n// Return string\nRepo.prototype.description = function (callback) {\n  this.git.fs_read('description', function (err, data) {\n    if (err) return callback(err, data);\n    callback(null, chomp(data.toString()));\n  });\n};\n\n// Update a reference\n//  head: reference name\n//  commit_sha: commit to update\n//\n// Return commit_sha\nRepo.prototype.update_ref = function (head, commit_sha, callback) {\n  if (!commit_sha || commit_sha.length != 40) return callback('not a legal commit sha', null);\n  this.git.fs_write(\"refs/heads/\" + head, commit_sha, function (err, result) {\n    if (err) return callback(err, result);\n    callback(null, commit_sha);\n  });\n};\n\n// Get a specific head by name\n//  head_name: name of the head\n//\n// Return the head object\nRepo.prototype.get_head = function (head_name, callback) {\n  this.heads(function (err, heads) {\n    if (err) return callback(err, heads);\n    for (var i = 0; i < heads.length; i++) {\n      if (heads[i].name == head_name) return callback(null, heads[i]);\n    }\n    // No head found\n    callback(null, null);\n  });\n};\n\n// Return a blam object\n//  file: name of file we want to locate blame for\n//  commit: the commit sha for the blame\n//\n// Return blame object\nRepo.prototype.blame = function (file, commit, callback) {\n  new Blame(this, file, commit, callback);\n};\n\n// Returns a stats object about the commits for the repo\n//  start: start commit or name\n//  max_count: maximum count traversing\n//  skip: Number of commits to skip\nRepo.prototype.commit_stats = function (start, max_count, skip, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  var self = this;\n  // Unpack variables\n  start = args.length ? args.shift() : 'master';\n  max_count = args.length ? args.shift() : 10;\n  skip = args.length ? args.shift() : 0;\n\n  // Build options hash\n  var options = {\n    max_count: max_count,\n    skip: skip\n  };\n  // Fetch all the commit stats\n  CommitStats.find_all(self, start, options, callback);\n};\n\n// Commits current index\n//\n// Return true/false if commit worked\nRepo.prototype.commit_index = function (message, callback) {\n  this.git.commit({}, '-m' + message, callback);\n};\n\n// Commits all tracked and modified files\n//\n// Return true/false if commit worked\nRepo.prototype.commit_all = function (message, callback) {\n  this.git.commit({}, '-a', '-m' + message, callback);\n};\n\n// Fetch the config for the repo\n//\n// Returns assoc array with config options\nRepo.prototype.config = function (callback) {\n  if (this.config_object) return callback(null, this.config_object);\n  callback(null, new Config(this));\n};\n\n// Gotten from\nvar flatten = function (array) {\n  return array.reduce(function (a, b) {\n    return a.concat(b);\n  }, []);\n};\n\n// Adds files to the index\nRepo.prototype.add = function (files, callback) {\n  var flattened_files = null;\n  // Let's unpack the variables\n  var args = Array.prototype.slice.call(arguments, 0);\n  // Pop the callback\n  var callback = args.pop();\n  if (Array.isArray(files)) {\n    flattened_files = flatten(files);\n  } else if (args.length > 1) {\n    flattened_files = flatten(args);\n  } else {\n    flattened_files = [files];\n  }\n  // Add the parameters\n  flattened_files.unshift({});\n  flattened_files.push(callback);\n  // Execut add function against git repo\n  this.git.add.apply(this.git, flattened_files);\n};\n\n// Removes files to the index\nRepo.prototype.remove = function (files, callback) {\n  var flattened_files = null;\n  // Let's unpack the variables\n  var args = Array.prototype.slice.call(arguments, 0);\n  // Pop the callback\n  var callback = args.pop();\n  if (Array.isArray(files)) {\n    flattened_files = flatten(files);\n  } else if (args.length > 1) {\n    flattened_files = flatten(args);\n  } else {\n    flattened_files = [files];\n  }\n  // Add the parameters\n  flattened_files.unshift({});\n  flattened_files.push(callback);\n  // Execut add function against git repo\n  this.git.remove.apply(this.git, flattened_files);\n};\n\n// Fetch repo status\nRepo.prototype.status = function (callback) {\n  new Status(this, callback);\n};\n\n// Array off Remote objects representing the remote branches in\n// this repo\n//\n// Return array of remote references (baked)\nRepo.prototype.remotes = function (callback) {\n  Remote.find_all(this, callback);\n};\n\n// Validate if something is a head\n//\n// Return head\nRepo.prototype.is_head = function (head_name, callback) {\n  this.get_head(head_name, function (err, head) {\n    if (err) return callback(err, head);\n    var exists = head == null ? false : true;\n    callback(null, exists);\n  });\n};\nRepo.prototype.index = function (callback) {\n  callback(null, new GitIndex(this));\n};","map":{"version":3,"names":["Head","require","Git","Commit","fs","util","Tree","Blob","Tag","Remote","Blame","CommitStats","Config","Status","GitIndex","Repo","exports","path","options","callback","args","Array","prototype","slice","call","arguments","pop","length","shift","_path","_options","_working_directory","_bare","_git","_config_object","self","Object","defineProperty","get","enumerable","epath","realpathSync","stat","err","isDirectory","match","is_bare","head","current","heads","find_all","tags","commits","start","max_count","skip","commit","id","commit_count","count","tree","treeish","paths","construct","blob","init_bare","git_options","repo_options","git","fs_mkdir","result","init","fork_bare","clone","diff","a","b","commit_diff","alternates","alternates_path","fs_exist","fs_read","data","trim","split","set_alternates","alts","fail_msg","i","fs_write","join","log","list_from_string","commit_deltas_from","other_repo","reference","other_reference","rev_list","rev_text","repo_refs","other_rev_text","other_repo_refs","repo_ref_map","forEach","line","intersection","filter","ref","ref_commits","push","refs","head_refs","tag_refs","remote_refs","concat","chomp","raw_text","replace","description","toString","update_ref","commit_sha","get_head","head_name","name","blame","file","commit_stats","commit_index","message","commit_all","config","config_object","flatten","array","reduce","add","files","flattened_files","isArray","unshift","apply","remove","status","remotes","is_head","exists","index"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/repo.js"],"sourcesContent":["var Head = require('./head').Head,\n  Git = require('./git').Git,\n  Commit = require('./commit').Commit,\n  fs = require('fs'),\n  util = require('util'),\n  Tree = require('./tree').Tree,\n  Blob = require('./blob').Blob,\n  Head = require('./head').Head,\n  Tag = require('./tag').Tag,\n  Remote = require('./remote').Remote,\n  Blame = require('./blame').Blame,\n  CommitStats = require('./commit_stats').CommitStats,\n  Config = require('./config').Config,\n  Status = require('./status').Status,\n  GitIndex = require('./git_index').GitIndex;\n\nvar Repo = exports.Repo = function(path, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n\n  var _path = path;\n  var _options = options;\n  var _working_directory = _path;\n  var _bare = true;\n  var _git = null;\n  var _config_object = null;\n  // Create git object\n  var self = this;\n  // Control access to internal variables\n  Object.defineProperty(this, \"path\", { get: function() { return _path; }, enumerable: true});\n  Object.defineProperty(this, \"options\", { get: function() { return _options; }, enumerable: true});\n  Object.defineProperty(this, \"git\", { get: function() { return _git; }, enumerable: true});\n  Object.defineProperty(this, \"config_object\", { get: function() { return _config_object; }, enumerable: true});\n  Object.defineProperty(this, \"bare\", { get: function() { return _bare; }, enumerable: true});\n  Object.defineProperty(this, \"working_directory\", { get: function() { return _working_directory; }, enumerable: true});\n\n  try {\n    var epath = fs.realpathSync(path);\n    // Todo checks on paths\n    fs.stat(epath + \"/.git\", function(err, stat) {\n      if(!err) {\n        _working_directory = epath;\n        _path = epath + \"/.git\";\n        _bare = false;\n        _git = new Git(_path);\n        // Return the repo\n        callback(null, self);\n      } else {\n        // Check if it's a bare or already is pointing to the .git directory\n        fs.stat(epath, function(err, stat) {\n          if(!err && stat.isDirectory() && (epath.match(/\\.git$/) || options.is_bare)) {\n            _path = epath;\n            _bare = true;\n            _git = new Git(_path);\n            // Return the repo\n            callback(null, self);\n          } else if(!err && stat.isDirectory()) {\n            callback(\"invalid git repository\", null);\n          } else {\n            callback(\"no such path\", null);\n          }\n        });\n      }\n    });\n  } catch (err) {\n    callback(\"no such path\", null);\n  }\n}\n\n// Fetch the current head\nRepo.prototype.head = function(callback) {\n  Head.current(this, callback);\n}\n\n// Fetch the repo heads\nRepo.prototype.heads = function(callback) {\n  Head.find_all(this, callback);\n}\n\n// Returns the tag objects that are available in this repo\nRepo.prototype.tags = function(callback) {\n  Tag.find_all(this, callback);\n}\n\n// Fetch a set of commits\nRepo.prototype.commits = function(start, max_count, skip, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  start = args.length ? args.shift() : 'master';\n  max_count = args.length ? args.shift() : 10;\n  skip = args.length ? args.shift() : 0;\n\n  var options = {max_count:max_count, skip:skip}\n  // Locate all commits with the specified options\n  Commit.find_all(this, start, options, callback);\n}\n\n// Fetch a specific commit\nRepo.prototype.commit = function(id, callback) {\n  var options = {max_count:1};\n  // Locate commits and return the first one\n  Commit.find_all(this, id, options, function(err, commits) {\n    if(err) return callback(err, commits);\n    callback(null, commits[0]);\n  })\n}\n\n// Fetch the commit count based on a start reference\nRepo.prototype.commit_count = function(start, callback) {\n  start = start ? start : 'master';\n  Commit.count(this, start, callback);\n}\n\n// Fetch a repository tree\nRepo.prototype.tree = function(treeish, paths, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  // Set variables to default values\n  treeish = args.length ? args.shift() : 'master';\n  paths = args.length ? args.shift() : [];\n  // Construct the tree\n  Tree.construct(this, treeish, paths, callback);\n}\n\n// Create a blob object\nRepo.prototype.blob = function(id, callback) {\n  callback(null, new Blob(this, id));\n}\n\n// Initialize a bare git repository at the given path\n//  path: full path to the repo (traditionally ends with /<name>.git)\n//  options: is any additional options to the git init command\n//\n// Examples\n//  Repo.init_bare('/var/git/myrepo.git')\n//\n// Return repo (newly created repo)\nRepo.init_bare = function(path, git_options, repo_options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  // Set variables to default values\n  git_options = args.length ? args.shift() : {};\n  repo_options = repo_options ? repo_options : {};\n  // Set up bare option\n  git_options['bare'] = true;\n  repo_options['is_bare'] = true;\n  // Create a git object\n  var git = new Git(path);\n  // Create the directory\n  git.fs_mkdir('', function(err, result) {\n    if(err) return callback(err, result);\n    git.init(git_options, function(err, git) {\n      if(err) return callback(err, git);\n      new Repo(path, repo_options, callback);\n    })\n  })\n}\n\n// Fork a bare git repository from this repo\n//  path: is the full path of the new repo (traditionally ends with /<name>.git)\n//  options: is additional options to the git clone command (:bare and :shared are true by default)\n//\n// Return repo (newly created forked repo)\nRepo.prototype.fork_bare = function(path, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  var self = this;\n  // Set variables to default values\n  options = args.length ? args.shift() : {};\n  options['bare'] = true;\n  options['shared'] = true;\n  // Create a git object\n  var git = new Git(path);\n  git.fs_mkdir('', function(err, result) {\n    if(err) return callback(err, result);\n    self.git.clone(options, self.path, path, function(err, result) {\n      if(err) return callback(err, result);\n      new Repo(path, {is_bare:true}, callback);\n    })\n  })\n}\n\n// The diff from commit a to commit b, optionally restricted to the fiven file(s)\n//  a: the base commit\n//  b: the end commit\n//  paths: optional list of file paths on which to restrict the diff\nRepo.prototype.diff = function(a, b, paths, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 0); // XXX doesnt seem correct but it works for me\n  callback = args.pop();\n  b = args.length ? args.shift() : null;\n  paths = args.length ? args.shift() : [];\n\n  Commit.diff(this, a, b, paths, callback);\n}\n\n// The commit diff for the given commit\n//  commit: the commit name/id\n//\n// Returns array of diff objects\nRepo.prototype.commit_diff = function(commit, callback) {\n  Commit.diff(this, commit, callback);\n}\n\n// The list of alternates for this repo\n//\n// Returns array of string (pathnames of alternates)\nRepo.prototype.alternates = function(callback) {\n  var alternates_path = \"objects/info/alternates\";\n  var self = this;\n\n  this.git.fs_exist(alternates_path, function(err, result) {\n    if(err) return callback(err, result);\n    if(!result) return callback(null, []);\n    self.git.fs_read(alternates_path, function(err, data) {\n      if(err) return callback(err, data);\n      callback(null, data.trim().split(\"\\n\"));\n    })\n  });\n}\n\n// Sets the alternates\n//  alts: array of string paths representing the alternates\n//\n// Returns nothing\nRepo.prototype.set_alternates = function(alts, callback) {\n  var self = this;\n  var fail_msg = null;\n  // check all the entries\n  for(var i = 0; i < alts.length; i++) {\n\n    // Is sync underneath (to avoid to many files open)\n    this.git.fs_exist(alts[i], function(err, result) {\n      if(err) fail_msg = err;\n      if(!result) fail_msg = \"could not set alternates. alternate path \" + alts[i] + \" must exist\";\n    });\n  }\n\n  // If we have a fail message return\n  if(fail_msg) { return callback(fail_msg, null); }\n  // Otherwise let's set the alternate\n  if(alts.length == 0) {\n    this.git.fs_write('objects/info/alternates', '', callback);\n  } else {\n    this.git.fs_write('objects/info/alternates', alts.join(\"\\n\"), callback);\n  }\n}\n\n// The commit log for a treeish\n//\n// Returns array of commits\nRepo.prototype.log = function(commit, path, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  var self = this;\n  // Unpack variables\n  commit = args.length ? args.shift() : 'master';\n  path = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n  // Merge in extra parameters\n  options['pretty'] = \"raw\";\n  // var arg = path ? [commit, '--', path] : [commit];\n  // Extract the commits\n  this.git.log(commit, path, options, function(err, commits) {\n    if(err) return callback(err, commits);\n    callback(null, Commit.list_from_string(self, commits))\n  });\n}\n\n// Returns a list of commits that is in other_repo but not in self\n//\n// Returns array of commits\nRepo.prototype.commit_deltas_from = function(other_repo, reference, other_reference, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  var self = this;\n  // Unpack variables\n  reference = args.length ? args.shift() : 'master';\n  other_reference = args.length ? args.shift() : 'master';\n  // Let's fetch revlist\n  self.git.rev_list({}, reference, function(err, rev_text) {\n    if(err) return callback(err, rev_text);\n    var repo_refs = rev_text.trim().split(\"\\n\");\n\n    other_repo.git.rev_list({}, other_reference, function(err, other_rev_text) {\n      if(err) return callback(err, other_rev_text);\n      var other_repo_refs = other_rev_text.trim().split(\"\\n\");\n\n      // Subtract the references from other references\n      // create map for the array to avoid binary searches\n      var repo_ref_map = {};\n      repo_refs.forEach(function(line) {\n        repo_ref_map[line] = 1;\n      });\n\n      // Subtract one array from the other\n      var intersection = other_repo_refs.filter(function(line) { return !repo_ref_map[line]; })\n      // Returned commits\n      var commits = [];\n      // Process all the intersected values\n      for(var i = 0; i < intersection.length; i++) {\n        var ref = intersection[i];\n        Commit.find_all(other_repo, ref, {max_count:1}, function(err, ref_commits) {\n          commits.push(ref_commits[0]);\n        })\n      }\n\n      // Return the commits\n      callback(null, commits);\n    })\n  });\n}\n\n// An array of ref objects representing the refs in this repo\n//\n// Returns array of references (baked)\nRepo.prototype.refs = function(callback) {\n  var self = this;\n  // Let's fetch all the references for the head\n  Head.find_all(self, function(err, head_refs) {\n    if(err) return callback(err, head_refs);\n    // Fetch all the references for the tags\n    Tag.find_all(self, function(err, tag_refs) {\n      if(err) return callback(err, tag_refs);\n      // Fetch all the remote references\n      Remote.find_all(self, function(err, remote_refs) {\n        if(err) return callback(err, remote_refs);\n        // Return the complete list of references\n        callback(null, head_refs.concat(tag_refs, remote_refs));\n      });\n    });\n  });\n}\n\n// Chomp text removing end carriage returns\nvar chomp = function chomp(raw_text) {\n  return raw_text.replace(/(\\n|\\r)+$/, '');\n}\n\n// The project's description, Taken directly from /description file in the repo\n//\n// Return string\nRepo.prototype.description = function(callback) {\n  this.git.fs_read('description', function(err, data) {\n    if(err) return callback(err, data);\n    callback(null, chomp(data.toString()));\n  });\n}\n\n// Update a reference\n//  head: reference name\n//  commit_sha: commit to update\n//\n// Return commit_sha\nRepo.prototype.update_ref = function(head, commit_sha, callback) {\n  if(!commit_sha || commit_sha.length != 40) return callback('not a legal commit sha', null);\n  this.git.fs_write(\"refs/heads/\" + head, commit_sha, function(err, result) {\n    if(err) return callback(err, result);\n    callback(null, commit_sha);\n  });\n}\n\n// Get a specific head by name\n//  head_name: name of the head\n//\n// Return the head object\nRepo.prototype.get_head = function(head_name, callback) {\n  this.heads(function(err, heads) {\n    if(err) return callback(err, heads);\n    for(var i = 0; i < heads.length; i++) {\n      if(heads[i].name == head_name) return callback(null, heads[i])\n    }\n    // No head found\n    callback(null, null);\n  });\n}\n\n// Return a blam object\n//  file: name of file we want to locate blame for\n//  commit: the commit sha for the blame\n//\n// Return blame object\nRepo.prototype.blame = function(file, commit, callback) {\n  new Blame(this, file, commit, callback);\n}\n\n// Returns a stats object about the commits for the repo\n//  start: start commit or name\n//  max_count: maximum count traversing\n//  skip: Number of commits to skip\nRepo.prototype.commit_stats = function(start, max_count, skip, callback) {\n  var args = Array.prototype.slice.call(arguments, 0);\n  callback = args.pop();\n  var self = this;\n  // Unpack variables\n  start = args.length ? args.shift() : 'master';\n  max_count = args.length ? args.shift() : 10;\n  skip = args.length ? args.shift() : 0;\n\n  // Build options hash\n  var options = {max_count:max_count, skip:skip};\n  // Fetch all the commit stats\n  CommitStats.find_all(self, start, options, callback);\n}\n\n// Commits current index\n//\n// Return true/false if commit worked\nRepo.prototype.commit_index = function(message, callback) {\n  this.git.commit({}, '-m' + message, callback);\n}\n\n// Commits all tracked and modified files\n//\n// Return true/false if commit worked\nRepo.prototype.commit_all = function(message, callback) {\n  this.git.commit({}, '-a', '-m' + message, callback);\n}\n\n// Fetch the config for the repo\n//\n// Returns assoc array with config options\nRepo.prototype.config = function(callback) {\n  if(this.config_object) return callback(null, this.config_object);\n  callback(null, new Config(this));\n}\n\n// Gotten from\nvar flatten = function(array) {\n  return array.reduce(function(a,b) {\n    return a.concat(b);\n  }, []);\n}\n\n// Adds files to the index\nRepo.prototype.add = function(files, callback) {\n  var flattened_files = null;\n  // Let's unpack the variables\n  var args = Array.prototype.slice.call(arguments, 0);\n  // Pop the callback\n  var callback = args.pop();\n\n  if(Array.isArray(files)) {\n    flattened_files = flatten(files);\n  } else if(args.length > 1){\n    flattened_files = flatten(args);\n  } else {\n    flattened_files = [files];\n  }\n  // Add the parameters\n  flattened_files.unshift({});\n  flattened_files.push(callback);\n  // Execut add function against git repo\n  this.git.add.apply(this.git, flattened_files);\n}\n\n// Removes files to the index\nRepo.prototype.remove = function(files, callback) {\n  var flattened_files = null;\n  // Let's unpack the variables\n  var args = Array.prototype.slice.call(arguments, 0);\n  // Pop the callback\n  var callback = args.pop();\n\n  if(Array.isArray(files)) {\n    flattened_files = flatten(files);\n  } else if(args.length > 1){\n    flattened_files = flatten(args);\n  } else {\n    flattened_files = [files];\n  }\n  // Add the parameters\n  flattened_files.unshift({});\n  flattened_files.push(callback);\n  // Execut add function against git repo\n  this.git.remove.apply(this.git, flattened_files);\n}\n\n// Fetch repo status\nRepo.prototype.status = function(callback) {\n  new Status(this, callback);\n}\n\n// Array off Remote objects representing the remote branches in\n// this repo\n//\n// Return array of remote references (baked)\nRepo.prototype.remotes = function(callback) {\n  Remote.find_all(this, callback);\n}\n\n// Validate if something is a head\n//\n// Return head\nRepo.prototype.is_head = function(head_name, callback) {\n  this.get_head(head_name, function(err, head) {\n    if(err) return callback(err, head);\n    var exists = head == null ? false : true;\n    callback(null, exists);\n  });\n}\n\nRepo.prototype.index = function(callback) {\n  callback(null, new GitIndex(this));\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}