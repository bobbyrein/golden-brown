{"ast":null,"code":"/**\nsprintf() for JavaScript 0.6\n\nCopyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of sprintf() for JavaScript nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Alexandru Marasteanu BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nChangelog:\n2007.04.03 - 0.1:\n - initial release\n2007.09.11 - 0.2:\n - feature: added argument swapping\n2007.09.17 - 0.3:\n - bug fix: no longer throws exception on empty paramenters (Hans Pufal)\n2007.10.21 - 0.4:\n - unit test and patch (David Baird)\n2010.05.09 - 0.5:\n - bug fix: 0 is now preceeded with a + sign\n - bug fix: the sign was not at the right position on padded results (Kamal Abdali)\n - switched from GPL to BSD license\n2010.05.22 - 0.6:\n - reverted to 0.4 and fixed the bug regarding the sign of the number 0\n Note:\n Thanks to Raphael Pigulla <raph (at] n3rd [dot) org> (http://www.n3rd.org/)\n who warned me about a bug in 0.5, I discovered that the last update was\n a regress. I appologize for that.\n**/\n\nvar StringUtil = exports.StringUtil = function () {};\nStringUtil.str_repeat = str_repeat;\nStringUtil.sprintf = sprintf;\nfunction str_repeat(i, m) {\n  for (var o = []; m > 0; o[--m] = i);\n  return o.join('');\n}\nfunction sprintf() {\n  var i = 0,\n    a,\n    f = arguments[i++],\n    o = [],\n    m,\n    p,\n    c,\n    x,\n    s = '';\n  while (f) {\n    if (m = /^[^\\x25]+/.exec(f)) {\n      o.push(m[0]);\n    } else if (m = /^\\x25{2}/.exec(f)) {\n      o.push('%');\n    } else if (m = /^\\x25(?:(\\d+)\\$)?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(f)) {\n      if ((a = arguments[m[1] || i++]) == null || a == undefined) {\n        throw 'Too few arguments.';\n      }\n      if (/[^s]/.test(m[7]) && typeof a != 'number') {\n        throw 'Expecting number but found ' + typeof a;\n      }\n      switch (m[7]) {\n        case 'b':\n          a = a.toString(2);\n          break;\n        case 'c':\n          a = String.fromCharCode(a);\n          break;\n        case 'd':\n          a = parseInt(a);\n          break;\n        case 'e':\n          a = m[6] ? a.toExponential(m[6]) : a.toExponential();\n          break;\n        case 'f':\n          a = m[6] ? parseFloat(a).toFixed(m[6]) : parseFloat(a);\n          break;\n        case 'o':\n          a = a.toString(8);\n          break;\n        case 's':\n          a = (a = String(a)) && m[6] ? a.substring(0, m[6]) : a;\n          break;\n        case 'u':\n          a = Math.abs(a);\n          break;\n        case 'x':\n          a = a.toString(16);\n          break;\n        case 'X':\n          a = a.toString(16).toUpperCase();\n          break;\n      }\n      a = /[def]/.test(m[7]) && m[2] && a >= 0 ? '+' + a : a;\n      c = m[3] ? m[3] == '0' ? '0' : m[3].charAt(1) : ' ';\n      x = m[5] - String(a).length - s.length;\n      p = m[5] ? str_repeat(c, x) : '';\n      o.push(s + (m[4] ? a + p : p + a));\n    } else {\n      throw 'Huh ?!';\n    }\n    f = f.substring(m[0].length);\n  }\n  return o.join('');\n}","map":{"version":3,"names":["StringUtil","exports","str_repeat","sprintf","i","m","o","join","a","f","arguments","p","c","x","s","exec","push","undefined","test","toString","String","fromCharCode","parseInt","toExponential","parseFloat","toFixed","substring","Math","abs","toUpperCase","charAt","length"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/sprintf/sprintf.js"],"sourcesContent":["/**\nsprintf() for JavaScript 0.6\n\nCopyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * Neither the name of sprintf() for JavaScript nor the\n      names of its contributors may be used to endorse or promote products\n      derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL Alexandru Marasteanu BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\nChangelog:\n2007.04.03 - 0.1:\n - initial release\n2007.09.11 - 0.2:\n - feature: added argument swapping\n2007.09.17 - 0.3:\n - bug fix: no longer throws exception on empty paramenters (Hans Pufal)\n2007.10.21 - 0.4:\n - unit test and patch (David Baird)\n2010.05.09 - 0.5:\n - bug fix: 0 is now preceeded with a + sign\n - bug fix: the sign was not at the right position on padded results (Kamal Abdali)\n - switched from GPL to BSD license\n2010.05.22 - 0.6:\n - reverted to 0.4 and fixed the bug regarding the sign of the number 0\n Note:\n Thanks to Raphael Pigulla <raph (at] n3rd [dot) org> (http://www.n3rd.org/)\n who warned me about a bug in 0.5, I discovered that the last update was\n a regress. I appologize for that.\n**/\n\nvar StringUtil = exports.StringUtil = function() {};\nStringUtil.str_repeat = str_repeat;\nStringUtil.sprintf = sprintf;\n\nfunction str_repeat(i, m) {\n\tfor (var o = []; m > 0; o[--m] = i);\n\treturn o.join('');\n}\n\nfunction sprintf() {\n\tvar i = 0, a, f = arguments[i++], o = [], m, p, c, x, s = '';\n\twhile (f) {\n\t\tif (m = /^[^\\x25]+/.exec(f)) {\n\t\t\to.push(m[0]);\n\t\t}\n\t\telse if (m = /^\\x25{2}/.exec(f)) {\n\t\t\to.push('%');\n\t\t}\n\t\telse if (m = /^\\x25(?:(\\d+)\\$)?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-fosuxX])/.exec(f)) {\n\t\t\tif (((a = arguments[m[1] || i++]) == null) || (a == undefined)) {\n\t\t\t\tthrow('Too few arguments.');\n\t\t\t}\n\t\t\tif (/[^s]/.test(m[7]) && (typeof(a) != 'number')) {\n\t\t\t\tthrow('Expecting number but found ' + typeof(a));\n\t\t\t}\n\t\t\tswitch (m[7]) {\n\t\t\t\tcase 'b': a = a.toString(2); break;\n\t\t\t\tcase 'c': a = String.fromCharCode(a); break;\n\t\t\t\tcase 'd': a = parseInt(a); break;\n\t\t\t\tcase 'e': a = m[6] ? a.toExponential(m[6]) : a.toExponential(); break;\n\t\t\t\tcase 'f': a = m[6] ? parseFloat(a).toFixed(m[6]) : parseFloat(a); break;\n\t\t\t\tcase 'o': a = a.toString(8); break;\n\t\t\t\tcase 's': a = ((a = String(a)) && m[6] ? a.substring(0, m[6]) : a); break;\n\t\t\t\tcase 'u': a = Math.abs(a); break;\n\t\t\t\tcase 'x': a = a.toString(16); break;\n\t\t\t\tcase 'X': a = a.toString(16).toUpperCase(); break;\n\t\t\t}\n\t\t\ta = (/[def]/.test(m[7]) && m[2] && a >= 0 ? '+'+ a : a);\n\t\t\tc = m[3] ? m[3] == '0' ? '0' : m[3].charAt(1) : ' ';\n\t\t\tx = m[5] - String(a).length - s.length;\n\t\t\tp = m[5] ? str_repeat(c, x) : '';\n\t\t\to.push(s + (m[4] ? a + p : p + a));\n\t\t}\n\t\telse {\n\t\t\tthrow('Huh ?!');\n\t\t}\n\t\tf = f.substring(m[0].length);\n\t}\n\treturn o.join('');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}