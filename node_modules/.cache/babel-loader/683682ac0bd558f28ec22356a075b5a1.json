{"ast":null,"code":"var util = require('util'),\n  Submodule = require('./sub_module').Submodule,\n  Blob = require('./blob').Blob;\nvar Tree = exports.Tree = function (repo, id, mode, name, contents) {\n  var _repo = repo,\n    _id = id,\n    _contents = contents,\n    _mode = mode,\n    _name = name;\n\n  // Internal properties\n  Object.defineProperty(this, \"repo\", {\n    get: function () {\n      return _repo;\n    },\n    set: function (value) {\n      _repo = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"id\", {\n    get: function () {\n      return _id;\n    },\n    set: function (value) {\n      _id = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"mode\", {\n    get: function () {\n      return _mode;\n    },\n    set: function (value) {\n      _mode = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"name\", {\n    get: function () {\n      return _name;\n    },\n    set: function (value) {\n      _name = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"contents\", {\n    get: function () {\n      _contents = lazy_reader(_repo, _id, 'contents', _contents);\n      return _contents;\n    },\n    set: function (value) {\n      _contents = value;\n    },\n    enumerable: true\n  });\n\n  // Return the base name\n  Object.defineProperty(this, \"basename\", {\n    get: function () {\n      if (_name) {\n        var parts = _name.split(\"/\");\n        return parts[parts.length - 1];\n      } else {\n        return null;\n      }\n    },\n    enumerable: false\n  });\n};\nvar lazy_reader = function (repo, id, type, variable) {\n  if (variable != null) return variable;\n  // Control the flow\n  var done = false;\n  var value = [];\n\n  // Fetch the content\n  repo.git.ls_tree(id, [], {}, function (err, text) {\n    if (err) return done = true;\n    // Split the output\n    var lines = text.split(\"\\n\");\n    // Create objects for all the entries\n    for (var i = 0; i < lines.length; i++) {\n      Tree.content_from_string(repo, lines[i], function (err, entry) {\n        value.push(entry);\n      });\n    }\n    done = true;\n  });\n  while (!done) {}\n  ;\n  return value ? value : '';\n};\n\n// Construct the contents of the tree\n// repo: the current rep\n// treeish: the reference\n// paths: optional array of directory paths to restrict the tree\nTree.construct = function (repo, treeish, paths, callback) {\n  // Set the path to the default if it's null\n  paths = paths ? paths : [];\n  // Run the ls_tree command\n  repo.git.ls_tree(treeish, paths, function (err, output) {\n    if (err) return callback(err, output);\n    construct_initialize(repo, treeish, output, callback);\n  });\n};\n\n// Create a new instance of the tree class\nvar construct_initialize = function (repo, id, text, callback) {\n  // Create a tree object\n  var tree = new Tree(repo, id, null, null, []);\n  var lines = text.trim().split(\"\\n\");\n  if (lines.length == 1 && lines[0] == '') lines = [];\n  // Fetch all the lines\n  for (var i = 0; i < lines.length; i++) {\n    Tree.content_from_string(repo, lines[i], function (err, entry) {\n      if (err) return callback(err, entry);\n      tree.contents.push(entry);\n    });\n  }\n\n  // Remove all the null entries\n  tree.contents = tree.contents.filter(function (entry) {\n    return entry ? true : false;\n  });\n  // Return the object\n  callback(null, tree);\n};\nTree.content_from_string = function (repo, text, callback) {\n  // Split the text into parts and extract the variables\n  var parts = text.replace(/\\t/, ' ').split(\" \");\n  var mode = parts[0];\n  var type = parts[1];\n  var id = parts[2];\n  var name = parts[3];\n  if (type == \"tree\") {\n    callback(null, new Tree(repo, id, mode, name));\n  } else if (type == \"blob\") {\n    callback(null, new Blob(repo, id, mode, name));\n  } else if (type == \"link\") {\n    callback(null, new Blob(repo, id, mode, name));\n  } else if (type == \"commit\") {\n    callback(null, new Submodule(repo, id, mode, name));\n  } else {\n    callback(\"invalid type: \" + type, null);\n  }\n};\n\n// Find the named object in this tree's contents\n//\n// Examples\n//   Repo.new('/path/to/grit').tree/'lib'\n//   // => //<Grit::Tree \"6cc23ee138be09ff8c28b07162720018b244e95e\">\n//   Repo.new('/path/to/grit').tree/'README.txt'\n//   // => //<Grit::Blob \"8b1e02c0fb554eed2ce2ef737a68bb369d7527df\">\n//\n// Returns Grit::Blob or Grit::Tree or nil if not found\nTree.prototype.find = function (file) {\n  var self = this;\n  if (file.match(/\\//)) {\n    var paths = file.split('/');\n    paths.length > 0 && paths[paths.length - 1] == '' ? paths.pop() : null;\n    return paths.map(function (x) {\n      return self && (self = self.find(x));\n    });\n  } else {\n    var results = self.contents.filter(function (c) {\n      return c.name == file;\n    });\n    return results.length == 1 ? results[0] : null;\n  }\n};\nTree.create = function (repo, attributes, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  attributes = args.length ? args.shift() : {};\n  var tree = new Tree(repo);\n  for (var name in attributes) {\n    tree[name] = attributes[name];\n  }\n  callback(null, tree);\n};","map":{"version":3,"names":["util","require","Submodule","Blob","Tree","exports","repo","id","mode","name","contents","_repo","_id","_contents","_mode","_name","Object","defineProperty","get","set","value","enumerable","lazy_reader","parts","split","length","type","variable","done","git","ls_tree","err","text","lines","i","content_from_string","entry","push","construct","treeish","paths","callback","output","construct_initialize","tree","trim","filter","replace","prototype","find","file","self","match","pop","map","x","results","c","create","attributes","args","Array","slice","call","arguments","shift"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/tree.js"],"sourcesContent":["var util = require('util'),\n  Submodule = require('./sub_module').Submodule,\n  Blob = require('./blob').Blob;\n\nvar Tree = exports.Tree = function(repo, id, mode, name, contents) {\n  var _repo = repo, _id = id, _contents = contents, _mode = mode, _name = name;\n\n  // Internal properties\n  Object.defineProperty(this, \"repo\", { get: function() { return _repo; }, set: function(value) { _repo = value; }, enumerable: true});    \n  Object.defineProperty(this, \"id\", { get: function() { return _id; }, set: function(value) { _id = value; }, enumerable: true});    \n  Object.defineProperty(this, \"mode\", { get: function() { return _mode; }, set: function(value) { _mode = value; }, enumerable: true});    \n  Object.defineProperty(this, \"name\", { get: function() { return _name; }, set: function(value) { _name = value; }, enumerable: true});    \n  Object.defineProperty(this, \"contents\", { get: function() { \n      _contents = lazy_reader(_repo, _id, 'contents', _contents); \n      return _contents;\n    }, set: function(value) { _contents = value; }, enumerable: true});\n    \n  // Return the base name\n  Object.defineProperty(this, \"basename\", { get: function() { \n      if(_name) {\n        var parts = _name.split(\"/\");\n        return parts[parts.length - 1];\n      } else {\n        return null;\n      }\n    }, enumerable: false});      \n}\n\nvar lazy_reader = function(repo, id, type, variable) {\n  if(variable != null) return variable;\n  // Control the flow\n  var done = false;\n  var value = [];\n  \n  // Fetch the content\n  repo.git.ls_tree(id, [], {}, function(err, text) {\n    if(err) return done = true;\n    // Split the output\n    var lines = text.split(\"\\n\");\n    // Create objects for all the entries\n    for(var i = 0; i < lines.length; i++) {\n      Tree.content_from_string(repo, lines[i], function(err, entry) {\n        value.push(entry);\n      });        \n    }  \n        \n    done = true;\n  })\n  \n  while(!done) {};\n  return value ? value : '';  \n}\n\n// Construct the contents of the tree\n// repo: the current rep\n// treeish: the reference\n// paths: optional array of directory paths to restrict the tree\nTree.construct = function(repo, treeish, paths, callback) {\n  // Set the path to the default if it's null\n  paths = paths ? paths : [];  \n  // Run the ls_tree command\n  repo.git.ls_tree(treeish, paths, function(err, output) {    \n    if(err) return callback(err, output);\n    construct_initialize(repo, treeish, output, callback);\n  });  \n}\n\n// Create a new instance of the tree class\nvar construct_initialize = function(repo, id, text, callback) {\n  // Create a tree object\n  var tree = new Tree(repo, id, null, null, []);  \n  var lines = text.trim().split(\"\\n\");\n  if(lines.length == 1 && lines[0] == '') lines = [];  \n  // Fetch all the lines\n  for(var i = 0; i < lines.length; i++) {\n    Tree.content_from_string(repo, lines[i], function(err, entry) {\n      if(err) return callback(err, entry);\n      tree.contents.push(entry);      \n    });        \n  }\n\n  // Remove all the null entries\n  tree.contents = tree.contents.filter(function(entry) { return entry ? true : false; });  \n  // Return the object\n  callback(null, tree);\n}\n\nTree.content_from_string = function(repo, text, callback) {\n  // Split the text into parts and extract the variables\n  var parts = text.replace(/\\t/, ' ').split(\" \");\n  var mode = parts[0];\n  var type = parts[1];\n  var id = parts[2];\n  var name = parts[3];\n  \n  if(type == \"tree\") {\n    callback(null, new Tree(repo, id, mode, name));\n  } else if(type == \"blob\") {\n    callback(null, new Blob(repo, id, mode, name));\n  } else if(type == \"link\") {\n    callback(null, new Blob(repo, id, mode, name));\n  } else if(type == \"commit\") {\n    callback(null, new Submodule(repo, id, mode, name));\n  } else {\n    callback(\"invalid type: \" + type, null);\n  } \n}\n\n// Find the named object in this tree's contents\n//\n// Examples\n//   Repo.new('/path/to/grit').tree/'lib'\n//   // => //<Grit::Tree \"6cc23ee138be09ff8c28b07162720018b244e95e\">\n//   Repo.new('/path/to/grit').tree/'README.txt'\n//   // => //<Grit::Blob \"8b1e02c0fb554eed2ce2ef737a68bb369d7527df\">\n//\n// Returns Grit::Blob or Grit::Tree or nil if not found\nTree.prototype.find = function(file) {\n  var self = this;\n  \n  if(file.match(/\\//)) {\n    var paths = file.split('/');\n    paths.length > 0 && paths[paths.length - 1] == '' ? paths.pop() : null;\n    return paths.map(function(x) {\n      return self && (self = self.find(x));\n    });\n  } else {\n    var results = self.contents.filter(function(c) {\n      return c.name == file;\n    })   \n    \n    return results.length == 1 ? results[0] : null;\n  }\n}\n\nTree.create = function(repo, attributes, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  attributes = args.length ? args.shift() : {};\n  \n  var tree = new Tree(repo);\n  for(var name in attributes) {\n    tree[name] = attributes[name];\n  }\n  \n  callback(null, tree);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}