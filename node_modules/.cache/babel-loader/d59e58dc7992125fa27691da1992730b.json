{"ast":null,"code":"var util = require('util'),\n  Commit = require('./commit').Commit;\nvar Head = exports.Head = function (name, commit) {\n  var _name = name;\n  var _commit = commit;\n  // Define the properties\n  Object.defineProperty(this, \"name\", {\n    get: function () {\n      return _name;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"commit\", {\n    get: function () {\n      return _commit;\n    },\n    enumerable: true\n  });\n};\nvar prefix = function (name) {\n  return \"refs/\" + name + \"s\";\n};\nHead.current = function (repo, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  // Let's read the the head\n  repo.git.fs_read('HEAD', function (err, head) {\n    if (err) return callback(err, head);\n    var matches = head.toString().match(/ref: refs\\/heads\\/(.*)/);\n    if (!matches) return callback(null, null);\n    // we have a correct reference, create a new head reference\n    repo.git.rev_parse(options, 'HEAD', 0, function (err, rev) {\n      if (err) return callback(err, rev);\n      return callback(null, new Head(matches[1], rev));\n    });\n  });\n};\nHead.find_all = function (repo, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  // Let's fetch the references\n  repo.git.refs({}, prefix('head'), function (err, refs) {\n    if (err) return callback(err, refs);\n    // Map the references\n    var mapped_refs = refs.split(/\\n/).map(function (ref) {\n      // Fetch the name and id for the reference\n      var split_reference = ref.split(/ /);\n      var name = split_reference[0];\n      var id = split_reference[1];\n\n      // Create a commit object wit the id\n      var commit = new Commit(repo, id);\n      // Wrap the commit object in a head object and return mapped object\n      return new Head(name, commit);\n    });\n    callback(null, mapped_refs);\n  });\n};","map":{"version":3,"names":["util","require","Commit","Head","exports","name","commit","_name","_commit","Object","defineProperty","get","enumerable","prefix","current","repo","options","callback","args","Array","prototype","slice","call","arguments","pop","length","shift","git","fs_read","err","head","matches","toString","match","rev_parse","rev","find_all","refs","mapped_refs","split","map","ref","split_reference","id"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/head.js"],"sourcesContent":["var util = require('util'),\n  Commit = require('./commit').Commit;\n\nvar Head = exports.Head = function(name, commit) {\n  var _name = name;\n  var _commit = commit;  \n  // Define the properties\n  Object.defineProperty(this, \"name\", { get: function() { return _name; }, enumerable: true});\n  Object.defineProperty(this, \"commit\", { get: function() { return _commit; }, enumerable: true});\n}\n\nvar prefix = function(name) { \n    return \"refs/\" + name + \"s\"; \n  }\n  \nHead.current = function(repo, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};  \n  // Let's read the the head\n  repo.git.fs_read('HEAD', function(err, head) {\n    if(err) return callback(err, head);\n    var matches = head.toString().match(/ref: refs\\/heads\\/(.*)/);\n    if(!matches) return callback(null, null);\n    // we have a correct reference, create a new head reference\n    repo.git.rev_parse(options, 'HEAD', 0, function(err, rev) {\n      if(err) return callback(err, rev);\n      return callback(null, new Head(matches[1], rev));\n    });\n  });\n}\n\nHead.find_all = function(repo, options, callback) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  options = args.length ? args.shift() : {};\n  // Let's fetch the references\n  repo.git.refs({}, prefix('head'), function(err, refs) {    \n    if(err) return callback(err, refs);\n    // Map the references\n    var mapped_refs = refs.split(/\\n/).map(function(ref) {\n      // Fetch the name and id for the reference\n      var split_reference = ref.split(/ /);\n      var name = split_reference[0];\n      var id = split_reference[1];\n      \n      // Create a commit object wit the id\n      var commit = new Commit(repo, id);\n      // Wrap the commit object in a head object and return mapped object\n      return new Head(name, commit);\n    })    \n    callback(null, mapped_refs);\n  })\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}