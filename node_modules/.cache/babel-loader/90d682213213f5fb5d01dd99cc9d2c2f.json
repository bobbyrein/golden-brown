{"ast":null,"code":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore';\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBTRjZqtESaTlbLkB-2xRjmnx7DJE75Qeo\",\n  authDomain: \"crown-clothing-db-edfaf.firebaseapp.com\",\n  projectId: \"crown-clothing-db-edfaf\",\n  storageBucket: \"crown-clothing-db-edfaf.appspot.com\",\n  messagingSenderId: \"536120961604\",\n  appId: \"1:536120961604:web:336d89c430dc62193baa11\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async userAuth => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  // if user data does not exist\n  if (!userSnapshot.exists()) {\n    // create / set the document with the data from userAut in my collection\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt\n      });\n    } catch (error) {\n      console.log('error createing the user', error.message);\n    }\n  }\n  // if user data exists, return userDocRef\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) {\n    return;\n  }\n  return await createUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","createUserDocumentFromAuth","userAuth","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password"],"sources":["/Users/bobbyrein/react-course/golden-brown/src/utils/firebase/firebase.utils.js"],"sourcesContent":["import { initializeApp } from 'firebase/app';\nimport {\n    getAuth,\n    signInWithRedirect,\n    signInWithPopup,\n    GoogleAuthProvider,\n    createUserWithEmailAndPassword,\n} from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from 'firebase/firestore'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBTRjZqtESaTlbLkB-2xRjmnx7DJE75Qeo\",\n    authDomain: \"crown-clothing-db-edfaf.firebaseapp.com\",\n    projectId: \"crown-clothing-db-edfaf\",\n    storageBucket: \"crown-clothing-db-edfaf.appspot.com\",\n    messagingSenderId: \"536120961604\",\n    appId: \"1:536120961604:web:336d89c430dc62193baa11\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n    prompt: \"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () =>\n    signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () =>\n    signInWithRedirect(auth, googleProvider);\n\nexport const db = getFirestore()\n\nexport const createUserDocumentFromAuth = async (userAuth) => {\n    if (!userAuth) return;\n\n    const userDocRef = doc(db, 'users', userAuth.uid);\n\n    const userSnapshot = await getDoc(userDocRef);\n\n    // if user data does not exist\n    if (!userSnapshot.exists()) {\n        // create / set the document with the data from userAut in my collection\n        const { displayName, email } = userAuth;\n        const createdAt = new Date();\n\n        try {\n            await setDoc(userDocRef, {\n                displayName,\n                email,\n                createdAt\n            });\n        }\n        catch (error) {\n            console.log('error createing the user', error.message);\n        }\n    }\n    // if user data exists, return userDocRef\n    return userDocRef;\n}\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n    if (!email || !password) {\n        return;\n    }\n\n    return await createUserWithEmailAndPassword(auth, email, password);\n}"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SACIC,OAAO,EACPC,kBAAkB,EAClBC,eAAe,EACfC,kBAAkB,EAClBC,8BAA8B,QAC3B,eAAe;AACtB,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AAEtE,MAAMC,cAAc,GAAG;EACnBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,yCAAyC;EACrDC,SAAS,EAAE,yBAAyB;EACpCC,aAAa,EAAE,qCAAqC;EACpDC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE;AACX,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGjB,aAAa,CAACU,cAAc,CAAC;AAEjD,MAAMQ,cAAc,GAAG,IAAId,kBAAkB,EAAE;AAE/Cc,cAAc,CAACC,mBAAmB,CAAC;EAC/BC,MAAM,EAAE;AACZ,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGpB,OAAO,EAAE;AAC7B,OAAO,MAAMqB,qBAAqB,GAAG,MACjCnB,eAAe,CAACkB,IAAI,EAAEH,cAAc,CAAC;AACzC,OAAO,MAAMK,wBAAwB,GAAG,MACpCrB,kBAAkB,CAACmB,IAAI,EAAEH,cAAc,CAAC;AAE5C,OAAO,MAAMM,EAAE,GAAGlB,YAAY,EAAE;AAEhC,OAAO,MAAMmB,0BAA0B,GAAG,MAAOC,QAAQ,IAAK;EAC1D,IAAI,CAACA,QAAQ,EAAE;EAEf,MAAMC,UAAU,GAAGpB,GAAG,CAACiB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACE,GAAG,CAAC;EAEjD,MAAMC,YAAY,GAAG,MAAMrB,MAAM,CAACmB,UAAU,CAAC;;EAE7C;EACA,IAAI,CAACE,YAAY,CAACC,MAAM,EAAE,EAAE;IACxB;IACA,MAAM;MAAEC,WAAW;MAAEC;IAAM,CAAC,GAAGN,QAAQ;IACvC,MAAMO,SAAS,GAAG,IAAIC,IAAI,EAAE;IAE5B,IAAI;MACA,MAAMzB,MAAM,CAACkB,UAAU,EAAE;QACrBI,WAAW;QACXC,KAAK;QACLC;MACJ,CAAC,CAAC;IACN,CAAC,CACD,OAAOE,KAAK,EAAE;MACVC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,KAAK,CAACG,OAAO,CAAC;IAC1D;EACJ;EACA;EACA,OAAOX,UAAU;AACrB,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAG,OAAOP,KAAK,EAAEQ,QAAQ,KAAK;EACzE,IAAI,CAACR,KAAK,IAAI,CAACQ,QAAQ,EAAE;IACrB;EACJ;EAEA,OAAO,MAAMnC,8BAA8B,CAACgB,IAAI,EAAEW,KAAK,EAAEQ,QAAQ,CAAC;AACtE,CAAC"},"metadata":{},"sourceType":"module"}