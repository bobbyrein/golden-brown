{"ast":null,"code":"var util = require('util'),\n  Actor = require('./actor').Actor,\n  Diff = require('./diff').Diff;\nTree = require('./tree').Tree;\n\n// Create a commit object\nvar Commit = exports.Commit = function (repo, id, parents, tree, author, authored_date, committer, committed_date, message, filechanges) {\n  var _repo = repo,\n    _id = id,\n    _parents = parents,\n    _tree = tree,\n    _author = author,\n    _authored_date = authored_date;\n  var _committer = committer,\n    _committed_date = committed_date,\n    _id_abbrev = null,\n    _filechanges = filechanges;\n  // Ensure we have an empty message at least\n  message = message ? message : [];\n  message = Array.isArray(message) ? message : [message];\n  var _message = message.join(\"\\n\");\n  // Extract short message\n  var message_lines_filtered = message.filter(function (line) {\n    return line.trim() == '' ? false : true;\n  });\n  var _short_message = message_lines_filtered.length > 0 ? message_lines_filtered[0] : '';\n  // Internal properties\n  Object.defineProperty(this, \"repo\", {\n    get: function () {\n      return _repo;\n    },\n    set: function (value) {\n      _repo = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"id\", {\n    get: function () {\n      return _id;\n    },\n    set: function (value) {\n      _id = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"sha\", {\n    get: function () {\n      return _id;\n    },\n    set: function (value) {\n      _id = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"parents\", {\n    get: function () {\n      _parents = lazy_reader(_repo, _id, 'parents', _parents);\n      return _parents;\n    },\n    set: function (value) {\n      _parents = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"tree\", {\n    get: function () {\n      _tree = lazy_reader(_repo, _id, 'tree', _tree);\n      return _tree;\n    },\n    set: function (value) {\n      _tree = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"author\", {\n    get: function () {\n      _author = lazy_reader(_repo, _id, 'author', _author);\n      return _author;\n    },\n    set: function (value) {\n      _author = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"authored_date\", {\n    get: function () {\n      _authored_date = lazy_reader(_repo, _id, 'authored_date', _authored_date);\n      return _authored_date;\n    },\n    set: function (value) {\n      _authored_date = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"committer\", {\n    get: function () {\n      _committer = lazy_reader(_repo, _id, 'comitter', _committer);\n      return _committer;\n    },\n    set: function (value) {\n      _comitter = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"committed_date\", {\n    get: function () {\n      _committed_date = lazy_reader(_repo, _id, 'committed_date', _committed_date);\n      return _committed_date;\n    },\n    set: function (value) {\n      _committed_date = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"message\", {\n    get: function () {\n      _message = lazy_reader(_repo, _id, 'message', _message);\n      return _message;\n    },\n    set: function (value) {\n      _message = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"short_message\", {\n    get: function () {\n      _short_message = lazy_reader(_repo, _id, 'short_message', _short_message);\n      return _short_message;\n    },\n    set: function (value) {\n      _short_message = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"filechanges\", {\n    get: function () {\n      _filechanges = lazy_reader(_repo, _id, 'filechanges', _filechanges);\n      return _filechanges;\n    },\n    set: function (value) {\n      _filechanges = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(this, \"_id_abbrev\", {\n    get: function () {\n      return _id_abbrev;\n    },\n    set: function (value) {\n      _id_abbrev = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n};\nvar lazy_reader = function (repo, id, name, variable) {\n  if (variable != null) return variable;\n  // Control the flow\n  var done = false;\n  var value = null;\n  // Fetch all the commits\n  Commit.find_all(repo, id, {\n    max_count: 1\n  }, function (err, commits) {\n    if (err) return done = true;\n    value = commits[0][name];\n    done = true;\n  });\n  while (!done) {}\n  ;\n  return value ? value : '';\n};\n\n// Load a commit\nCommit.prototype.load = function (callback) {\n  var self = this;\n  Commit.find_all(this.repo, this.id, {\n    max_count: 1\n  }, function (err, commits) {\n    if (err) return callback(err, commits);\n    var commit = commits[0];\n    Object.keys(commit).forEach(function (key) {\n      self[key] = commit[key];\n    });\n    callback(null, self);\n  });\n};\n\n// Chomp text removing end carriage returns\nvar chomp = function chomp(raw_text) {\n  return raw_text.replace(/(\\n|\\r)+$/, '');\n};\n\n// Fetch the short form of an id\nCommit.prototype.id_abbrev = function (callback) {\n  var self = this;\n  if (this._id_abbrev) return callback(null, this._id_abbrev);\n  this.repo.git.rev_parse({}, this.id, 0, function (err, id) {\n    if (err) return callback(err, id);\n    self._id_abbrev = chomp(id).substr(0, 7);\n    callback(null, self._id_abbrev);\n  });\n};\n\n// Parse the actor and create the object\nvar actor = function (line) {\n  var results = line.match(/^.+? (.*) (\\d+) .*$/);\n  var actor = results[1];\n  var epoch = results[2];\n  // Return the objects\n  return [Actor.from_string(actor), new Date(parseInt(epoch) * 1000)];\n};\n\n// Convert commit text to list of commits\nCommit.list_from_string = function (repo, text) {\n  // Split up the result\n  var lines = text.split(\"\\n\");\n\n  // require('util').debug(\"-------------------------------------------------- lines\")\n  // require('util').debug(require('util').inspect(lines))\n  // require('util').debug(\"-------------------------------------------------- text end\")\n\n  var linesshift = function () {\n    return lines.shift();\n  };\n  var commits = [];\n  // Parse all commit messages\n  while (lines.length > 0) {\n    var id = linesshift().split(/ /).pop();\n    if (lines.length == 0) break;\n    var tree = new Tree(repo, linesshift().split(/ /).pop());\n\n    // Let's get the parents\n    var parents = [];\n    while (lines[0].match(/^parent/)) {\n      parents.push(new Commit(repo, linesshift().split(/ /).pop()));\n    }\n    // Let's get the author and committer\n    var actor_info = actor(linesshift());\n    var author = actor_info[0];\n    var authored_date = actor_info[1];\n    var committer_info = actor(linesshift());\n    var comitter = committer_info[0];\n    var committed_date = committer_info[1];\n    // Unpack encoding\n    var encoding = lines[0].match(/^encoding/) ? linesshift().split().pop() : '';\n    // Jump empty space\n    linesshift();\n    // Unpack message lines\n    var message_lines = [];\n    while (lines.length > 0 && lines[0].match(/^ {4}/)) {\n      var message_line = linesshift();\n      message_lines.push(message_line.substring(4, message_line.length));\n    }\n    linesshift();\n    // Parse --raw lines\n    var filechanges = {};\n    var fcre = /:(\\d+) (\\d+) ([a-z0-9]+) ([a-z0-9]+) (\\S+)\\s+(.+)/;\n    var numre = /(\\S+)\\s+(\\S+)\\s+(.+)/;\n    var line;\n    var matched;\n    while (lines.length > 0) {\n      line = linesshift();\n      matched = line.match(fcre);\n      if (!matched) break;\n      var o = {};\n      var xs = ['a_mode', 'b_mode', 'a_blob', 'b_blob', 'what', 'path'];\n      for (var i = 0; i < xs.length; i++) {\n        o[xs[i]] = matched[i + 1];\n      }\n      filechanges[o.path] = o;\n    }\n    while (line) {\n      matched = line.match(numre);\n      if (!matched) break;\n      var o = {};\n      var xs = ['plus', 'minus', 'path'];\n      for (var i = 0; i < xs.length; i++) {\n        o[xs[i]] = matched[i + 1];\n      }\n      filechanges[o.path].plus = o.plus;\n      filechanges[o.path].minus = o.minus;\n      if (lines.length == 0) break;\n      line = linesshift();\n    }\n    if (!matched && line) lines = [line].concat(lines);\n    // Move and point to next message\n    while (lines[0] != null && lines[0] == '') linesshift();\n    // Create commit object\n    commits.push(new Commit(repo, id, parents, tree, author, authored_date, comitter, committed_date, message_lines, filechanges));\n  }\n  // Return all the commits\n  return commits;\n};\n\n// Locate all commits for a give set of parameters\nCommit.find_all = function (repo, reference, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  reference = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n\n  // Merge the options with the default_options\n  if (!options.pretty) options['pretty'] = 'raw';\n  // If we have a reference use that for the lookup\n  if (!reference) options['all'] = true;\n\n  // Locate revisions\n  if (reference) {\n    repo.git.rev_list(options, reference, function (err, revision_output) {\n      if (err) return callback(err, []);\n      // Turn string into a list of revisions\n      callback(null, Commit.list_from_string(repo, revision_output));\n    });\n  } else {\n    repo.git.rev_list(options, function (err, revision_output) {\n      if (err) return callback(err, []);\n      // Turn string into a list of revisions\n      callback(null, Commit.list_from_string(repo, revision_output));\n    });\n  }\n};\n\n// Return the count of committs for a given start\nCommit.count = function (repo, ref, callback) {\n  repo.git.rev_list({}, ref, function (err, revision_output) {\n    if (err) return callback(err, revision_output);\n    callback(null, parseInt(revision_output.length / 41));\n  });\n};\n\n// Show diffs between two trees\n//  repo: the repo object\n//  a: named commit\n//  b: optional named commit, passing an array assumes you wish to omit the second\n//     named commit and limit the diff to the given paths\n//  paths: an array of paths to limit the diff.\n//\n// Returns array of diffs (baked)\nCommit.diff = function (repo, a, b, paths, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  b = args.length ? args.shift() : null;\n  paths = args.length ? args.shift() : [];\n\n  // If b is an array we skipped the b parameter\n  if (Array.isArray(b)) {\n    paths = b;\n    b = null;\n  }\n\n  // Set up parameters correctly\n  if (paths.length > 0) {\n    if (paths.length > 0) paths.unshift(\"--\");\n    if (b) paths.unshift(b);\n    paths.unshift(a);\n    // Let's execute the native git function\n    repo.git.call_git('', 'diff', '', {\n      full_index: true\n    }, paths, function (err, text) {\n      // Create a list of diffs from the string\n      if (text) {\n        Diff.list_from_string(repo, text, callback);\n      } else {\n        callback(null, []);\n      }\n    });\n  } else {\n    repo.git.diff(a, b, {\n      full_index: true\n    }, function (err, text) {\n      // Create a list of diffs from the string\n      if (text) {\n        Diff.list_from_string(repo, text, callback);\n      } else {\n        callback(null, []);\n      }\n    });\n  }\n};\nvar process_diff = function (repo, diff, callback) {\n  if (diff.match(/diff --git a/)) {\n    diff = diff.substring(diff.match(/diff --git a/).index, diff.length);\n  } else {\n    diff = '';\n  }\n  // Return the diffs\n  Diff.list_from_string(repo, diff, callback);\n};\n\n// Show the commits\nCommit.prototype.show = function (callback) {\n  var parents = this.parents;\n  var diff = null;\n  var self = this;\n  if (parents.length > 1) {\n    this.repo.git.native_call(\"diff \" + parents[0].id + \"...\" + parents[1].id, {\n      full_index: true\n    }, function (err, diff) {\n      if (err) return callback(err, diff);\n      process_diff(this.repo, diff, callback);\n    });\n  } else {\n    this.repo.git.show({\n      full_index: true,\n      pretty: 'raw'\n    }, this.id, function (err, diff) {\n      if (err) return callback(err, diff);\n      process_diff(this.repo, diff, callback);\n    });\n  }\n};\n\n// Return the diffs for a commit\nCommit.prototype.diffs = function (callback) {\n  var parents = this.parents;\n  // If we have no parents\n  if (parents.length == 0) {\n    this.show(callback);\n  } else {\n    Commit.diff(this.repo, parents[0].id, this.id, callback);\n  }\n};\n\n// To String method\nCommit.prototype.toString = function () {\n  return this.id;\n};\n\n// Convert commit into patch\nCommit.prototype.toPatch = function (callback) {\n  this.repo.git.format_patch({\n    '1': true,\n    stdout: true\n  }, this.id, callback);\n};","map":{"version":3,"names":["util","require","Actor","Diff","Tree","Commit","exports","repo","id","parents","tree","author","authored_date","committer","committed_date","message","filechanges","_repo","_id","_parents","_tree","_author","_authored_date","_committer","_committed_date","_id_abbrev","_filechanges","Array","isArray","_message","join","message_lines_filtered","filter","line","trim","_short_message","length","Object","defineProperty","get","set","value","enumerable","configurable","lazy_reader","_comitter","name","variable","done","find_all","max_count","err","commits","prototype","load","callback","self","commit","keys","forEach","key","chomp","raw_text","replace","id_abbrev","git","rev_parse","substr","actor","results","match","epoch","from_string","Date","parseInt","list_from_string","text","lines","split","linesshift","shift","pop","push","actor_info","committer_info","comitter","encoding","message_lines","message_line","substring","fcre","numre","matched","o","xs","i","path","plus","minus","concat","reference","options","args","slice","call","arguments","pretty","rev_list","revision_output","count","ref","diff","a","b","paths","unshift","call_git","full_index","process_diff","index","show","native_call","diffs","toString","toPatch","format_patch","stdout"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/commit.js"],"sourcesContent":["var util = require('util'),\n  Actor = require('./actor').Actor,\n  Diff = require('./diff').Diff;\n  Tree = require('./tree').Tree;\n\n// Create a commit object\nvar Commit = exports.Commit = function(repo, id, parents, tree, author, authored_date, committer, committed_date, message, filechanges) {\n  var _repo = repo, _id = id, _parents = parents, _tree = tree, _author = author, _authored_date = authored_date;\n  var _committer = committer, _committed_date = committed_date, _id_abbrev = null, _filechanges = filechanges;\n  // Ensure we have an empty message at least\n  message = message ? message : [];\n  message = Array.isArray(message) ? message : [message];\n  var _message = message.join(\"\\n\");\n  // Extract short message\n  var message_lines_filtered = message.filter(function(line) {\n    return line.trim() == '' ? false : true;\n  })\n  var _short_message = message_lines_filtered.length > 0 ? message_lines_filtered[0] : '';\n  // Internal properties\n  Object.defineProperty(this, \"repo\", { get: function() { return _repo; }, set: function(value) { _repo = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"id\", { get: function() { return _id; }, set: function(value) { _id = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"sha\", { get: function() { return _id; }, set: function(value) { _id = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"parents\", { get: function() {\n      _parents = lazy_reader(_repo, _id, 'parents', _parents);\n      return _parents;\n    }, set: function(value) { _parents = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"tree\", { get: function() {\n      _tree = lazy_reader(_repo, _id, 'tree', _tree);\n      return _tree;\n    }, set: function(value) { _tree = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"author\", { get: function() {\n      _author = lazy_reader(_repo, _id, 'author', _author);\n      return _author;\n    }, set: function(value) { _author = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"authored_date\", { get: function() {\n      _authored_date = lazy_reader(_repo, _id, 'authored_date', _authored_date);\n      return _authored_date;\n    }, set: function(value) { _authored_date = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"committer\", { get: function() {\n      _committer = lazy_reader(_repo, _id, 'comitter', _committer);\n      return _committer;\n    }, set: function(value) { _comitter = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"committed_date\", { get: function() {\n      _committed_date = lazy_reader(_repo, _id, 'committed_date', _committed_date);\n      return _committed_date;\n    }, set: function(value) { _committed_date = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"message\", { get: function() {\n      _message = lazy_reader(_repo, _id, 'message', _message);\n      return _message;\n    }, set: function(value) { _message = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"short_message\", { get: function() {\n      _short_message = lazy_reader(_repo, _id, 'short_message', _short_message);\n      return _short_message;\n    }, set: function(value) { _short_message = value; }, enumerable: true, configurable:true});\n  Object.defineProperty(this, \"filechanges\", { get: function() {\n      _filechanges = lazy_reader(_repo, _id, 'filechanges', _filechanges);\n      return _filechanges;\n    }, set: function(value) { _filechanges = value; }, enumerable: true, configurable:true});\n\n  Object.defineProperty(this, \"_id_abbrev\", { get: function() { return _id_abbrev; }, set: function(value) { _id_abbrev = value; }, enumerable: true, configurable:true});\n}\n\nvar lazy_reader = function(repo, id, name, variable) {\n  if(variable != null) return variable;\n  // Control the flow\n  var done = false;\n  var value = null;\n  // Fetch all the commits\n  Commit.find_all(repo, id, {max_count:1}, function(err, commits) {\n    if(err) return done = true;\n    value = commits[0][name];\n    done = true;\n  })\n\n  while(!done) {};\n  return value ? value : '';\n}\n\n// Load a commit\nCommit.prototype.load = function(callback) {\n  var self = this;\n\n  Commit.find_all(this.repo, this.id, {max_count:1}, function(err, commits) {\n    if(err) return callback(err, commits);\n    var commit = commits[0];\n    Object.keys(commit).forEach(function(key) {\n      self[key] = commit[key];\n    });\n    callback(null, self);\n  });\n}\n\n// Chomp text removing end carriage returns\nvar chomp = function chomp(raw_text) {\n  return raw_text.replace(/(\\n|\\r)+$/, '');\n}\n\n// Fetch the short form of an id\nCommit.prototype.id_abbrev = function(callback) {\n  var self = this;\n\n  if(this._id_abbrev) return callback(null, this._id_abbrev);\n  this.repo.git.rev_parse({}, this.id, 0, function(err, id) {\n    if(err) return callback(err, id);\n    self._id_abbrev = chomp(id).substr(0, 7);\n    callback(null, self._id_abbrev);\n  })\n}\n\n// Parse the actor and create the object\nvar actor = function(line) {\n  var results = line.match(/^.+? (.*) (\\d+) .*$/);\n  var actor = results[1];\n  var epoch = results[2];\n  // Return the objects\n  return [Actor.from_string(actor), new Date(parseInt(epoch) * 1000)]\n}\n\n// Convert commit text to list of commits\nCommit.list_from_string = function(repo, text) {  \n  // Split up the result\n  var lines = text.split(\"\\n\");\n  \n  // require('util').debug(\"-------------------------------------------------- lines\")\n  // require('util').debug(require('util').inspect(lines))\n  // require('util').debug(\"-------------------------------------------------- text end\")\n  \n  var linesshift = function() {\n    return lines.shift();\n  };\n  var commits = [];\n  // Parse all commit messages\n  while(lines.length > 0) {\n    var id = linesshift().split(/ /).pop();\n    if(lines.length == 0) break;\n    var tree = new Tree(repo, linesshift().split(/ /).pop());\n\n    // Let's get the parents\n    var parents = [];\n    while(lines[0].match(/^parent/)) {\n      parents.push(new Commit(repo, linesshift().split(/ /).pop()))\n    }\n    // Let's get the author and committer\n    var actor_info = actor(linesshift());\n    var author = actor_info[0];\n    var authored_date = actor_info[1]\n    var committer_info = actor(linesshift());\n    var comitter = committer_info[0];\n    var committed_date = committer_info[1];\n    // Unpack encoding\n    var encoding = lines[0].match(/^encoding/) ? linesshift().split().pop() : '';\n    // Jump empty space\n    linesshift();\n    // Unpack message lines\n    var message_lines = [];\n    while(lines.length > 0 && lines[0].match(/^ {4}/)) {\n      var message_line = linesshift();\n      message_lines.push(message_line.substring(4, message_line.length)) ;\n    }\n\n    linesshift();\n    // Parse --raw lines\n    var filechanges = {};\n    var fcre = /:(\\d+) (\\d+) ([a-z0-9]+) ([a-z0-9]+) (\\S+)\\s+(.+)/;\n    var numre = /(\\S+)\\s+(\\S+)\\s+(.+)/;\n    var line;\n    var matched;\n    while (lines.length > 0) {\n        line = linesshift();\n        matched = line.match(fcre);\n        if (!matched) break;\n        var o = {};\n        var xs = ['a_mode', 'b_mode', 'a_blob', 'b_blob', 'what', 'path'];\n        for(var i = 0; i < xs.length; i++) {\n            o[xs[i]] = matched[i+1];\n        }\n        filechanges[o.path] = o;\n    }\n    while (line) {\n        matched = line.match(numre);\n        if (!matched) break;\n        var o = {};\n        var xs = ['plus', 'minus', 'path'];\n        for(var i = 0; i < xs.length; i++) {\n            o[xs[i]] = matched[i+1];\n        }\n        filechanges[o.path].plus = o.plus;\n        filechanges[o.path].minus = o.minus;\n        if (lines.length == 0) break;\n        line = linesshift();\n    }\n\n    if (!matched && line) lines = [line].concat(lines);\n    // Move and point to next message\n    while(lines[0] != null && lines[0] == '') linesshift();\n    // Create commit object\n    commits.push(new Commit(repo, id, parents, tree, author, authored_date, comitter, committed_date, message_lines, filechanges));\n  }\n  // Return all the commits\n  return commits;\n}\n\n// Locate all commits for a give set of parameters\nCommit.find_all = function(repo, reference, options, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 1);\n  callback = args.pop();\n  reference = args.length ? args.shift() : null;\n  options = args.length ? args.shift() : {};\n\n  // Merge the options with the default_options\n  if(!options.pretty) options['pretty'] = 'raw';\n  // If we have a reference use that for the lookup\n  if(!reference) options['all'] = true;\n\n  // Locate revisions\n  if(reference) {\n    repo.git.rev_list(options, reference, function(err, revision_output) {\n      if(err) return callback(err, []);\n      // Turn string into a list of revisions\n      callback(null, Commit.list_from_string(repo, revision_output));\n    });\n  } else {\n    repo.git.rev_list(options, function(err, revision_output) {\n      if(err) return callback(err, []);\n      // Turn string into a list of revisions\n      callback(null, Commit.list_from_string(repo, revision_output));\n    });\n  }\n}\n\n// Return the count of committs for a given start\nCommit.count = function(repo, ref, callback) {\n  repo.git.rev_list({}, ref, function(err, revision_output) {\n    if(err) return callback(err, revision_output);\n    callback(null, parseInt((revision_output.length/41)));\n  })\n}\n\n// Show diffs between two trees\n//  repo: the repo object\n//  a: named commit\n//  b: optional named commit, passing an array assumes you wish to omit the second\n//     named commit and limit the diff to the given paths\n//  paths: an array of paths to limit the diff.\n//\n// Returns array of diffs (baked)\nCommit.diff = function(repo, a, b, paths, callback) {\n  var self = this;\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  b = args.length ? args.shift() : null;\n  paths = args.length ? args.shift() : [];\n\n  // If b is an array we skipped the b parameter\n  if(Array.isArray(b)) {\n    paths = b;\n    b = null;\n  }\n\n  // Set up parameters correctly\n  if(paths.length > 0) {\n    if(paths.length > 0) paths.unshift(\"--\");\n    if(b) paths.unshift(b);\n    paths.unshift(a);\n    // Let's execute the native git function\n    repo.git.call_git('', 'diff', '', {full_index:true}, paths, function(err, text) {\n      // Create a list of diffs from the string\n      if(text) {\n        Diff.list_from_string(repo, text, callback);\n      } else {\n        callback(null, []);\n      }\n    });\n  } else {\n    repo.git.diff(a, b, {full_index:true}, function(err, text) {\n      // Create a list of diffs from the string\n      if(text) {\n        Diff.list_from_string(repo, text, callback);\n      } else {\n        callback(null, []);\n      }\n    });\n  }\n}\n\nvar process_diff = function(repo, diff, callback) {\n  if(diff.match(/diff --git a/)) {\n    diff = diff.substring(diff.match(/diff --git a/).index, diff.length);\n  } else {\n    diff = '';\n  }\n  // Return the diffs\n  Diff.list_from_string(repo, diff, callback);\n}\n\n// Show the commits\nCommit.prototype.show = function(callback) {\n  var parents = this.parents;\n  var diff = null\n  var self = this;\n\n  if(parents.length > 1) {\n    this.repo.git.native_call(\"diff \" + parents[0].id + \"...\" + parents[1].id, {full_index:true}, function(err, diff) {\n      if(err) return callback(err, diff);\n      process_diff(this.repo, diff, callback);\n    });\n  } else {\n    this.repo.git.show({full_index:true, pretty:'raw'}, this.id, function(err, diff) {\n      if(err) return callback(err, diff);\n      process_diff(this.repo, diff, callback);\n    });\n  }\n}\n\n// Return the diffs for a commit\nCommit.prototype.diffs = function(callback) {\n  var parents = this.parents;\n  // If we have no parents\n  if(parents.length == 0) {\n    this.show(callback);\n  } else {\n    Commit.diff(this.repo, parents[0].id, this.id, callback)\n  }\n}\n\n// To String method\nCommit.prototype.toString = function() {\n  return this.id;\n}\n\n// Convert commit into patch\nCommit.prototype.toPatch = function(callback) {\n  this.repo.git.format_patch({'1':true, stdout:true}, this.id, callback);\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}