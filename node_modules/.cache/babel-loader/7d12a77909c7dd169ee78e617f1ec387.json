{"ast":null,"code":"//+ Jonas Raoni Soares Silva\n//@ http://jsfromhell.com/classes/binary-parser [v1.0]\nvar chr = String.fromCharCode;\nvar p = exports.BinaryParser = function (bigEndian, allowExceptions) {\n  this.bigEndian = bigEndian;\n  this.allowExceptions = allowExceptions;\n};\nvar Buffer = exports.BinaryParser.Buffer = function (bigEndian, buffer) {\n  this.bigEndian = bigEndian || 0;\n  this.buffer = [];\n  this.setBuffer(buffer);\n};\nBuffer.prototype.setBuffer = function (data) {\n  if (data) {\n    for (var l, i = l = data.length, b = this.buffer = new Array(l); i; b[l - i] = data.charCodeAt(--i));\n    this.bigEndian && b.reverse();\n  }\n};\nBuffer.prototype.hasNeededBits = function (neededBits) {\n  return this.buffer.length >= -(-neededBits >> 3);\n};\nBuffer.prototype.checkBuffer = function (neededBits) {\n  if (!this.hasNeededBits(neededBits)) throw new Error(\"checkBuffer::missing bytes\");\n};\nBuffer.prototype.readBits = function (start, length) {\n  //shl fix: Henri Torgemane ~1996 (compressed by Jonas Raoni)\n  function shl(a, b) {\n    for (; b--; a = ((a %= 0x7fffffff + 1) & 0x40000000) == 0x40000000 ? a * 2 : (a - 0x40000000) * 2 + 0x7fffffff + 1);\n    return a;\n  }\n  if (start < 0 || length <= 0) return 0;\n  this.checkBuffer(start + length);\n  for (var offsetLeft, offsetRight = start % 8, curByte = this.buffer.length - (start >> 3) - 1, lastByte = this.buffer.length + (-(start + length) >> 3), diff = curByte - lastByte, sum = (this.buffer[curByte] >> offsetRight & (1 << (diff ? 8 - offsetRight : length)) - 1) + (diff && (offsetLeft = (start + length) % 8) ? (this.buffer[lastByte++] & (1 << offsetLeft) - 1) << (diff-- << 3) - offsetRight : 0); diff; sum += shl(this.buffer[lastByte++], (diff-- << 3) - offsetRight));\n  return sum;\n};\np.warn = function (msg) {\n  if (this.allowExceptions) throw new Error(msg);\n  return 1;\n};\np.decodeFloat = function (data, precisionBits, exponentBits) {\n  var b = new this.Buffer(this.bigEndian, data);\n  b.checkBuffer(precisionBits + exponentBits + 1);\n  var bias = Math.pow(2, exponentBits - 1) - 1,\n    signal = b.readBits(precisionBits + exponentBits, 1),\n    exponent = b.readBits(precisionBits, exponentBits),\n    significand = 0,\n    divisor = 2,\n    curByte = b.buffer.length + (-precisionBits >> 3) - 1;\n  do {\n    for (var byteValue = b.buffer[++curByte], startBit = precisionBits % 8 || 8, mask = 1 << startBit; mask >>= 1; byteValue & mask && (significand += 1 / divisor), divisor *= 2);\n  } while (precisionBits -= startBit);\n  return exponent == (bias << 1) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity : (1 + signal * -2) * (exponent || significand ? !exponent ? Math.pow(2, -bias + 1) * significand : Math.pow(2, exponent - bias) * (1 + significand) : 0);\n};\np.decodeInt = function (data, bits, signed, forceBigEndian) {\n  var b = new this.Buffer(this.bigEndian || forceBigEndian, data),\n    x = b.readBits(0, bits),\n    max = Math.pow(2, bits);\n  return signed && x >= max / 2 ? x - max : x;\n};\np.encodeFloat = function (data, precisionBits, exponentBits) {\n  var bias = Math.pow(2, exponentBits - 1) - 1,\n    minExp = -bias + 1,\n    maxExp = bias,\n    minUnnormExp = minExp - precisionBits,\n    status = isNaN(n = parseFloat(data)) || n == -Infinity || n == +Infinity ? n : 0,\n    exp = 0,\n    len = 2 * bias + 1 + precisionBits + 3,\n    bin = new Array(len),\n    signal = (n = status !== 0 ? 0 : n) < 0,\n    n = Math.abs(n),\n    intPart = Math.floor(n),\n    floatPart = n - intPart,\n    i,\n    lastBit,\n    rounded,\n    j,\n    result;\n  for (i = len; i; bin[--i] = 0);\n  for (i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor(intPart / 2));\n  for (i = bias + 1; floatPart > 0 && i; (bin[++i] = ((floatPart *= 2) >= 1) - 0) && --floatPart);\n  for (i = -1; ++i < len && !bin[i];);\n  if (bin[(lastBit = precisionBits - 1 + (i = (exp = bias + 1 - i) >= minExp && exp <= maxExp ? i + 1 : bias + 1 - (exp = minExp - 1))) + 1]) {\n    if (!(rounded = bin[lastBit])) {\n      for (j = lastBit + 2; !rounded && j < len; rounded = bin[j++]);\n    }\n    for (j = lastBit + 1; rounded && --j >= 0; (bin[j] = !bin[j] - 0) && (rounded = 0));\n  }\n  for (i = i - 2 < 0 ? -1 : i - 3; ++i < len && !bin[i];);\n  if ((exp = bias + 1 - i) >= minExp && exp <= maxExp) ++i;else if (exp < minExp) {\n    exp != bias + 1 - len && exp < minUnnormExp && this.warn(\"encodeFloat::float underflow\");\n    i = bias + 1 - (exp = minExp - 1);\n  }\n  if (intPart || status !== 0) {\n    this.warn(intPart ? \"encodeFloat::float overflow\" : \"encodeFloat::\" + status);\n    exp = maxExp + 1;\n    i = bias + 2;\n    if (status == -Infinity) signal = 1;else if (isNaN(status)) bin[i] = 1;\n  }\n  for (n = Math.abs(exp + bias), j = exponentBits + 1, result = \"\"; --j; result = n % 2 + result, n = n >>= 1);\n  for (n = 0, j = 0, i = (result = (signal ? \"1\" : \"0\") + result + bin.slice(i, i + precisionBits).join(\"\")).length, r = []; i; j = (j + 1) % 8) {\n    n += (1 << j) * result.charAt(--i);\n    if (j == 7) {\n      r[r.length] = String.fromCharCode(n);\n      n = 0;\n    }\n  }\n  r[r.length] = n ? String.fromCharCode(n) : \"\";\n  return (this.bigEndian ? r.reverse() : r).join(\"\");\n};\np.encodeInt = function (data, bits, signed, forceBigEndian) {\n  var max = Math.pow(2, bits);\n  (data >= max || data < -(max / 2)) && this.warn(\"encodeInt::overflow\") && (data = 0);\n  data < 0 && (data += max);\n  for (var r = []; data; r[r.length] = String.fromCharCode(data % 256), data = Math.floor(data / 256));\n  for (bits = -(-bits >> 3) - r.length; bits--; r[r.length] = \"\\0\");\n  return (this.bigEndian || forceBigEndian ? r.reverse() : r).join(\"\");\n};\np.toSmall = function (data) {\n  return this.decodeInt(data, 8, true);\n};\np.fromSmall = function (data) {\n  return this.encodeInt(data, 8, true);\n};\np.toByte = function (data) {\n  return this.decodeInt(data, 8, false);\n};\np.fromByte = function (data) {\n  return this.encodeInt(data, 8, false);\n};\np.toShort = function (data) {\n  return this.decodeInt(data, 16, true);\n};\np.fromShort = function (data) {\n  return this.encodeInt(data, 16, true);\n};\np.toWord = function (data) {\n  return this.decodeInt(data, 16, false);\n};\np.fromWord = function (data) {\n  return this.encodeInt(data, 16, false);\n};\np.toInt = function (data) {\n  return this.decodeInt(data, 32, true);\n};\np.fromInt = function (data) {\n  return this.encodeInt(data, 32, true);\n};\np.toLong = function (data) {\n  return this.decodeInt(data, 64, true);\n};\np.fromLong = function (data) {\n  return this.encodeInt(data, 64, true);\n};\np.toDWord = function (data) {\n  return this.decodeInt(data, 32, false);\n};\np.fromDWord = function (data) {\n  return this.encodeInt(data, 32, false);\n};\np.toQWord = function (data) {\n  return this.decodeInt(data, 64, true);\n};\np.fromQWord = function (data) {\n  return this.encodeInt(data, 64, true);\n};\np.toFloat = function (data) {\n  return this.decodeFloat(data, 23, 8);\n};\np.fromFloat = function (data) {\n  return this.encodeFloat(data, 23, 8);\n};\np.toDouble = function (data) {\n  return this.decodeFloat(data, 52, 11);\n};\np.fromDouble = function (data) {\n  return this.encodeFloat(data, 52, 11);\n};\n\n// Factor out the encode so it can be shared by add_header and push_int32\np.encode_int32 = function (number) {\n  var a, b, c, d, unsigned;\n  unsigned = number < 0 ? number + 0x100000000 : number;\n  a = Math.floor(unsigned / 0xffffff);\n  unsigned &= 0xffffff;\n  b = Math.floor(unsigned / 0xffff);\n  unsigned &= 0xffff;\n  c = Math.floor(unsigned / 0xff);\n  unsigned &= 0xff;\n  d = Math.floor(unsigned);\n  return chr(a) + chr(b) + chr(c) + chr(d);\n};\np.encode_int64 = function (number) {\n  var a, b, c, d, e, f, g, h, unsigned;\n  unsigned = number < 0 ? number + 0x10000000000000000 : number;\n  a = Math.floor(unsigned / 0xffffffffffffff);\n  unsigned &= 0xffffffffffffff;\n  b = Math.floor(unsigned / 0xffffffffffff);\n  unsigned &= 0xffffffffffff;\n  c = Math.floor(unsigned / 0xffffffffff);\n  unsigned &= 0xffffffffff;\n  d = Math.floor(unsigned / 0xffffffff);\n  unsigned &= 0xffffffff;\n  e = Math.floor(unsigned / 0xffffff);\n  unsigned &= 0xffffff;\n  f = Math.floor(unsigned / 0xffff);\n  unsigned &= 0xffff;\n  g = Math.floor(unsigned / 0xff);\n  unsigned &= 0xff;\n  h = Math.floor(unsigned);\n  return chr(a) + chr(b) + chr(c) + chr(d) + chr(e) + chr(f) + chr(g) + chr(h);\n};\n\n/**\n  UTF8 methods\n**/\n\n// Take a raw binary string and return a utf8 string\np.decode_utf8 = function (a) {\n  var string = \"\";\n  var i = 0;\n  var c = c1 = c2 = 0;\n  while (i < a.length) {\n    c = a.charCodeAt(i);\n    if (c < 128) {\n      string += String.fromCharCode(c);\n      i++;\n    } else if (c > 191 && c < 224) {\n      c2 = a.charCodeAt(i + 1);\n      string += String.fromCharCode((c & 31) << 6 | c2 & 63);\n      i += 2;\n    } else {\n      c2 = a.charCodeAt(i + 1);\n      c3 = a.charCodeAt(i + 2);\n      string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);\n      i += 3;\n    }\n  }\n  return string;\n};\n\n// Encode a cstring correctly\np.encode_cstring = function (s) {\n  return unescape(encodeURIComponent(s)) + p.fromByte(0);\n};\n\n// Take a utf8 string and return a binary string\np.encode_utf8 = function (s) {\n  var a = \"\";\n  for (var n = 0; n < s.length; n++) {\n    var c = s.charCodeAt(n);\n    if (c < 128) {\n      a += String.fromCharCode(c);\n    } else if (c > 127 && c < 2048) {\n      a += String.fromCharCode(c >> 6 | 192);\n      a += String.fromCharCode(c & 63 | 128);\n    } else {\n      a += String.fromCharCode(c >> 12 | 224);\n      a += String.fromCharCode(c >> 6 & 63 | 128);\n      a += String.fromCharCode(c & 63 | 128);\n    }\n  }\n  return a;\n};\np.pprint = function (s) {\n  var util = require('util');\n  for (var i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) < 32) {\n      util.puts(s.charCodeAt(i) + ' : ');\n    } else {\n      util.puts(s.charCodeAt(i) + ' : ' + s.charAt(i));\n    }\n  }\n};\np.hprint = function (s) {\n  var util = require('util');\n  for (var i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) < 32) {\n      util.puts(s.charCodeAt(i) + ' : ');\n    } else {\n      util.puts(s.charCodeAt(i).toString(16) + ' : ' + s.charAt(i));\n    }\n  }\n};\np.hex = function (s) {\n  var util = require('util');\n  var string = '';\n  for (var i = 0; i < s.length; i++) {\n    var c = s.charCodeAt(i).toString(16);\n    c = c.length == 1 ? \"0\" + c : c;\n    string = string + c;\n  }\n  return string;\n};","map":{"version":3,"names":["chr","String","fromCharCode","p","exports","BinaryParser","bigEndian","allowExceptions","Buffer","buffer","setBuffer","prototype","data","l","i","length","b","Array","charCodeAt","reverse","hasNeededBits","neededBits","checkBuffer","Error","readBits","start","shl","a","offsetLeft","offsetRight","curByte","lastByte","diff","sum","warn","msg","decodeFloat","precisionBits","exponentBits","bias","Math","pow","signal","exponent","significand","divisor","byteValue","startBit","mask","NaN","Infinity","decodeInt","bits","signed","forceBigEndian","x","max","encodeFloat","minExp","maxExp","minUnnormExp","status","isNaN","n","parseFloat","exp","len","bin","abs","intPart","floor","floatPart","lastBit","rounded","j","result","slice","join","r","charAt","encodeInt","toSmall","fromSmall","toByte","fromByte","toShort","fromShort","toWord","fromWord","toInt","fromInt","toLong","fromLong","toDWord","fromDWord","toQWord","fromQWord","toFloat","fromFloat","toDouble","fromDouble","encode_int32","number","c","d","unsigned","encode_int64","e","f","g","h","decode_utf8","string","c1","c2","c3","encode_cstring","s","unescape","encodeURIComponent","encode_utf8","pprint","util","require","puts","hprint","toString","hex"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/binary_parser.js"],"sourcesContent":["//+ Jonas Raoni Soares Silva\n//@ http://jsfromhell.com/classes/binary-parser [v1.0]\nvar chr = String.fromCharCode;\n\nvar p = exports.BinaryParser = function( bigEndian, allowExceptions ){\n\tthis.bigEndian = bigEndian;\n\tthis.allowExceptions = allowExceptions;\n};\n\nvar Buffer = exports.BinaryParser.Buffer = function( bigEndian, buffer ){\n  this.bigEndian = bigEndian || 0;\n  this.buffer = [];\n  this.setBuffer( buffer );\n};\n\nBuffer.prototype.setBuffer = function( data ){\n\tif( data ){\n\t\tfor( var l, i = l = data.length, b = this.buffer = new Array( l ); i; b[l - i] = data.charCodeAt( --i ) );\n\t\tthis.bigEndian && b.reverse();\n\t}\n};\n\nBuffer.prototype.hasNeededBits = function( neededBits ){\n\treturn this.buffer.length >= -( -neededBits >> 3 );\n};\n\nBuffer.prototype.checkBuffer = function( neededBits ){\n\tif( !this.hasNeededBits( neededBits ) )\n\t\tthrow new Error( \"checkBuffer::missing bytes\" );\n};\n\nBuffer.prototype.readBits = function( start, length ){\n\t//shl fix: Henri Torgemane ~1996 (compressed by Jonas Raoni)\n\tfunction shl( a, b ){\n\t\tfor( ; b--; a = ( ( a %= 0x7fffffff + 1 ) & 0x40000000 ) == 0x40000000 ? a * 2 : ( a - 0x40000000 ) * 2 + 0x7fffffff + 1 );\n\t\treturn a;\n\t}\n\tif( start < 0 || length <= 0 )\n\t\treturn 0;\n\tthis.checkBuffer( start + length );\n\tfor( var offsetLeft, offsetRight = start % 8, curByte = this.buffer.length - ( start >> 3 ) - 1, lastByte = this.buffer.length + ( -( start + length ) >> 3 ), diff = curByte - lastByte, sum = ( ( this.buffer[ curByte ] >> offsetRight ) & ( ( 1 << ( diff ? 8 - offsetRight : length ) ) - 1 ) ) + ( diff && ( offsetLeft = ( start + length ) % 8 ) ? ( this.buffer[ lastByte++ ] & ( ( 1 << offsetLeft ) - 1 ) ) << ( diff-- << 3 ) - offsetRight : 0 ); diff; sum += shl( this.buffer[ lastByte++ ], ( diff-- << 3 ) - offsetRight ) );\n\treturn sum;\n};\n\t\np.warn = function( msg ){\n\tif( this.allowExceptions )\n\t\tthrow new Error( msg );\n\treturn 1;\n};\np.decodeFloat = function( data, precisionBits, exponentBits ){\n\tvar b = new this.Buffer( this.bigEndian, data );\n\tb.checkBuffer( precisionBits + exponentBits + 1 );\n\tvar bias = Math.pow( 2, exponentBits - 1 ) - 1, signal = b.readBits( precisionBits + exponentBits, 1 ), exponent = b.readBits( precisionBits, exponentBits ), significand = 0,\n\tdivisor = 2, curByte = b.buffer.length + ( -precisionBits >> 3 ) - 1;\n\tdo{\n\t\tfor( var byteValue = b.buffer[ ++curByte ], startBit = precisionBits % 8 || 8, mask = 1 << startBit; mask >>= 1; ( byteValue & mask ) && ( significand += 1 / divisor ), divisor *= 2 );\n\t}while( precisionBits -= startBit );\n\treturn exponent == ( bias << 1 ) + 1 ? significand ? NaN : signal ? -Infinity : +Infinity : ( 1 + signal * -2 ) * ( exponent || significand ? !exponent ? Math.pow( 2, -bias + 1 ) * significand : Math.pow( 2, exponent - bias ) * ( 1 + significand ) : 0 );\n};\np.decodeInt = function( data, bits, signed, forceBigEndian ){\n\tvar b = new this.Buffer( this.bigEndian||forceBigEndian, data ), x = b.readBits( 0, bits ), max = Math.pow( 2, bits );\n\treturn signed && x >= max / 2 ? x - max : x;\n};\np.encodeFloat = function( data, precisionBits, exponentBits ){\n\tvar bias = Math.pow( 2, exponentBits - 1 ) - 1, minExp = -bias + 1, maxExp = bias, minUnnormExp = minExp - precisionBits,\n\tstatus = isNaN( n = parseFloat( data ) ) || n == -Infinity || n == +Infinity ? n : 0,\n\texp = 0, len = 2 * bias + 1 + precisionBits + 3, bin = new Array( len ),\n\tsignal = ( n = status !== 0 ? 0 : n ) < 0, n = Math.abs( n ), intPart = Math.floor( n ), floatPart = n - intPart,\n\ti, lastBit, rounded, j, result;\n\tfor( i = len; i; bin[--i] = 0 );\n\tfor( i = bias + 2; intPart && i; bin[--i] = intPart % 2, intPart = Math.floor( intPart / 2 ) );\n\tfor( i = bias + 1; floatPart > 0 && i; ( bin[++i] = ( ( floatPart *= 2 ) >= 1 ) - 0 ) && --floatPart );\n\tfor( i = -1; ++i < len && !bin[i]; );\n\tif( bin[( lastBit = precisionBits - 1 + ( i = ( exp = bias + 1 - i ) >= minExp && exp <= maxExp ? i + 1 : bias + 1 - ( exp = minExp - 1 ) ) ) + 1] ){\n\t\tif( !( rounded = bin[lastBit] ) ){\n\t\t\tfor( j = lastBit + 2; !rounded && j < len; rounded = bin[j++] );\n\t\t}\n\t\tfor( j = lastBit + 1; rounded && --j >= 0; ( bin[j] = !bin[j] - 0 ) && ( rounded = 0 ) );\n\t}\n\tfor( i = i - 2 < 0 ? -1 : i - 3; ++i < len && !bin[i]; );\n\tif( ( exp = bias + 1 - i ) >= minExp && exp <= maxExp )\n\t\t++i;\n\telse if( exp < minExp ){\n\t\texp != bias + 1 - len && exp < minUnnormExp && this.warn( \"encodeFloat::float underflow\" );\n\t\ti = bias + 1 - ( exp = minExp - 1 );\n\t}\n\tif( intPart || status !== 0 ){\n\t\tthis.warn( intPart ? \"encodeFloat::float overflow\" : \"encodeFloat::\" + status );\n\t\texp = maxExp + 1;\n\t\ti = bias + 2;\n\t\tif( status == -Infinity )\n\t\t\tsignal = 1;\n\t\telse if( isNaN( status ) )\n\t\t\tbin[i] = 1;\n\t}\n\tfor( n = Math.abs( exp + bias ), j = exponentBits + 1, result = \"\"; --j; result = ( n % 2 ) + result, n = n >>= 1 );\n\tfor( n = 0, j = 0, i = ( result = ( signal ? \"1\" : \"0\" ) + result + bin.slice( i, i + precisionBits ).join( \"\" ) ).length, r = []; i; j = ( j + 1 ) % 8 ){\n\t\tn += ( 1 << j ) * result.charAt( --i );\n\t\tif( j == 7 ){\n\t\t\tr[r.length] = String.fromCharCode( n );\n\t\t\tn = 0;\n\t\t}\n\t}\n\tr[r.length] = n ? String.fromCharCode( n ) : \"\";\n\treturn ( this.bigEndian ? r.reverse() : r ).join( \"\" );\n};\np.encodeInt = function( data, bits, signed, forceBigEndian ){\n\tvar max = Math.pow( 2, bits );\n\t( data >= max || data < -( max / 2 ) ) && this.warn( \"encodeInt::overflow\" ) && ( data = 0 );\n\tdata < 0 && ( data += max );\n\tfor( var r = []; data; r[r.length] = String.fromCharCode( data % 256 ), data = Math.floor( data / 256 ) );\n\tfor( bits = -( -bits >> 3 ) - r.length; bits--; r[r.length] = \"\\0\" );\n        return ( (this.bigEndian||forceBigEndian) ? r.reverse() : r ).join( \"\" );\n};\np.toSmall    = function( data ){ return this.decodeInt( data,  8, true  ); };\np.fromSmall  = function( data ){ return this.encodeInt( data,  8, true  ); };\np.toByte     = function( data ){ return this.decodeInt( data,  8, false ); };\np.fromByte   = function( data ){ return this.encodeInt( data,  8, false ); };\np.toShort    = function( data ){ return this.decodeInt( data, 16, true  ); };\np.fromShort  = function( data ){ return this.encodeInt( data, 16, true  ); };\np.toWord     = function( data ){ return this.decodeInt( data, 16, false ); };\np.fromWord   = function( data ){ return this.encodeInt( data, 16, false ); };\np.toInt      = function( data ){ return this.decodeInt( data, 32, true  ); };\np.fromInt    = function( data ){ return this.encodeInt( data, 32, true  ); };\np.toLong     = function( data ){ return this.decodeInt( data, 64, true  ); };\np.fromLong   = function( data ){ return this.encodeInt( data, 64, true  ); };\np.toDWord    = function( data ){ return this.decodeInt( data, 32, false ); };\np.fromDWord  = function( data ){ return this.encodeInt( data, 32, false ); };\np.toQWord    = function( data ){ return this.decodeInt( data, 64, true ); };\np.fromQWord  = function( data ){ return this.encodeInt( data, 64, true ); };\np.toFloat    = function( data ){ return this.decodeFloat( data, 23, 8   ); };\np.fromFloat  = function( data ){ return this.encodeFloat( data, 23, 8   ); };\np.toDouble   = function( data ){ return this.decodeFloat( data, 52, 11  ); };\np.fromDouble = function( data ){ return this.encodeFloat( data, 52, 11  ); };\n\n// Factor out the encode so it can be shared by add_header and push_int32\np.encode_int32 = function(number) {\n  var a, b, c, d, unsigned;\n  unsigned = (number < 0) ? (number + 0x100000000) : number;\n  a = Math.floor(unsigned / 0xffffff);\n  unsigned &= 0xffffff;\n  b = Math.floor(unsigned / 0xffff);\n  unsigned &= 0xffff;\n  c = Math.floor(unsigned / 0xff);\n  unsigned &= 0xff;\n  d = Math.floor(unsigned);\n  return chr(a) + chr(b) + chr(c) + chr(d);\n};\n\np.encode_int64 = function(number) {\n  var a, b, c, d, e, f, g, h, unsigned;\n  unsigned = (number < 0) ? (number + 0x10000000000000000) : number;\n  a = Math.floor(unsigned / 0xffffffffffffff);\n  unsigned &= 0xffffffffffffff;\n  b = Math.floor(unsigned / 0xffffffffffff);\n  unsigned &= 0xffffffffffff;\n  c = Math.floor(unsigned / 0xffffffffff);\n  unsigned &= 0xffffffffff;\n  d = Math.floor(unsigned / 0xffffffff);\n  unsigned &= 0xffffffff;\n  e = Math.floor(unsigned / 0xffffff);\n  unsigned &= 0xffffff;\n  f = Math.floor(unsigned / 0xffff);\n  unsigned &= 0xffff;\n  g = Math.floor(unsigned / 0xff);\n  unsigned &= 0xff;\n  h = Math.floor(unsigned);\n  return chr(a) + chr(b) + chr(c) + chr(d) + chr(e) + chr(f) + chr(g) + chr(h);\n};\n\n/**\n  UTF8 methods\n**/\n\n// Take a raw binary string and return a utf8 string\np.decode_utf8 = function(a) {\n  var string = \"\";\n  var i = 0;\n  var c = c1 = c2 = 0;\n\n  while ( i < a.length ) {\n    c = a.charCodeAt(i);\n    if (c < 128) {\n      string += String.fromCharCode(c);\n      i++;\n    } else if((c > 191) && (c < 224)) {\n\t    c2 = a.charCodeAt(i+1);\n      string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\n      i += 2;\n    } else {\n\t    c2 = a.charCodeAt(i+1);\n\t    c3 = a.charCodeAt(i+2);\n      string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\n      i += 3;\n    }\n  }\n  return string;\n};\n\n// Encode a cstring correctly\np.encode_cstring = function(s) { \n  return unescape(encodeURIComponent(s)) + p.fromByte(0);\n};\n\n// Take a utf8 string and return a binary string\np.encode_utf8 = function(s) {\n  var a=\"\";\n  for (var n=0; n< s.length; n++) {\n    var c=s.charCodeAt(n);\n    if (c<128) {\n\t    a += String.fromCharCode(c);\n    } else if ((c>127)&&(c<2048)) {\n\t    a += String.fromCharCode( (c>>6) | 192) ;\n\t    a += String.fromCharCode( (c&63) | 128);\n    } else {\n      a += String.fromCharCode( (c>>12) | 224);\n      a += String.fromCharCode( ((c>>6) & 63) | 128);\n      a += String.fromCharCode( (c&63) | 128);\n    }\n  }\n  return a;\n};\n\np.pprint = function(s) {\n  var util = require('util');\n  \n  for (var i=0; i<s.length; i++) {\n    if (s.charCodeAt(i)<32) {util.puts(s.charCodeAt(i)+' : ');}\n    else {util.puts(s.charCodeAt(i)+' : '+ s.charAt(i));}\n  }\n};\n\np.hprint = function(s) {\n  var util = require('util');\n  \n  for (var i=0; i<s.length; i++) {\n    if (s.charCodeAt(i)<32) {util.puts(s.charCodeAt(i)+' : ');}\n    else {util.puts(s.charCodeAt(i).toString(16)+' : '+ s.charAt(i));}\n  }\n};\n\np.hex = function(s) {\n  var util = require('util');\n  var string = ''\n  \n  for (var i=0; i<s.length; i++) {\n    var c = s.charCodeAt(i).toString(16);\n    c = c.length == 1 ? \"0\" + c : c;\n    string = string + c;\n  }\n  \n  return string;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}