{"ast":null,"code":"var BlameLine = require('./blame_line').BlameLine;\nvar Blame = exports.Blame = function (repo, file, commit, callback) {\n  var _repo = repo,\n    _file = file,\n    _commit = commit,\n    _lines = [];\n\n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  var _commit = args.length ? args.shift() : null;\n\n  // Control access to internal variables\n  Object.defineProperty(this, \"repo\", {\n    get: function () {\n      return _repo;\n    },\n    set: function (value) {\n      _repo = value;\n    },\n    enumerable: false\n  });\n  Object.defineProperty(this, \"file\", {\n    get: function () {\n      return _file;\n    },\n    set: function (value) {\n      _file = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"commit\", {\n    get: function () {\n      return _commit;\n    },\n    set: function (value) {\n      _commit = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"lines\", {\n    get: function () {\n      return _lines;\n    },\n    set: function (value) {\n      _lines = value;\n    },\n    enumerable: true\n  });\n\n  // Load the blame object\n  load_blame(this, _repo, _file, _commit, callback);\n};\n\n// Load and parse the blame\nvar load_blame = function (blame, repo, file, commit, callback) {\n  repo.git.blame({\n    p: true\n  }, commit, '--', file, function (err, blame_output) {\n    process_raw_blame(blame, blame_output, repo, callback);\n  });\n};\n\n// Parse the output and set all parameters on the current blame object\nvar process_raw_blame = function (blame, output, repo, callback) {\n  // Cleanup the output (removing whitespace at the start and end)\n  output = output ? output.trim() : '';\n  // Set up variables\n  var lines = [],\n    final = [];\n  var info = {},\n    commits = [];\n  var output_lines = output.split(\"\\n\");\n  for (var i = 0; i < output_lines.length; i++) {\n    var line = output_lines[i];\n    var match = line.match(/^(\\w{40}) (\\d+) (\\d+)/);\n\n    // If we have a tab character at the start skip it\n    if (line.substr(0, 1) == \"\\t\") {\n      lines.push(line.substring(1, line.length));\n    } else if (match) {\n      if (!commits[match[1]]) {\n        repo.commit(match[1], function (err, commit) {\n          commits[match[1]] = commit;\n        });\n      }\n      // Add the info for this line\n      info[parseInt(match[3])] = [commits[match[1]], parseInt(match[2])];\n    }\n  }\n\n  // Let's sort the content\n  var sorted_keys = Object.keys(info).sort(function (a, b) {\n    return parseInt(a) - parseInt(b);\n  });\n  sorted_keys.forEach(function (key) {\n    var info_object = info[key];\n    final.push(new BlameLine(key, info_object[1], info_object[0], lines[key - 1]));\n  });\n  // Assign the blame lines to the blame object and return\n  blame.lines = final;\n  callback(null, blame);\n};","map":{"version":3,"names":["BlameLine","require","Blame","exports","repo","file","commit","callback","_repo","_file","_commit","_lines","args","Array","prototype","slice","call","arguments","pop","length","shift","Object","defineProperty","get","set","value","enumerable","load_blame","blame","git","p","err","blame_output","process_raw_blame","output","trim","lines","final","info","commits","output_lines","split","i","line","match","substr","push","substring","parseInt","sorted_keys","keys","sort","a","b","forEach","key","info_object"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/blame.js"],"sourcesContent":["var BlameLine = require('./blame_line').BlameLine;\n\nvar Blame = exports.Blame = function(repo, file, commit, callback) {  \n  var _repo = repo, _file = file, _commit = commit, _lines = [];\n  \n  // Unpack parameters as commit might be null\n  var args = Array.prototype.slice.call(arguments, 2);\n  callback = args.pop();\n  var _commit = args.length ? args.shift() : null;      \n  \n  // Control access to internal variables\n  Object.defineProperty(this, \"repo\", { get: function() { return _repo; }, set: function(value) { _repo = value; }, enumerable: false});    \n  Object.defineProperty(this, \"file\", { get: function() { return _file; }, set: function(value) { _file = value; }, enumerable: true});      \n  Object.defineProperty(this, \"commit\", { get: function() { return _commit; }, set: function(value) { _commit = value; }, enumerable: true});      \n  Object.defineProperty(this, \"lines\", { get: function() { return _lines; }, set: function(value) { _lines = value; }, enumerable: true});      \n  \n  // Load the blame object\n  load_blame(this, _repo, _file, _commit, callback);\n}\n\n// Load and parse the blame\nvar load_blame = function(blame, repo, file, commit, callback) {\n  repo.git.blame({p:true}, commit, '--', file, function(err, blame_output) {\n    process_raw_blame(blame, blame_output, repo, callback)\n  });\n}\n\n// Parse the output and set all parameters on the current blame object\nvar process_raw_blame = function(blame, output, repo, callback) {\n  // Cleanup the output (removing whitespace at the start and end)\n  output = output ? output.trim() : '';\n  // Set up variables\n  var lines = [], final = [];\n  var info = {}, commits = [];\n  \n  var output_lines = output.split(\"\\n\");\n  for(var i = 0; i < output_lines.length; i++) {\n    var line = output_lines[i];\n    var match = line.match(/^(\\w{40}) (\\d+) (\\d+)/);\n    \n    // If we have a tab character at the start skip it\n    if(line.substr(0, 1) == \"\\t\") {\n      lines.push(line.substring(1, line.length));\n    } else if(match) {\n      if(!commits[match[1]]) {\n        repo.commit(match[1], function(err, commit) {\n          commits[match[1]] = commit;          \n        });\n      }\n      // Add the info for this line\n      info[parseInt(match[3])] = [commits[match[1]], parseInt(match[2])];\n    }\n  }\n\n  // Let's sort the content\n  var sorted_keys = Object.keys(info).sort(function(a, b) { return parseInt(a) - parseInt(b); });\n  sorted_keys.forEach(function(key) {\n    var info_object = info[key];\n    final.push(new BlameLine(key, info_object[1], info_object[0], lines[key - 1]));\n  });\n  // Assign the blame lines to the blame object and return\n  blame.lines = final;\n  callback(null, blame);\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}