{"ast":null,"code":"var util = require('util'),\n  UserInfo = require('../user_info').UserInfo;\nvar GitCommit = exports.GitCommit = function (tree, parent, author, committer, message, headers, repository) {\n  var _tree = tree,\n    _parent = parent,\n    _author = author,\n    _committer = committer,\n    _message = message,\n    _headers = headers,\n    _repository = repository;\n  Object.defineProperty(this, \"tree\", {\n    get: function () {\n      return _tree;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"parent\", {\n    get: function () {\n      return _parent;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"author\", {\n    get: function () {\n      return _author;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"committer\", {\n    get: function () {\n      return _committer;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"message\", {\n    get: function () {\n      return _message;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"headers\", {\n    get: function () {\n      return _headers;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"repository\", {\n    get: function () {\n      return _repository;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"type\", {\n    get: function () {\n      return \"commit\";\n    },\n    enumerable: true\n  });\n\n  // Raw content of commit\n  Object.defineProperty(this, \"raw_content\", {\n    get: function () {\n      return \"tree \" + _tree + \"\\n\" + _parent.map(function (i) {\n        return \"parent \" + i + \"\\n\";\n      }).join('') + \"author \" + _author + \"\\ncommitter \" + _committer + \"\\n\\n\" + _message;\n    },\n    enumerable: true\n  });\n};\n\n// Create a commit from a raw object\nGitCommit.from_raw = function (raw_object, repository) {\n  var parent = [];\n  var tree = null,\n    author = null,\n    committer = null;\n\n  // Split the text but only grab the 2 first blocks\n  var split_result = raw_object.content.split(/\\n\\n/);\n  var headers = split_result.shift();\n  var message = split_result.join(\"\\n\\n\");\n\n  // get all the headers\n  var all_headers = headers.split(/\\n/).map(function (header) {\n    var parts = header.split(/ /);\n    return [parts.shift(), parts.join(\" \")];\n  });\n  // Iterate over all the headers\n  all_headers.forEach(function (header) {\n    var key = header[0];\n    var value = header[1];\n    if (key == \"tree\") {\n      tree = value;\n    } else if (key == \"parent\") {\n      parent.push(value);\n    } else if (key == \"author\") {\n      author = new UserInfo(value);\n    } else if (key == \"committer\") {\n      committer = new UserInfo(value);\n    } else {\n      // Unknow header\n      util.puts(\"unknow header '\" + key + \"' in commit \" + raw_object.sha_hex());\n    }\n  });\n  if (!tree && !author && !committer) {\n    throw \"incomplete raw commit object\";\n  }\n  // Return the git commit object\n  return new GitCommit(tree, parent, author, committer, message, headers, repository);\n};\nGitCommit.prototype.raw_log = function (sha1) {\n  var output = \"commit \" + sha1 + \"\\n\";\n  output = output + this.headers + \"\\n\\n\";\n  var lines = this.message.split(\"\\n\");\n  // Remove the last line which will be empty\n  for (var i = 0; i < (lines.length > 1 ? lines.length - 1 : lines.length); i++) {\n    output = output + '    ' + lines[i] + '\\n';\n  }\n  // Return the output\n  return output + '\\n';\n};","map":{"version":3,"names":["util","require","UserInfo","GitCommit","exports","tree","parent","author","committer","message","headers","repository","_tree","_parent","_author","_committer","_message","_headers","_repository","Object","defineProperty","get","enumerable","map","i","join","from_raw","raw_object","split_result","content","split","shift","all_headers","header","parts","forEach","key","value","push","puts","sha_hex","prototype","raw_log","sha1","output","lines","length"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/internal/git_commit.js"],"sourcesContent":["var util = require('util'), \n  UserInfo = require('../user_info').UserInfo;\n\nvar GitCommit = exports.GitCommit = function(tree, parent, author, committer, message, headers, repository) {\n  var _tree = tree, _parent = parent, _author = author, _committer = committer, _message = message, _headers = headers, _repository = repository;\n\n  Object.defineProperty(this, \"tree\", { get: function() { return _tree; }, enumerable: true});    \n  Object.defineProperty(this, \"parent\", { get: function() { return _parent; }, enumerable: true});    \n  Object.defineProperty(this, \"author\", { get: function() { return _author; }, enumerable: true});    \n  Object.defineProperty(this, \"committer\", { get: function() { return _committer; }, enumerable: true});    \n  Object.defineProperty(this, \"message\", { get: function() { return _message; }, enumerable: true});    \n  Object.defineProperty(this, \"headers\", { get: function() { return _headers; }, enumerable: true});    \n  Object.defineProperty(this, \"repository\", { get: function() { return _repository; }, enumerable: true});      \n  Object.defineProperty(this, \"type\", { get: function() { return \"commit\"; }, enumerable: true});     \n  \n  // Raw content of commit\n  Object.defineProperty(this, \"raw_content\", { get: function() {\n    return \"tree \" + _tree + \"\\n\" \n      + _parent.map(function(i) { return \"parent \" + i +\"\\n\"; }).join('') \n      + \"author \" + _author + \"\\ncommitter \" + _committer + \"\\n\\n\" + _message;\n  }, enumerable: true});        \n}\n\n// Create a commit from a raw object\nGitCommit.from_raw = function(raw_object, repository) {\n  var parent = [];\n  var tree = null, author = null, committer = null;\n  \n  // Split the text but only grab the 2 first blocks\n  var split_result = raw_object.content.split(/\\n\\n/);  \n  var headers = split_result.shift();  \n  var message = split_result.join(\"\\n\\n\");\n  \n  // get all the headers\n  var all_headers = headers.split(/\\n/).map(function(header) { \n    var parts = header.split(/ /);\n    return [parts.shift(), parts.join(\" \")];\n  })\n  // Iterate over all the headers\n  all_headers.forEach(function(header) {\n    var key = header[0];\n    var value = header[1];\n    \n    if(key == \"tree\") {\n      tree = value;\n    } else if(key == \"parent\") {\n      parent.push(value);\n    } else if(key == \"author\") {\n      author = new UserInfo(value);\n    } else if(key == \"committer\") {\n      committer = new UserInfo(value);\n    } else {\n      // Unknow header\n      util.puts(\"unknow header '\" + key + \"' in commit \" + raw_object.sha_hex())\n    }\n  })\n  \n  if(!tree && !author && !committer) {\n    throw \"incomplete raw commit object\";\n  }  \n  // Return the git commit object\n  return new GitCommit(tree, parent, author, committer, message, headers, repository);\n}\n\nGitCommit.prototype.raw_log = function(sha1) {\n  var output = \"commit \" + sha1 + \"\\n\";\n  output = output + this.headers + \"\\n\\n\";\n  var lines = this.message.split(\"\\n\");    \n  // Remove the last line which will be empty\n  for(var i = 0; i < (lines.length > 1 ? lines.length - 1 : lines.length); i++) {\n    output = output + '    ' + lines[i] + '\\n';\n  }\n  // Return the output\n  return output + '\\n';\n}\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}