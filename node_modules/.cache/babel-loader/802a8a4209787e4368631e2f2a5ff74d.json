{"ast":null,"code":"var util = require('util'),\n  StringUtil = require('../sprintf/sprintf').StringUtil;\nvar UserInfo = exports.UserInfo = function (string) {\n  var _email = '',\n    _date = new Date(),\n    _offset = 0,\n    _name = '';\n\n  // Parse the content\n  var match_results = string.match(/^(.*?) <(.*)> (\\d+) ([+-])0*(\\d+?)$/);\n  // If we don't have a correct match set parse it partially\n  if (!match_results) {\n    if (string.match(/<.+>/)) {\n      var sub_match = string.match(/(.*) <(.+?)>/);\n      _name = sub_match[1];\n      _email = sub_match[2];\n    } else {\n      _name = string;\n    }\n  } else {\n    _name = match_results[1];\n    _email = match_results[2];\n    _date = new Date(parseInt(match_results[3] * 1000));\n    _offset = (match_results[4] == \"-\" ? -1 : 1) * parseInt(match_results[5]);\n  }\n\n  // Define properties\n  Object.defineProperty(this, \"name\", {\n    get: function () {\n      return _name;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"email\", {\n    get: function () {\n      return _email;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"date\", {\n    get: function () {\n      return _date;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"offset\", {\n    get: function () {\n      return _offset;\n    },\n    enumerable: true\n  });\n};\nUserInfo.prototype.toString = function () {\n  // Ensure correct formating for the offset\n  var offset_str = this.offset.toString();\n  var add_string = '';\n  if (offset_str.length < 5) {\n    for (var i = 0; i < 5 - offset_str.length; i++) {\n      add_string += '0';\n    }\n    offset_str = offset_str.substr(0, 1) + add_string + offset_str.substr(1);\n  }\n  // Return the userinfo as a string\n  return \"\" + this.name + \" <\" + this.email + \"> \" + this.date.getTime() / 1000 + \" \" + offset_str;\n};","map":{"version":3,"names":["util","require","StringUtil","UserInfo","exports","string","_email","_date","Date","_offset","_name","match_results","match","sub_match","parseInt","Object","defineProperty","get","enumerable","prototype","toString","offset_str","offset","add_string","length","i","substr","name","email","date","getTime"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/user_info.js"],"sourcesContent":["var util = require('util'),\n  StringUtil = require('../sprintf/sprintf').StringUtil;\n\nvar UserInfo = exports.UserInfo = function(string) {\n  var _email = '', _date = new Date(), _offset = 0, _name = '';\n   \n  // Parse the content\n  var match_results = string.match(/^(.*?) <(.*)> (\\d+) ([+-])0*(\\d+?)$/);\n  // If we don't have a correct match set parse it partially\n  if(!match_results) {\n    if(string.match(/<.+>/)) {\n      var sub_match = string.match(/(.*) <(.+?)>/);\n      _name = sub_match[1];\n      _email = sub_match[2];\n    } else {\n      _name = string;\n    }\n  } else {\n    _name = match_results[1];\n    _email = match_results[2];\n    _date = new Date(parseInt(match_results[3] * 1000));\n    _offset = (match_results[4] == \"-\" ? -1 : 1) * parseInt(match_results[5]);\n  }\n\n  // Define properties\n  Object.defineProperty(this, \"name\", { get: function() { return _name; }, enumerable: true});    \n  Object.defineProperty(this, \"email\", { get: function() { return _email; }, enumerable: true});    \n  Object.defineProperty(this, \"date\", { get: function() { return _date; }, enumerable: true});  \n  Object.defineProperty(this, \"offset\", { get: function() { return _offset; }, enumerable: true});  \n}\n\nUserInfo.prototype.toString = function() {\n  // Ensure correct formating for the offset\n  var offset_str = this.offset.toString();\n  var add_string = '';\n  if(offset_str.length < 5) {\n    for(var i = 0; i < (5 - offset_str.length); i++) { add_string += '0'; }\n    offset_str = offset_str.substr(0, 1) + add_string + offset_str.substr(1);\n  }  \n  // Return the userinfo as a string\n  return \"\" + this.name + \" <\" + this.email + \"> \" + (this.date.getTime()/1000) + \" \" + offset_str;\n}"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;EACxBC,UAAU,GAAGD,OAAO,CAAC,oBAAoB,CAAC,CAACC,UAAU;AAEvD,IAAIC,QAAQ,GAAGC,OAAO,CAACD,QAAQ,GAAG,UAASE,MAAM,EAAE;EACjD,IAAIC,MAAM,GAAG,EAAE;IAAEC,KAAK,GAAG,IAAIC,IAAI,EAAE;IAAEC,OAAO,GAAG,CAAC;IAAEC,KAAK,GAAG,EAAE;;EAE5D;EACA,IAAIC,aAAa,GAAGN,MAAM,CAACO,KAAK,CAAC,qCAAqC,CAAC;EACvE;EACA,IAAG,CAACD,aAAa,EAAE;IACjB,IAAGN,MAAM,CAACO,KAAK,CAAC,MAAM,CAAC,EAAE;MACvB,IAAIC,SAAS,GAAGR,MAAM,CAACO,KAAK,CAAC,cAAc,CAAC;MAC5CF,KAAK,GAAGG,SAAS,CAAC,CAAC,CAAC;MACpBP,MAAM,GAAGO,SAAS,CAAC,CAAC,CAAC;IACvB,CAAC,MAAM;MACLH,KAAK,GAAGL,MAAM;IAChB;EACF,CAAC,MAAM;IACLK,KAAK,GAAGC,aAAa,CAAC,CAAC,CAAC;IACxBL,MAAM,GAAGK,aAAa,CAAC,CAAC,CAAC;IACzBJ,KAAK,GAAG,IAAIC,IAAI,CAACM,QAAQ,CAACH,aAAa,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;IACnDF,OAAO,GAAG,CAACE,aAAa,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,IAAIG,QAAQ,CAACH,aAAa,CAAC,CAAC,CAAC,CAAC;EAC3E;;EAEA;EACAI,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;IAAEC,GAAG,EAAE,YAAW;MAAE,OAAOP,KAAK;IAAE,CAAC;IAAEQ,UAAU,EAAE;EAAI,CAAC,CAAC;EAC3FH,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE;IAAEC,GAAG,EAAE,YAAW;MAAE,OAAOX,MAAM;IAAE,CAAC;IAAEY,UAAU,EAAE;EAAI,CAAC,CAAC;EAC7FH,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;IAAEC,GAAG,EAAE,YAAW;MAAE,OAAOV,KAAK;IAAE,CAAC;IAAEW,UAAU,EAAE;EAAI,CAAC,CAAC;EAC3FH,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;IAAEC,GAAG,EAAE,YAAW;MAAE,OAAOR,OAAO;IAAE,CAAC;IAAES,UAAU,EAAE;EAAI,CAAC,CAAC;AACjG,CAAC;AAEDf,QAAQ,CAACgB,SAAS,CAACC,QAAQ,GAAG,YAAW;EACvC;EACA,IAAIC,UAAU,GAAG,IAAI,CAACC,MAAM,CAACF,QAAQ,EAAE;EACvC,IAAIG,UAAU,GAAG,EAAE;EACnB,IAAGF,UAAU,CAACG,MAAM,GAAG,CAAC,EAAE;IACxB,KAAI,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAI,CAAC,GAAGJ,UAAU,CAACG,MAAO,EAAEC,CAAC,EAAE,EAAE;MAAEF,UAAU,IAAI,GAAG;IAAE;IACtEF,UAAU,GAAGA,UAAU,CAACK,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAGH,UAAU,GAAGF,UAAU,CAACK,MAAM,CAAC,CAAC,CAAC;EAC1E;EACA;EACA,OAAO,EAAE,GAAG,IAAI,CAACC,IAAI,GAAG,IAAI,GAAG,IAAI,CAACC,KAAK,GAAG,IAAI,GAAI,IAAI,CAACC,IAAI,CAACC,OAAO,EAAE,GAAC,IAAK,GAAG,GAAG,GAAGT,UAAU;AAClG,CAAC"},"metadata":{},"sourceType":"script"}