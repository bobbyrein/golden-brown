{"ast":null,"code":"var StringUtil = require('../../sprintf/sprintf').StringUtil;\nvar S_IFMT = parseInt('00170000', 8);\nvar S_IFLNK = parseInt('0120000', 8);\nvar S_IFREG = parseInt('0100000', 8);\nvar S_IFDIR = parseInt('0040000', 8);\nvar S_IFGITLINK = parseInt('0160000', 8);\nvar DirectoryEntry = exports.DirectoryEntry = function (mode, file_name, sha1) {\n  var _mode = 0,\n    _name = file_name,\n    _sha1 = sha1;\n  var self = this;\n\n  // Process the mode to correctly get the right value\n  for (var i = 0; i < mode.length; i++) {\n    _mode = _mode << 3 | mode.charCodeAt(i) - '0'.charCodeAt(0);\n  }\n\n  // Internal properties\n  Object.defineProperty(this, \"mode\", {\n    get: function () {\n      return _mode;\n    },\n    set: function (value) {\n      _mode = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"name\", {\n    get: function () {\n      return _name;\n    },\n    set: function (value) {\n      _name = value;\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"sha1\", {\n    get: function () {\n      return _sha1;\n    },\n    set: function (value) {\n      _sha1 = value;\n    },\n    enumerable: true\n  });\n  // Return the type of entry\n  Object.defineProperty(this, \"type\", {\n    get: function () {\n      var type = self.mode & S_IFMT;\n      if (type == S_IFGITLINK) {\n        return 'submodule';\n      } else if (type == S_IFLNK) {\n        return 'link';\n      } else if (type == S_IFDIR) {\n        return 'directory';\n      } else if (type == S_IFREG) {\n        return 'file';\n      } else {\n        return null;\n      }\n    },\n    enumerable: true\n  });\n  Object.defineProperty(this, \"format_type\", {\n    get: function () {\n      var type = this.type;\n      if (type == 'link') {\n        return 'link';\n      } else if (type == 'directory') {\n        return 'tree';\n      } else if (type == 'file') {\n        return 'blob';\n      } else if (type == 'submodule') {\n        return 'commit';\n      }\n    },\n    enumerable: false\n  });\n  Object.defineProperty(this, \"format_mode\", {\n    get: function () {\n      return StringUtil.sprintf(\"%06o\", _mode);\n    },\n    enumerable: false\n  });\n\n  // Ensure we don't have an illegal type of directory\n  if ([S_IFLNK, S_IFDIR, S_IFREG, S_IFGITLINK].indexOf(_mode & S_IFMT) == -1) {\n    throw \"unknown type for directory entry\";\n  }\n};","map":{"version":3,"names":["StringUtil","require","S_IFMT","parseInt","S_IFLNK","S_IFREG","S_IFDIR","S_IFGITLINK","DirectoryEntry","exports","mode","file_name","sha1","_mode","_name","_sha1","self","i","length","charCodeAt","Object","defineProperty","get","set","value","enumerable","type","sprintf","indexOf"],"sources":["/Users/bobbyrein/react-course/golden-brown/node_modules/git/lib/git/internal/directory_entry.js"],"sourcesContent":["var StringUtil = require('../../sprintf/sprintf').StringUtil;\n\nvar S_IFMT = parseInt('00170000', 8);\nvar S_IFLNK = parseInt('0120000', 8);\nvar S_IFREG = parseInt('0100000', 8);\nvar S_IFDIR = parseInt('0040000', 8);\nvar S_IFGITLINK = parseInt('0160000', 8);\n\nvar DirectoryEntry = exports.DirectoryEntry = function(mode, file_name, sha1) {\n  var _mode = 0, _name = file_name, _sha1 = sha1;\n  var self = this;\n  \n  // Process the mode to correctly get the right value\n  for(var i = 0; i < mode.length; i++) {\n    _mode = (_mode << 3) | (mode.charCodeAt(i) - '0'.charCodeAt(0));\n  }\n  \n  // Internal properties\n  Object.defineProperty(this, \"mode\", { get: function() { return _mode; }, set: function(value) { _mode = value; }, enumerable: true});\n  Object.defineProperty(this, \"name\", { get: function() { return _name; }, set: function(value) { _name = value; }, enumerable: true});\n  Object.defineProperty(this, \"sha1\", { get: function() { return _sha1; }, set: function(value) { _sha1 = value; }, enumerable: true});\n  // Return the type of entry\n  Object.defineProperty(this, \"type\", { get: function() { \n      var type = self.mode & S_IFMT;\n      if(type == S_IFGITLINK) {\n        return 'submodule';\n      } else if(type == S_IFLNK) {\n        return 'link';\n      } else if(type == S_IFDIR) {\n        return 'directory';\n      } else if(type == S_IFREG) {\n        return 'file';\n      } else {\n        return null;\n      }    \n    }, enumerable: true});\n\n  Object.defineProperty(this, \"format_type\", { get:function() {\n    var type = this.type;\n    if(type == 'link') {\n      return 'link';\n    } else if(type == 'directory') {\n      return 'tree';\n    } else if(type == 'file') {\n      return 'blob';\n    } else if(type == 'submodule') {\n      return 'commit';\n    }\n  }, enumerable: false});\n\n  Object.defineProperty(this, \"format_mode\", { get:function() {\n    return StringUtil.sprintf(\"%06o\", _mode);\n  }, enumerable: false});  \n  \n  // Ensure we don't have an illegal type of directory\n  if([S_IFLNK, S_IFDIR, S_IFREG, S_IFGITLINK].indexOf(_mode & S_IFMT) == -1) {\n    throw \"unknown type for directory entry\";\n  }   \n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}